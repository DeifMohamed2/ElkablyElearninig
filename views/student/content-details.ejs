<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= contentItem.title %> - Content | ELKABLY</title>

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="/images/KImage.png">
  <link rel="shortcut icon" type="image/png" href="/images/KImage.png">
  <link rel="apple-touch-icon" href="/images/KImage.png">

  <!-- CSS -->
  <link rel="stylesheet" href="/css/studentCSS/student-main.css">
  <link rel="stylesheet" href="/css/studentCSS/courses.css">
  <link rel="stylesheet" href="/css/theme-toggle.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">

  <!-- Enhanced Styles -->
  <style>
    /* Content Actions Enhanced */
    .content-actions-completed {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
    }

    .completion-status {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 12px 16px;
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      border-radius: 8px;
      font-weight: 500;
    }

    /* Navigation Styles */
    .content-navigation-section {
      margin-top: 2rem;
      padding: 1.5rem;
      background: var(--card-bg);
      border-radius: 12px;
      border: 1px solid var(--border-color);
    }

    .navigation-container {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      gap: 1.5rem;
      align-items: center;
    }

    .nav-button {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 16px 20px;
      background: var(--primary-color);
      color: white;
      text-decoration: none;
      border-radius: 10px;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
    }

    /* Animation for when button becomes enabled */
    .nav-button.enabled {
      animation: enableButton 0.6s ease-out;
    }

    @keyframes enableButton {
      0% {
        background: #6b7280;
        transform: scale(1);
      }

      50% {
        background: var(--primary-color);
        transform: scale(1.05);
        box-shadow: 0 4px 20px rgba(220, 38, 38, 0.4);
      }

      100% {
        background: var(--primary-color);
        transform: scale(1);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }
    }

    .nav-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
      color: white;
      text-decoration: none;
    }

    .nav-button:not(.disabled):hover {
      background: var(--primary-hover, #b91c1c);
    }

    .nav-button:not(.disabled):active {
      transform: translateY(-1px);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    .nav-button.disabled {
      background: #6b7280;
      color: #9ca3af;
      cursor: not-allowed;
      opacity: 0.7;
      position: relative;
    }

    .nav-button.disabled:hover {
      transform: none;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      background: #6b7280;
      color: #9ca3af;
    }

    .nav-button.disabled::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
      pointer-events: none;
    }

    .nav-previous {
      flex-direction: row;
    }

    .nav-next {
      flex-direction: row-reverse;
    }

    .nav-icon {
      font-size: 18px;
      width: 24px;
      text-align: center;
    }

    .nav-content {
      flex: 1;
    }

    .nav-label {
      font-size: 12px;
      font-weight: 500;
      opacity: 0.8;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .nav-title {
      font-size: 14px;
      font-weight: 600;
      margin-top: 2px;
      line-height: 1.3;
    }

    .nav-subtitle {
      font-size: 11px;
      opacity: 0.7;
      margin-top: 2px;
    }

    .nav-progress {
      text-align: center;
      min-width: 120px;
    }

    .progress-info {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 4px;
      margin-bottom: 8px;
      font-size: 14px;
      font-weight: 600;
      color: var(--text-color);
    }

    .current-position {
      color: var(--primary-color);
    }

    .separator {
      opacity: 0.6;
    }

    .progress-bar {
      width: 100%;
      height: 4px;
      background: var(--border-color);
      border-radius: 2px;
      overflow: hidden;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
      border-radius: 2px;
      transition: width 0.3s ease;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .navigation-container {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .nav-progress {
        order: -1;
      }

      .nav-button {
        padding: 12px 16px;
      }

      .nav-title {
        font-size: 13px;
      }
    }

    /* Dark theme adjustments */
    .dark-theme .content-navigation-section {
      background: var(--dark-card-bg);
      border-color: var(--dark-border-color);
    }

    .dark-theme .nav-button.disabled {
      background: var(--dark-muted-bg);
      color: var(--dark-muted-text);
    }

    /* Video Player Styles */
    .player-wrapper {
      position: relative;
      padding-top: 56.25%;
      /* 16:9 aspect ratio */
      margin-bottom: 20px;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .player-wrapper iframe {
      border: 0;
      position: absolute;
      top: 0;
      height: 100%;
      width: 100%;
    }

    /* Quiz/Homework Details Styles */
    .quiz-details-grid,
    .homework-details-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin: 1.5rem 0;
      padding: 1rem;
      background: var(--bg-color);
      border-radius: 8px;
      border: 1px solid var(--border-color);
    }

    .detail-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem;
      background: var(--card-bg);
      border-radius: 6px;
      border: 1px solid var(--border-color);
    }

    .detail-item i {
      color: var(--primary-color);
      font-size: 1.1rem;
    }

    .detail-item span {
      font-weight: 500;
      color: var(--text-color);
    }

    .quiz-progress-info,
    .homework-progress-info {
      margin: 1.5rem 0;
      padding: 1rem;
      background: linear-gradient(135deg, #f8fafc, #e2e8f0);
      border: 1px solid #cbd5e1;
      border-radius: 8px;
    }

    .quiz-progress-info h4,
    .homework-progress-info h4 {
      margin-bottom: 1rem;
      color: #1e293b;
      font-weight: 600;
    }

    .progress-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 1rem;
    }

    .stat-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem 0;
      border-bottom: 1px solid #e2e8f0;
    }

    .stat-item:last-child {
      border-bottom: none;
    }

    .stat-label {
      font-weight: 500;
      color: #374151;
    }

    .stat-value {
      font-weight: 600;
      color: #1f2937;
    }

    .stat-value.text-success {
      color: #10b981;
    }

    .stat-value.text-warning {
      color: #f59e0b;
    }

    /* Dark theme adjustments */
    .dark-theme .quiz-details-grid,
    .dark-theme .homework-details-grid {
      background: var(--dark-bg-color);
      border-color: var(--dark-border-color);
    }

    .dark-theme .detail-item {
      background: var(--dark-card-bg);
      border-color: var(--dark-border-color);
    }

    .dark-theme .detail-item span {
      color: var(--dark-text-color);
    }

    .dark-theme .quiz-progress-info,
    .dark-theme .homework-progress-info {
      background: linear-gradient(135deg, #1e293b, #334155);
      border-color: #475569;
    }

    .dark-theme .quiz-progress-info h4,
    .dark-theme .homework-progress-info h4 {
      color: #f1f5f9;
    }

    .dark-theme .stat-label {
      color: #d1d5db;
    }

    .dark-theme .stat-value {
      color: #f9fafb;
    }

    /* Quiz/Homework Completion Styles */
    .quiz-completed-section,
    .homework-completed-section {
      text-align: center;
      padding: 2rem;
      background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
      border: 1px solid #0ea5e9;
      border-radius: 12px;
      margin: 1.5rem 0;
    }

    .completion-badge {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      padding: 1rem 2rem;
      border-radius: 50px;
      font-weight: 600;
      font-size: 1.1rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    .completion-badge i {
      font-size: 1.3rem;
    }

    .completion-details {
      margin-bottom: 1.5rem;
    }

    .completion-details p {
      margin: 0.5rem 0;
      color: #374151;
      font-size: 1rem;
    }

    .completion-details strong {
      color: #1f2937;
    }

    .completion-actions {
      display: flex;
      justify-content: center;
      gap: 1rem;
    }

    /* Dark theme adjustments for completion sections */
    .dark-theme .quiz-completed-section,
    .dark-theme .homework-completed-section {
      background: linear-gradient(135deg, #1e293b, #334155);
      border-color: #475569;
    }

    .dark-theme .completion-details p {
      color: #d1d5db;
    }

    .dark-theme .completion-details strong {
      color: #f9fafb;
    }

    /* Content Header Styles */
    .content-header-section {
      background: var(--gradient-primary);
      color: var(--text-white);
      padding: var(--spacing-2xl);
      margin-bottom: var(--spacing-2xl);
      border-radius: var(--radius-xl);
      position: relative;
      overflow: hidden;
    }

    .content-header-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.05)"/><circle cx="10" cy="60" r="0.5" fill="rgba(255,255,255,0.05)"/><circle cx="90" cy="40" r="0.5" fill="rgba(255,255,255,0.05)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
      opacity: 0.3;
    }

    .content-header-content {
      position: relative;
      z-index: 1;
      display: flex;
      align-items: center;
      gap: var(--spacing-xl);
    }

    .content-header-info {
      flex: 1;
    }

    .content-type-badge {
      display: inline-flex;
      align-items: center;
      gap: var(--spacing-sm);
      padding: var(--spacing-sm) var(--spacing-md);
      background: rgba(255, 255, 255, 0.2);
      color: var(--text-white);
      border-radius: var(--radius-lg);
      font-size: 0.9rem;
      font-weight: 600;
      margin-bottom: var(--spacing-md);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .content-title-main {
      font-size: 2.5rem;
      font-weight: 800;
      margin-bottom: var(--spacing-md);
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      color: var(--text-white);
    }

    .content-description-main {
      font-size: 1.1rem;
      opacity: 0.9;
      margin-bottom: var(--spacing-lg);
      line-height: 1.6;
      color: var(--text-white);
    }

    .content-meta-info {
      display: flex;
      gap: var(--spacing-xl);
      flex-wrap: wrap;
    }

    .content-progress-section {
      display: flex;
      align-items: center;
      gap: var(--spacing-lg);
    }

    /* Content Body Styles */
    .content-body-section {
      background: var(--bg-card);
      border: 1px solid var(--border-color);
      border-radius: var(--radius-lg);
      padding: var(--spacing-xl);
      margin-bottom: var(--spacing-xl);
      box-shadow: var(--shadow-sm);
    }

    /* Content Actions */
    .content-actions {
      display: flex;
      justify-content: center;
      gap: var(--spacing-md);
      margin-top: var(--spacing-xl);
    }

    /* Auto Completion Section */
    .content-auto-completion-section {
      text-align: center;
      padding: var(--spacing-xl);
      background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(5, 150, 105, 0.05));
      border: 1px solid rgba(16, 185, 129, 0.2);
      border-radius: var(--radius-lg);
      margin: var(--spacing-xl) 0;
    }

    .auto-completion-status {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--spacing-md);
      color: var(--success-color);
      font-weight: 600;
      font-size: 1.1rem;
    }

    .auto-completion-status i {
      font-size: 1.5rem;
    }

    /* Quiz/Homework Compact Styles */
    .quiz-details-compact,
    .homework-details-compact {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: var(--spacing-md);
      margin: var(--spacing-lg) 0;
    }

    .quiz-detail-item,
    .homework-detail-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--spacing-xs);
      padding: var(--spacing-md);
      background: var(--bg-secondary);
      border: 1px solid var(--border-color);
      border-radius: var(--radius-md);
      text-align: center;
    }

    .quiz-detail-item i,
    .homework-detail-item i {
      color: var(--primary-color);
      font-size: 1.2rem;
    }

    .detail-label {
      font-size: 0.8rem;
      color: var(--text-muted);
      font-weight: 500;
    }

    .detail-value {
      font-size: 1rem;
      font-weight: 700;
      color: var(--text-primary);
    }

    .quiz-progress-compact,
    .homework-progress-compact {
      display: flex;
      justify-content: space-between;
      margin: var(--spacing-md) 0;
      padding: var(--spacing-md);
      background: var(--bg-secondary);
      border-radius: var(--radius-md);
    }

    .progress-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--spacing-xs);
    }

    .progress-label {
      font-size: 0.8rem;
      color: var(--text-muted);
      font-weight: 500;
    }

    .progress-value {
      font-size: 1rem;
      font-weight: 700;
      color: var(--text-primary);
    }

    .quiz-completed-compact,
    .homework-completed-compact {
      text-align: center;
      padding: var(--spacing-lg);
      background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(5, 150, 105, 0.05));
      border: 1px solid rgba(16, 185, 129, 0.2);
      border-radius: var(--radius-lg);
      margin: var(--spacing-lg) 0;
    }

    .completion-badge-compact {
      display: inline-flex;
      align-items: center;
      gap: var(--spacing-sm);
      background: var(--gradient-success);
      color: var(--text-white);
      padding: var(--spacing-sm) var(--spacing-lg);
      border-radius: var(--radius-full);
      font-weight: 600;
      margin-bottom: var(--spacing-md);
    }

    .completion-details-compact {
      margin-bottom: var(--spacing-lg);
    }

    .completion-detail-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin: var(--spacing-sm) 0;
      padding: var(--spacing-sm) 0;
      border-bottom: 1px solid var(--border-color);
    }

    .completion-detail-row:last-child {
      border-bottom: none;
    }

    .completion-actions-compact {
      display: flex;
      justify-content: center;
    }

    /* Content Type Containers */
    .video-content,
    .pdf-content,
    .quiz-content,
    .homework-content,
    .reading-content,
    .link-content,
    .assignment-content,
    .generic-content {
      padding: var(--spacing-lg);
    }

    .video-container,
    .pdf-container {
      border-radius: var(--radius-lg);
      overflow: hidden;
      box-shadow: var(--shadow-md);
    }

    .quiz-info,
    .homework-info,
    .link-info,
    .assignment-info {
      padding: var(--spacing-lg);
      background: var(--bg-secondary);
      border-radius: var(--radius-lg);
      border: 1px solid var(--border-color);
    }

    .quiz-info h3,
    .homework-info h3,
    .link-info h3,
    .assignment-info h3 {
      color: var(--text-primary);
      font-size: 1.5rem;
      font-weight: 700;
      margin-bottom: var(--spacing-md);
    }

    .quiz-info p,
    .homework-info p,
    .link-info p,
    .assignment-info p {
      color: var(--text-secondary);
      margin-bottom: var(--spacing-lg);
      line-height: 1.6;
    }

    .reading-content-text {
      max-height: 400px;
      overflow-y: auto;
      padding: var(--spacing-lg);
      background: var(--bg-secondary);
      border-radius: var(--radius-lg);
      border: 1px solid var(--border-color);
      line-height: 1.8;
    }

    .reading-progress-indicator,
    .pdf-progress-indicator {
      text-align: center;
      margin-top: var(--spacing-md);
      padding: var(--spacing-md);
      background: var(--bg-secondary);
      border-radius: var(--radius-md);
      border: 1px solid var(--border-color);
    }

    /* Placeholder Content */
    .placeholder-content {
      text-align: center;
      padding: var(--spacing-3xl);
      color: var(--text-muted);
    }

    .placeholder-content i {
      font-size: 3rem;
      margin-bottom: var(--spacing-lg);
      opacity: 0.5;
    }

    .placeholder-content p {
      font-size: 1.1rem;
      font-weight: 500;
    }

    /* Dark theme adjustments */
    .dark-theme .content-header-section {
      background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%);
    }

    .dark-theme .content-body-section {
      background: var(--dark-card-bg);
      border-color: var(--dark-border-color);
    }

    .dark-theme .quiz-detail-item,
    .dark-theme .homework-detail-item {
      background: var(--dark-bg-secondary);
      border-color: var(--dark-border-color);
    }

    .dark-theme .quiz-progress-compact,
    .dark-theme .homework-progress-compact {
      background: var(--dark-bg-secondary);
    }

    .dark-theme .completion-detail-row {
      border-color: var(--dark-border-color);
    }

    .dark-theme .quiz-info,
    .dark-theme .homework-info,
    .dark-theme .link-info,
    .dark-theme .assignment-info {
      background: var(--dark-bg-secondary);
      border-color: var(--dark-border-color);
    }

    .dark-theme .reading-content-text {
      background: var(--dark-bg-secondary);
      border-color: var(--dark-border-color);
    }

    .dark-theme .reading-progress-indicator,
    .dark-theme .pdf-progress-indicator {
      background: var(--dark-bg-secondary);
      border-color: var(--dark-border-color);
    }

    /* Success button */
    .btn-success {
      background: var(--gradient-success);
      color: var(--text-white);
      border: none;
    }

    .btn-success:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    /* Text utilities */
    .text-success {
      color: var(--success-color) !important;
    }

    .text-warning {
      color: var(--warning-color) !important;
    }

    .text-muted {
      color: var(--text-muted) !important;
    }

    /* Attempt status badges */
    .attempt-status {
      font-size: 12px;
      padding: 4px 8px;
      border-radius: 999px;
      color: #fff;
      font-weight: 600;
    }

    .attempt-status.passed {
      background: #10b981;
    }

    .attempt-status.failed {
      background: #ef4444;
    }

    /* SweetAlert2 Custom Styles */
    .swal2-popup-custom {
      border-radius: 16px !important;
      font-family: 'Inter', sans-serif !important;
      border: 2px solid #dc2626 !important;
    }

    .swal2-title-custom {
      color: #1f2937 !important;
      font-weight: 700 !important;
      font-size: 1.5rem !important;
    }

    .swal2-content-custom {
      color: #6b7280 !important;
    }

    .swal2-confirm-custom {
      background: #dc2626 !important;
      border: none !important;
      border-radius: 8px !important;
      font-weight: 600 !important;
      padding: 12px 24px !important;
      transition: all 0.2s ease !important;
    }

    .swal2-confirm-custom:hover {
      background: #b91c1c !important;
      transform: translateY(-1px) !important;
      box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3) !important;
    }

    .swal2-cancel-custom {
      background: #6b7280 !important;
      border: none !important;
      border-radius: 8px !important;
      font-weight: 600 !important;
      padding: 12px 24px !important;
      transition: all 0.2s ease !important;
    }

    .swal2-cancel-custom:hover {
      background: #4b5563 !important;
      transform: translateY(-1px) !important;
    }

    /* Dark theme support for SweetAlert2 */
    .dark-theme .swal2-popup-custom {
      background: #1f2937 !important;
      border-color: #dc2626 !important;
    }

    .dark-theme .swal2-title-custom {
      color: #f9fafb !important;
    }

    .dark-theme .swal2-content-custom {
      color: #d1d5db !important;
    }
  </style>

  <!-- Meta Tags -->
  <meta name="description" content="<%= contentItem.title %> - Continue your learning journey">
  <meta name="theme-color" content="#dc2626">
</head>

<body class="<%= theme %>-theme">
  <!-- Student Layout -->
  <div class="student-layout">
    <!-- Include Sidebar -->
    <%- include('partials/student-sidebar', { currentPage: 'courses', student: student }) %>

    <!-- Main Content -->
    <main class="student-main">
      <!-- Include Header -->
      <%- include('partials/student-header', { title: 'Content', student: student, theme: theme, currentPage: 'content' }) %>

      <!-- Content Details -->
      <div class="student-content">
        <!-- Back Button -->
        <div class="back-button-container">
          <a href="/student/course/<%= course._id %>/content" class="btn btn-outline btn-sm">
            <i class="fas fa-arrow-left"></i>
            Back to Week Content
          </a>
        </div>

        <!-- Content Header -->
        <div class="content-header-section">
          <div class="content-header-content">
            <div class="content-header-info">
              <div class="content-type-badge <%= contentItem.type %>">
                <i class="fas fa-<%= getContentIcon(contentItem.type) %>"></i>
                <span><%= contentItem.type.charAt(0).toUpperCase() + contentItem.type.slice(1) %></span>
              </div>

              <h1 class="content-title-main"><%= contentItem.title %></h1>

              <% if (contentItem.description) { %>
              <p class="content-description-main"><%= contentItem.description %></p>
              <% } %>

              <div class="content-meta-info">
                <div class="meta-item">
                  <i class="fas fa-clock"></i>
                  <span>
                    <% if (contentItem.type === 'quiz' && contentItem.quizSettings && contentItem.quizSettings.duration) { %>
                    <%= contentItem.quizSettings.duration %> minutes
                    <% } else if (contentItem.type === 'homework' && contentItem.homeworkSettings && contentItem.homeworkSettings.duration) { %>
                    <%= contentItem.homeworkSettings.duration %> minutes
                    <% } else { %>
                    <% if (contentItem.duration && contentItem.duration > 0) { %>
                    <%= contentItem.duration %> minutes
                    <% } else { %>
                    No time limit
                    <% } %>
                    <% } %>
                  </span>
                </div>
                <div class="meta-item">
                  <i class="fas fa-signal"></i>
                  <span><%= contentItem.difficulty.charAt(0).toUpperCase() + contentItem.difficulty.slice(1) %></span>
                </div>
                <div class="meta-item">
                  <i class="fas fa-target"></i>
                  <span><%= contentItem.completionCriteria.replace('_', ' ') %></span>
                </div>
              </div>
            </div>

            <div class="content-progress-section">
              <div class="progress-circle-large">
                <svg viewBox="0 0 120 120" class="progress-ring-large">
                  <circle class="circle-bg-large" cx="60" cy="60" r="50"></circle>
                  <circle class="circle-large" cx="60" cy="60" r="50" stroke-dasharray="<%= contentProgress.progressPercentage * 3.14 %>, 314"></circle>
                </svg>
                <div class="progress-text">
                  <span class="progress-percentage"><%= contentProgress.progressPercentage %>%</span>
                  <span class="progress-label">Complete</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Content Body -->
        <div class="content-body-section">
          <% if (contentItem.type === 'video') { %>
          <div class="video-content">
            <div class="video-container">
              <% if (contentItem.content) { %>
              <%- contentItem.content %>

              <% } else { %>
              <div class="placeholder-content">
                <i class="fas fa-video"></i>
                <p>Video content will be available here</p>
              </div>
              <% } %>
            </div>
          </div>
          <% } else if (contentItem.type === 'pdf') { %>
          <div class="pdf-content">
            <div class="pdf-container">
              <% if (contentItem.content) { %>
              <iframe src="<%= contentItem.content %>" width="100%" height="600" onload="handlePDFLoad(this)"></iframe>
              <% if (!contentProgress.isCompleted) { %>
              <div style="display:flex; gap:10px; align-items:center; margin-top:12px;">
                <a href="<%= contentItem.content %>" target="_blank" class="btn btn-outline btn-sm" onclick="handleDownloadAcknowledge(event)">
                  <i class="fas fa-download"></i>
                  Download PDF
                </a>
                <button class="btn btn-success btn-sm" onclick="acknowledgeAndComplete()">
                  <i class="fas fa-check"></i>
                  I have read this PDF
                </button>
              </div>
              <% } %>
              <% if (!contentProgress.isCompleted) { %>
              <div class="pdf-progress-indicator">
                <div class="progress-text">
                  <span>PDF will auto-complete after viewing</span>
                </div>
              </div>
              <% } %>
              <% } else { %>
              <div class="placeholder-content">
                <i class="fas fa-file-pdf"></i>
                <p>PDF content will be available here</p>
              </div>
              <% } %>
            </div>
          </div>
          <% } else if (contentItem.type === 'quiz') { %>
          <div class="quiz-content">
            <div class="quiz-info">
              <h3>Quiz Information</h3>
              <p style="margin-bottom: 8px; opacity: 0.9;">Answer all questions to finish. Passing score applies to unlock results.</p>

              <!-- Compact Quiz Details Row -->
              <div class="quiz-details-compact">
                <div class="quiz-detail-item">
                  <i class="fas fa-list-ol"></i>
                  <span class="detail-label">Questions</span>
                  <span class="detail-value"><%= contentItem.selectedQuestions ? contentItem.selectedQuestions.length : 0 %></span>
                </div>
                <div class="quiz-detail-item">
                  <i class="fas fa-clock"></i>
                  <span class="detail-label">Time</span>
                  <span class="detail-value">
                    <% if (contentItem.quizSettings && contentItem.quizSettings.duration) { %>
                    <%= contentItem.quizSettings.duration %>min
                    <% } else { %>
                    No limit
                    <% } %>
                  </span>
                </div>
                <div class="quiz-detail-item">
                  <i class="fas fa-target"></i>
                  <span class="detail-label">Pass</span>
                  <span class="detail-value">
                    <% if (contentItem.quizSettings && contentItem.quizSettings.passingScore) { %>
                    <%= contentItem.quizSettings.passingScore %>%
                    <% } else { %>
                    60%
                    <% } %>
                  </span>
                </div>
                <% if (contentItem.quizSettings && contentItem.quizSettings.maxAttempts) { %>
                <div class="quiz-detail-item">
                  <i class="fas fa-redo"></i>
                  <span class="detail-label">Attempts</span>
                  <span class="detail-value"><%= contentItem.quizSettings.maxAttempts %></span>
                </div>
                <% } %>
              </div>

              <!-- Progress Info -->
              <% if (contentProgress && contentProgress.attempts > 0) { %>
              <div class="quiz-progress-compact">
                <div class="progress-item">
                  <span class="progress-label">Attempts:</span>
                  <span class="progress-value"><%= contentProgress.attempts %></span>
                </div>
                <% if (contentProgress.bestScore !== undefined) { %>
                <div class="progress-item">
                  <span class="progress-label">Best Score:</span>
                  <span class="progress-value"><%= contentProgress.bestScore %>%</span>
                </div>
                <% } %>
              </div>
              <!-- Attempts Cards -->
              <div style="display:grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap:12px; margin-top:10px;">
                <% const attemptsList = (contentProgress.attemptsList || []); %>
                <% attemptsList.forEach(function(a, i){ %>
                <div style="border:1px solid var(--border-color); border-radius:10px; padding:12px; background:var(--card-bg);">
                  <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:6px;">
                    <strong style="font-size:13px;">Attempt <%= i+1 %></strong>
                    <span class="attempt-status <%= a.passed ? 'passed' : 'failed' %>"><%= a.passed ? 'Passed' : 'Failed' %></span>
                  </div>
                  <div style="display:flex; justify-content:space-between; font-size:12px; opacity:.9;">
                    <span>Score</span>
                    <span><%= a.score %>%</span>
                  </div>
                  <div style="display:flex; justify-content:space-between; font-size:12px; opacity:.9;">
                    <span>Correct</span>
                    <span><%= a.correctAnswers %>/<%= a.totalQuestions %></span>
                  </div>
                  <div style="display:flex; justify-content:space-between; font-size:12px; opacity:.9;">
                    <span>Time</span>
                    <span><%= Math.round((a.timeSpent||0)/60) %>m</span>
                  </div>
                </div>
                <% }) %>
              </div>
              <% } %>

              <% const latest = (contentProgress.attemptsList||[])[(contentProgress.attemptsList||[]).length-1]; %>
              <% if (latest && latest.passed) { %>
              <div class="quiz-completed-compact">
                <div class="completion-badge-compact">
                  <i class="fas fa-check-circle"></i>
                  <span>Quiz Completed</span>
                </div>
                <div class="completion-details-compact">
                  <div class="completion-detail-row">
                    <span class="detail-label">Best Score:</span>
                    <span class="detail-value"><%= contentProgress.bestScore %>%</span>
                  </div>
                  <div class="completion-detail-row">
                    <span class="detail-label">Attempts:</span>
                    <span class="detail-value"><%= contentProgress.attempts %></span>
                  </div>
                  <div class="completion-detail-row">
                    <span class="detail-label">Completed:</span>
                    <span class="detail-value"><%= contentProgress.completedAt ? new Date(contentProgress.completedAt).toLocaleDateString() : 'Recently' %></span>
                  </div>
                </div>
                <div class="completion-actions-compact">
                  <a href="/student/content/<%= contentItem._id %>/results" class="btn btn-primary btn-sm">
                    <i class="fas fa-chart-line"></i>
                    View Results
                  </a>
                </div>
              </div>
              <% } else { %>
              <% const outOfAttempts = attemptPolicy && attemptPolicy.outOfAttempts; %>
              <button class="btn btn-primary btn-sm" style="padding:8px 14px; border-radius:8px; font-weight:600;" onclick="startQuiz('<%= contentItem._id %>', '<%= contentItem.type %>')" <%= outOfAttempts ? 'disabled' : '' %>>
                <i class="fas <%= outOfAttempts ? 'fa-lock' : 'fa-play' %>"></i>
                <%= outOfAttempts ? 'Out of attempts' : (timing && timing.remainingSeconds > 0 ? 'Resume Quiz' : 'Start Quiz') %>
              </button>
              <% if (attemptPolicy && attemptPolicy.maxAttempts) { %>
              <div style="margin-top:6px; font-size:12px; opacity:.8;">
                Attempts: <%= attemptPolicy.maxAttempts - (attemptPolicy.remainingAttempts||0) %>/<%= attemptPolicy.maxAttempts %>
              </div>
              <% } %>
              <% } %>
            </div>
          </div>
          <% } else if (contentItem.type === 'homework') { %>
          <div class="homework-content">
            <div class="homework-info">
              <h3>Homework Assignment</h3>
              <p>This is a homework assignment. Complete the requirements and submit your work.</p>

              <!-- Compact Homework Details Row -->
              <div class="homework-details-compact">
                <div class="homework-detail-item">
                  <i class="fas fa-list-ol"></i>
                  <span class="detail-label">Questions</span>
                  <span class="detail-value"><%= contentItem.selectedQuestions ? contentItem.selectedQuestions.length : 0 %></span>
                </div>
                <div class="homework-detail-item">
                  <i class="fas fa-target"></i>
                  <span class="detail-label">Pass</span>
                  <span class="detail-value">
                    <% if (contentItem.homeworkSettings && contentItem.homeworkSettings.passingScore) { %>
                    <%= contentItem.homeworkSettings.passingScore %>%
                    <% } else { %>
                    60%
                    <% } %>
                  </span>
                </div>
                <% if (contentItem.homeworkSettings && contentItem.homeworkSettings.maxAttempts) { %>
                <div class="homework-detail-item">
                  <i class="fas fa-redo"></i>
                  <span class="detail-label">Attempts</span>
                  <span class="detail-value"><%= contentItem.homeworkSettings.maxAttempts %></span>
                </div>
                <% } %>
              </div>

              <!-- Progress Info -->
              <% if (contentProgress && contentProgress.attempts > 0) { %>
              <div class="homework-progress-compact">
                <div class="progress-item">
                  <span class="progress-label">Attempts:</span>
                  <span class="progress-value"><%= contentProgress.attempts %></span>
                </div>
                <% if (contentProgress.bestScore !== undefined) { %>
                <div class="progress-item">
                  <span class="progress-label">Best Score:</span>
                  <span class="progress-value"><%= contentProgress.bestScore %>%</span>
                </div>
                <% } %>
                <div class="progress-item">
                  <span class="progress-label">Status:</span>
                  <span class="progress-value <%= contentProgress.completionStatus === 'completed' ? 'text-success' : 'text-warning' %>">
                    <%= contentProgress.completionStatus === 'completed' ? 'Completed' : 'In Progress' %>
                  </span>
                </div>
              </div>
              <% } %>

              <% if (contentProgress && contentProgress.completionStatus === 'completed') { %>
              <div class="homework-completed-compact">
                <div class="completion-badge-compact">
                  <i class="fas fa-check-circle"></i>
                  <span>Homework Completed</span>
                </div>
                <div class="completion-details-compact">
                  <div class="completion-detail-row">
                    <span class="detail-label">Best Score:</span>
                    <span class="detail-value"><%= contentProgress.bestScore %>%</span>
                  </div>
                  <div class="completion-detail-row">
                    <span class="detail-label">Attempts:</span>
                    <span class="detail-value"><%= contentProgress.attempts %></span>
                  </div>
                  <div class="completion-detail-row">
                    <span class="detail-label">Completed:</span>
                    <span class="detail-value"><%= contentProgress.completedAt ? new Date(contentProgress.completedAt).toLocaleDateString() : 'Recently' %></span>
                  </div>
                </div>
                <div class="completion-actions-compact">
                  <a href="/student/content/<%= contentItem._id %>/results" class="btn btn-primary btn-sm">
                    <i class="fas fa-chart-line"></i>
                    View Results
                  </a>
                </div>
              </div>
              <% } else { %>
              <% const outOfAttempts = attemptPolicy && attemptPolicy.outOfAttempts; %>
              <button class="btn btn-primary btn-lg" onclick="startQuiz('<%= contentItem._id %>', '<%= contentItem.type %>')" <%= outOfAttempts ? 'disabled' : '' %>>
                <i class="fas <%= outOfAttempts ? 'fa-lock' : 'fa-tasks' %>"></i>
                <%= outOfAttempts ? 'Out of attempts' : (timing && timing.remainingSeconds > 0 ? 'Resume Homework' : 'Start Homework') %>
              </button>
              <% if (attemptPolicy && attemptPolicy.maxAttempts) { %>
              <div style="margin-top:6px; font-size:12px; opacity:.8;">
                Attempts: <%= attemptPolicy.maxAttempts - (attemptPolicy.remainingAttempts||0) %>/<%= attemptPolicy.maxAttempts %>
              </div>
              <% } %>
              <% } %>
            </div>
          </div>
          <% } else if (contentItem.type === 'reading') { %>
          <div class="reading-content">
            <div class="reading-text">
              <% if (contentItem.content) { %>
              <div class="reading-content-text" onscroll="handleReadingScroll(this)">
                <%= contentItem.content %>
              </div>
              <% if (!contentProgress.isCompleted) { %>
              <div style="display:flex; gap:10px; align-items:center; margin-top:12px;">
                <button class="btn btn-success btn-sm" onclick="acknowledgeAndComplete()">
                  <i class="fas fa-check"></i>
                  I have read this content
                </button>
              </div>
              <% } %>
              <% if (!contentProgress.isCompleted) { %>
              <div class="reading-progress-indicator">
                <div class="progress-text">
                  <span>Scroll to complete reading</span>
                </div>
              </div>
              <% } %>
              <% } else { %>
              <div class="placeholder-content">
                <i class="fas fa-book-open"></i>
                <p>Reading content will be available here</p>
              </div>
              <% } %>
            </div>
          </div>
          <% } else if (contentItem.type === 'link') { %>
          <div class="link-content">
            <div class="link-info">
              <h3>External Link</h3>
              <p>This content contains an external link to additional resources.</p>
              <% if (contentItem.content) { %>
              <a href="<%= contentItem.content %>" target="_blank" class="btn btn-primary btn-lg" onclick="handleLinkVisitAcknowledge(event)">
                <i class="fas fa-external-link-alt"></i>
                Open Link
              </a>
              <% if (!contentProgress.isCompleted) { %>
              <div style="display:flex; gap:10px; align-items:center; margin-top:12px;">
                <button class="btn btn-success btn-sm" onclick="acknowledgeAndComplete()">
                  <i class="fas fa-check"></i>
                  I have visited/read
                </button>
              </div>
              <% } %>
              <% } else { %>
              <div class="placeholder-content">
                <i class="fas fa-link"></i>
                <p>Link content will be available here</p>
              </div>
              <% } %>
            </div>
          </div>
          <% } else if (contentItem.type === 'assignment') { %>
          <div class="assignment-content">
            <div class="assignment-info">
              <h3>Assignment</h3>
              <p>Download the assignment materials. You can mark as read when done.</p>
              <% if (contentItem.content) { %>
              <div style="display:flex; gap:10px; align-items:center; margin-top:8px;">
                <a href="<%= contentItem.content %>" target="_blank" class="btn btn-outline btn-sm" onclick="handleDownloadAcknowledge(event)">
                  <i class="fas fa-download"></i>
                  Download Assignment
                </a>
                <% if (!contentProgress.isCompleted) { %>
                <button class="btn btn-success btn-sm" onclick="acknowledgeAndComplete()">
                  <i class="fas fa-check"></i>
                  I have read/completed
                </button>
                <% } %>
              </div>
              <% } else { %>
              <div class="placeholder-content">
                <i class="fas fa-file"></i>
                <p>Assignment will be available here</p>
              </div>
              <% } %>
            </div>
          </div>
          <% } %>

          <% if (contentItem.type === 'zoom') { %>
          <!-- Zoom Meeting Content -->
          <% 
                          // Populate zoomMeeting if it exists
                          const zoomMeeting = contentItem.zoomMeeting;
                        %>

          <% if (zoomMeeting) { %>
          <div class="zoom-meeting-container">
            <!-- Meeting Info Header -->
            <div class="meeting-info-card">
              <div class="meeting-status-badge status-<%= zoomMeeting.status %>">
                <i class="fas fa-<%= zoomMeeting.status === 'scheduled' ? 'clock' : zoomMeeting.status === 'active' ? 'video' : 'check-circle' %>"></i>
                <%= zoomMeeting.status.charAt(0).toUpperCase() + zoomMeeting.status.slice(1) %>
              </div>

              <h4 class="meeting-title">
                <i class="fas fa-video me-2"></i>
                <%= zoomMeeting.meetingName %>
              </h4>

              <p class="meeting-topic">
                <%= zoomMeeting.meetingTopic %>
              </p>

              <div class="meeting-meta">
                <div class="meta-item">
                  <i class="far fa-calendar"></i>
                  <span><%= new Date(zoomMeeting.scheduledStartTime).toLocaleDateString() %></span>
                </div>
                <div class="meta-item">
                  <i class="far fa-clock"></i>
                  <span><%= new Date(zoomMeeting.scheduledStartTime).toLocaleTimeString() %></span>
                </div>
                <div class="meta-item">
                  <i class="fas fa-hourglass-half"></i>
                  <span><%= zoomMeeting.duration %> minutes</span>
                </div>
              </div>
            </div>

            <!-- Meeting Status Sections -->
            <% if (zoomMeeting.status === 'scheduled') { %>
            <!-- Meeting Locked (Not Started) -->
            <div class="meeting-locked-section">
              <div class="locked-icon">
                <i class="fas fa-lock"></i>
              </div>
              <h5>Meeting Not Started Yet</h5>
              <p>This live session is scheduled for:</p>
              <div class="scheduled-time">
                <%= new Date(zoomMeeting.scheduledStartTime).toLocaleString('en-US', {
                                    weekday: 'long',
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  }) %>
              </div>
              <p class="mt-3 text-muted">
                The meeting will be unlocked when your instructor starts the session. You'll be able to join at that time.
              </p>
            </div>

            <% } else if (zoomMeeting.status === 'active') { %>
            <!-- Meeting Active (Can Join) -->
            <div class="meeting-active-section">
              <div class="active-pulse">
                <i class="fas fa-circle"></i>
              </div>
              <h5>Live Session in Progress</h5>
              <p>Join the live Zoom session now!</p>

              <div class="join-options mt-4">
                <!-- Join Meeting Button -->
                <button class="btn btn-primary btn-lg" onclick="joinZoomMeeting()">
                  <i class="fas fa-video me-2"></i>
                  Join Meeting
                </button>

                <!-- Meeting Status -->
                <div class="meeting-status mt-3">
                  <i class="fas fa-clock"></i> Ready to join
                </div>
                <i class="fas fa-external-link-alt me-2"></i>
                Open in Zoom App
                </a>
              </div>

              <!-- Meeting Details -->
              <% if (zoomMeeting.password) { %>
              <div class="meeting-password mt-4">
                <strong>Meeting Password:</strong>
                <code><%= zoomMeeting.password %></code>
              </div>
              <% } %>
            </div>

            <% } else if (zoomMeeting.status === 'ended') { %>
            <!-- Meeting Ended -->
            <div class="meeting-ended-section">
              <div class="ended-icon">
                <i class="fas fa-check-circle"></i>
              </div>
              <h5>Meeting Has Ended</h5>
              <p>This live session took place on:</p>
              <div class="ended-time">
                <%= zoomMeeting.actualStartTime ? new Date(zoomMeeting.actualStartTime).toLocaleString() : 'N/A' %>
              </div>

              <% if (zoomMeeting.recordingUrl) { %>
              <div class="recording-available mt-4">
                <h6><i class="fas fa-play-circle me-2"></i>Recording Available</h6>
                <a href="<%= zoomMeeting.recordingUrl %>" target="_blank" class="btn btn-success">
                  <i class="fas fa-download me-2"></i>
                  Watch Recording
                </a>
              </div>
              <% } %>
            </div>
            <% } %>
          </div>
          <% } else { %>
          <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Zoom meeting data is not available.
          </div>
          <% } %>
          <% } %>
        </div>

        <!-- Auto-completion status (no manual buttons) -->
        <% if (contentProgress.isCompleted) { %>
        <div class="content-auto-completion-section">
          <div class="auto-completion-status">
            <i class="fas fa-check-circle text-success"></i>
            <span>Content Completed</span>
            <% if (contentProgress.completedAt) { %>
            <small class="text-muted">on <%= new Date(contentProgress.completedAt).toLocaleDateString() %></small>
            <% } %>
          </div>
        </div>
        <% } %>

        <!-- Navigation Section -->
        <div class="content-navigation-section">
          <div class="navigation-container">
            <!-- Previous Content -->
            <% if (navigation.previousContent) { %>
            <a href="/student/content/<%= navigation.previousContent._id %>" class="nav-button nav-previous">
              <div class="nav-icon">
                <i class="fas fa-chevron-left"></i>
              </div>
              <div class="nav-content">
                <div class="nav-label">Previous</div>
                <div class="nav-title"><%= navigation.previousContent.title %></div>
              </div>
            </a>
            <% } else { %>
            <div class="nav-button nav-previous disabled">
              <div class="nav-icon">
                <i class="fas fa-chevron-left"></i>
              </div>
              <div class="nav-content">
                <div class="nav-label">Previous</div>
                <div class="nav-title">No previous content</div>
              </div>
            </div>
            <% } %>

            <!-- Progress Indicator -->
            <div class="nav-progress">
              <div class="progress-info">
                <span class="current-position"><%= navigation.currentIndex + 1 %></span>
                <span class="separator">of</span>
                <span class="total-content"><%= navigation.totalContent %></span>
              </div>
              <div class="progress-bar">
                <% const progressPercent = Math.round(((navigation.currentIndex + 1) / navigation.totalContent) * 100); %>
                <div class="progress-fill" data-width="<%= progressPercent %>"></div>
              </div>
            </div>

            <!-- Next Content -->
            <% if (navigation.nextContent) { %>
            <% if (navigation.nextContentAccessible) { %>
            <a href="/student/content/<%= navigation.nextContent._id %>" class="nav-button nav-next">
              <div class="nav-content">
                <div class="nav-label">Next</div>
                <div class="nav-title"><%= navigation.nextContent.title %></div>
              </div>
              <div class="nav-icon">
                <i class="fas fa-chevron-right"></i>
              </div>
            </a>
            <% } else { %>
            <div class="nav-button nav-next disabled">
              <div class="nav-content">
                <div class="nav-label">Next</div>
                <div class="nav-title"><%= navigation.nextContent.title %></div>
                <div class="nav-subtitle">Complete current content to unlock</div>
              </div>
              <div class="nav-icon">
                <i class="fas fa-lock"></i>
              </div>
            </div>
            <% } %>
            <% } else { %>
            <div class="nav-button nav-next disabled">
              <div class="nav-content">
                <div class="nav-label">Next</div>
                <div class="nav-title">No more content</div>
              </div>
              <div class="nav-icon">
                <i class="fas fa-flag-checkered"></i>
              </div>
            </div>
            <% } %>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- PlayerJS Library -->
  <script src="https://assets.mediadelivery.net/playerjs/playerjs-latest.min.js"></script>
  
  <!-- SweetAlert2 Library -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <!-- JavaScript -->
  <script>
    // Auto-complete content based on type and interaction
    function autoCompleteContent() {
      updateContentProgressSmooth('completed', 100);
    }

    // Update content progress - simplified function (kept for video tracking)
    function updateContentProgress(status, percentage) {
      const progressData = {
        completionStatus: status,
        progressPercentage: percentage,
        lastAccessed: new Date(),
        completedAt: status === 'completed' ? new Date() : null
      };

      fetch('/student/content/progress/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            courseId: '<%= course._id %>',
            topicId: '<%= topic._id %>',
            contentId: '<%= contentItem._id %>',
            contentType: '<%= contentItem.type %>',
            progressData: progressData
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Show success message and reload
            showMessage('Progress updated successfully!', 'success');
            setTimeout(() => location.reload(), 1000);
          } else {
            showMessage('Error updating progress: ' + data.message, 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showMessage('Error updating progress', 'error');
        });
    }

    // Smooth update content progress - no page reload
    function updateContentProgressSmooth(status, percentage) {
      const progressData = {
        completionStatus: status,
        progressPercentage: percentage,
        lastAccessed: new Date(),
        completedAt: status === 'completed' ? new Date() : null
      };

      fetch('/student/content/progress/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            courseId: '<%= course._id %>',
            topicId: '<%= topic._id %>',
            contentId: '<%= contentItem._id %>',
            contentType: '<%= contentItem.type %>',
            progressData: progressData
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update UI elements smoothly without reload
            updateUIAfterCompletion();
            showSmoothSuccessMessage('🎉 Great! You\'ve watched enough of the video. Content marked as completed!');
          } else {
            showMessage('Error updating progress: ' + data.message, 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showMessage('Error updating progress', 'error');
        });
    }

    // Show message function
    function showMessage(message, type) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
      messageDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
      document.body.insertBefore(messageDiv, document.body.firstChild);
      setTimeout(() => messageDiv.remove(), 3000);
    }

    // Show smooth success message with animation
    function showSmoothSuccessMessage(message) {
      // Create a beautiful success notification
      const notification = document.createElement('div');
      notification.className = 'smooth-success-notification';
      notification.innerHTML = `
                <div class="success-content">
                    <div class="success-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="success-text">
                        <h4>Content Completed!</h4>
                        <p>${message}</p>
                    </div>
                </div>
            `;

      // Add styles for the notification
      notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #10b981, #059669);
                color: white;
                padding: 20px;
                border-radius: 12px;
                box-shadow: 0 8px 32px rgba(16, 185, 129, 0.3);
                z-index: 10000;
                transform: translateX(400px);
                transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
                max-width: 350px;
                font-family: 'Inter', sans-serif;
            `;

      // Add styles for content
      const style = document.createElement('style');
      style.textContent = `
                .smooth-success-notification .success-content {
                    display: flex;
                    align-items: center;
                    gap: 15px;
                }
                .smooth-success-notification .success-icon {
                    font-size: 24px;
                    animation: bounce 0.6s ease-in-out;
                }
                .smooth-success-notification .success-text h4 {
                    margin: 0 0 5px 0;
                    font-size: 16px;
                    font-weight: 600;
                }
                .smooth-success-notification .success-text p {
                    margin: 0;
                    font-size: 14px;
                    opacity: 0.9;
                    line-height: 1.4;
                }
                @keyframes bounce {
                    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
                    40% { transform: translateY(-10px); }
                    60% { transform: translateY(-5px); }
                }
            `;
      document.head.appendChild(style);

      document.body.appendChild(notification);

      // Animate in
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);

      // Auto remove after 5 seconds
      setTimeout(() => {
        notification.style.transform = 'translateX(400px)';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
          if (style.parentNode) {
            style.parentNode.removeChild(style);
          }
        }, 400);
      }, 5000);
    }

    // Update UI elements after completion
    function updateUIAfterCompletion() {
      // Update progress circle
      const progressCircle = document.querySelector('.circle-large');
      const progressPercentage = document.querySelector('.progress-percentage');
      const progressLabel = document.querySelector('.progress-label');

      if (progressCircle) {
        progressCircle.style.strokeDasharray = '314, 314'; // 100% complete
        progressCircle.style.transition = 'stroke-dasharray 0.8s ease-in-out';
      }

      if (progressPercentage) {
        progressPercentage.textContent = '100%';
        progressPercentage.style.transition = 'all 0.5s ease-in-out';
      }

      if (progressLabel) {
        progressLabel.textContent = 'Complete';
      }

      // Update content actions section
      const contentActions = document.querySelector('.content-actions');
      if (contentActions) {
        contentActions.innerHTML = `
                    <div class="completion-status">
                        <i class="fas fa-check-circle text-success"></i>
                        <span>Content Completed</span>
                        <small class="text-muted">just now</small>
                    </div>
                `;
        contentActions.style.transition = 'all 0.5s ease-in-out';
      }

      // Update navigation section - enable next content button
      const nextNavButton = document.querySelector('.nav-button.nav-next');
      if (nextNavButton && nextNavButton.classList.contains('disabled')) {
        // Get the next content ID from the current page data
        const nextContentId = '<%= navigation.nextContent ? navigation.nextContent._id : "" %>';

        if (nextContentId) {
          // Create a new anchor element to replace the disabled div
          const newLink = document.createElement('a');
          newLink.href = '/student/content/' + nextContentId;
          newLink.className = 'nav-button nav-next enabled';
          newLink.style.transition = 'all 0.3s ease-in-out';

          // Copy the content from the disabled button
          newLink.innerHTML = nextNavButton.innerHTML;

          // Update the icon from lock to chevron-right
          const navIcon = newLink.querySelector('.nav-icon i');
          if (navIcon) {
            navIcon.className = 'fas fa-chevron-right';
          }

          // Remove the subtitle about completing current content
          const navSubtitle = newLink.querySelector('.nav-subtitle');
          if (navSubtitle) {
            navSubtitle.remove();
          }

          // Replace the disabled div with the new link
          nextNavButton.parentNode.replaceChild(newLink, nextNavButton);

          // Remove the enabled animation class after animation completes
          setTimeout(() => {
            newLink.classList.remove('enabled');
          }, 600);
        }
      }
    }

    // Start Quiz/Homework with SweetAlert2 confirmation
    function startQuiz(contentId, contentType) {
      const quizType = contentType === 'quiz' ? 'Quiz' : 'Homework';
      
      Swal.fire({
        title: `Start ${quizType}?`,
        html: `
          <div style="text-align: left; margin: 20px 0;">
            <p style="margin-bottom: 15px; color: #6b7280; font-size: 16px;">
              Are you sure you want to start this ${quizType.toLowerCase()}?
            </p>
            <div style="background: #fef3c7; border: 1px solid #f59e0b; border-radius: 8px; padding: 12px; margin: 15px 0;">
              <div style="display: flex; align-items: center; gap: 8px;">
                <i class="fas fa-exclamation-triangle" style="color: #f59e0b; font-size: 18px;"></i>
                <strong style="color: #92400e;">Important:</strong>
              </div>
              <p style="margin: 8px 0 0 0; color: #92400e; font-size: 14px;">
                Once you start, the timer will begin (if applicable) and you'll need to complete all questions.
              </p>
            </div>
          </div>
        `,
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#dc2626',
        cancelButtonColor: '#6b7280',
        confirmButtonText: `<i class="fas fa-play"></i> Start ${quizType}`,
        cancelButtonText: '<i class="fas fa-times"></i> Cancel',
        reverseButtons: true,
        focusCancel: false,
        allowOutsideClick: true,
        allowEscapeKey: true,
        showCloseButton: true,
        customClass: {
          popup: 'swal2-popup-custom',
          title: 'swal2-title-custom',
          content: 'swal2-content-custom',
          confirmButton: 'swal2-confirm-custom',
          cancelButton: 'swal2-cancel-custom'
        }
      }).then((result) => {
        if (result.isConfirmed) {
          confirmStartQuiz(contentId, quizType);
        } else {
          // User cancelled - no action needed
          console.log(`${quizType} start cancelled by user`);
        }
      });
    }

    function confirmStartQuiz(contentId, quizType) {
      showToast(`Starting ${quizType.toLowerCase()}...`, 'success');
      setTimeout(() => {
        window.location.href = '/student/content/' + contentId + '/take';
      }, 1000);
    }

    // Toast notification function
    function showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = `toast ${type}`;
      toast.innerHTML = `
                <div class="toast-header">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} toast-icon"></i>
                    <span class="toast-title">${type === 'success' ? 'Success' : 'Error'}</span>
                </div>
                <div class="toast-message">${message}</div>
            `;

      // Add toast styles if not already added
      if (!document.querySelector('#toast-styles')) {
        const style = document.createElement('style');
        style.id = 'toast-styles';
        style.textContent = `
                    .toast {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        background: white;
                        border: 1px solid #e5e7eb;
                        border-radius: 12px;
                        padding: 1rem 1.5rem;
                        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
                        z-index: 1000;
                        transform: translateX(400px);
                        transition: transform 0.3s ease;
                        max-width: 350px;
                    }
                    .toast.show {
                        transform: translateX(0);
                    }
                    .toast.success {
                        border-left: 4px solid #10b981;
                    }
                    .toast.error {
                        border-left: 4px solid #ef4444;
                    }
                    .toast-header {
                        display: flex;
                        align-items: center;
                        gap: 0.5rem;
                        margin-bottom: 0.5rem;
                    }
                    .toast-icon {
                        font-size: 1.2rem;
                    }
                    .toast.success .toast-icon {
                        color: #10b981;
                    }
                    .toast.error .toast-icon {
                        color: #ef4444;
                    }
                    .toast-title {
                        font-weight: 600;
                        color: #1f2937;
                    }
                    .toast-message {
                        color: #6b7280;
                        font-size: 0.9rem;
                    }
                `;
        document.head.appendChild(style);
      }

      document.body.appendChild(toast);

      // Show toast
      setTimeout(() => toast.classList.add('show'), 100);

      // Hide toast
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }


    // Auto-completion handlers
    let readingCompleted = false;
    let pdfCompleted = false;

    function handleReadingScroll(element) {
      if (readingCompleted) return;

      const scrollTop = element.scrollTop;
      const scrollHeight = element.scrollHeight;
      const clientHeight = element.clientHeight;
      const scrollPercentage = (scrollTop + clientHeight) / scrollHeight * 100;

      // Auto-complete when user scrolls 80% of the content
      if (scrollPercentage >= 80) {
        readingCompleted = true;
        console.log("Reading content auto-completed at", scrollPercentage.toFixed(1) + "%");
        updateContentProgressSmooth('completed', 100);
      }
    }

    function handlePDFLoad(iframe) {
      if (pdfCompleted) return;

      // Auto-complete PDF after 30 seconds of viewing
      setTimeout(() => {
        if (!pdfCompleted) {
          pdfCompleted = true;
          console.log("PDF content auto-completed after 30 seconds");
          updateContentProgressSmooth('completed', 100);
        }
      }, 30000);
    }

    // Initialize progress bar width
    document.addEventListener('DOMContentLoaded', function() {
      const progressFill = document.querySelector('.progress-fill[data-width]');
      if (progressFill) {
        const width = progressFill.getAttribute('data-width');
        progressFill.style.width = width + '%';
      }
    });

    // PlayerJS Video Tracking
    document.addEventListener('DOMContentLoaded', function() {
      // Check if this is a video content that needs tracking
      const isVideoContent = '<%= contentItem.type %>' === 'video';
      const hasVideoContent = '<%= contentItem.content ? "true" : "false" %>' === 'true';
      const isNotCompleted = '<%= !contentProgress.isCompleted ? "true" : "false" %>' === 'true';

      if (isVideoContent && hasVideoContent && isNotCompleted) {
        let player = null;
        let videoDuration = 0;
        let playerReady = false;
        let autoCompleted = false;

        // Check if playerjs is loaded
        function checkPlayerJS() {
          if (typeof playerjs === 'undefined') {
            setTimeout(checkPlayerJS, 100);
            return;
          }
          initPlayer();
        }

        // Initialize player
        function initPlayer() {
          try {
            // Look for any iframe in the video container
            const videoContainer = document.querySelector('.video-container');
            const iframe = videoContainer ? videoContainer.querySelector('iframe') : null;

            if (!iframe) {
              console.log("No iframe found in video container");
              return;
            }

            // Add an ID to the iframe if it doesn't have one
            if (!iframe.id) {
              iframe.id = 'bunny-video-' + Date.now();
            }

            player = new playerjs.Player(iframe.id);

            player.on("ready", () => {
              playerReady = true;
              console.log("Bunny Stream player ready");

              // Get duration once
              player.getDuration((dur) => {
                videoDuration = dur;
                console.log("Video duration: " + dur + "s");
              });
            });

            // Event listeners
            player.on("timeupdate", (data) => {
              console.log(`Video progress: ${data.seconds.toFixed(1)}s / ${data.duration}s`);

              // Auto-complete when reaching last 10 seconds
              if (videoDuration > 0 && data.seconds >= videoDuration - 10 && !autoCompleted) {
                autoCompleted = true;
                console.log("Reached last 10 seconds - auto-completing content");
                updateContentProgressSmooth('completed', 100);
              }
            });

            player.on("ended", () => {
              console.log("Video ended");
              if (!autoCompleted) {
                updateContentProgressSmooth('completed', 100);
              }
            });

            player.on("error", (e) => {
              console.error("Player error:", e);
            });

          } catch (error) {
            console.error("Error initializing player:", error);
          }
        }

        // Wait a bit for the content to be rendered, then start checking for PlayerJS
        setTimeout(() => {
          checkPlayerJS();
        }, 500);
      }
    });

    // Acknowledgment helpers (download/link/read)
    function acknowledgeAndComplete() {
      updateContentProgressSmooth('completed', 100);
    }

    function handleDownloadAcknowledge(event) {
      try {
        // allow the download to start, and mark as completed shortly after
        setTimeout(() => acknowledgeAndComplete(), 800);
      } catch (e) {
        // fallback
        acknowledgeAndComplete();
      }
    }

    function handleLinkVisitAcknowledge(event) {
      // Open link in new tab, then mark as completed
      setTimeout(() => acknowledgeAndComplete(), 1000);
    }

    // ==================== ZOOM MEETING FUNCTIONS ====================

    async function joinZoomMeeting() {
      try {
        const meetingId = '<%= contentItem.zoomMeeting ? contentItem.zoomMeeting._id : "" %>';

        if (!meetingId) {
          alert('Meeting ID not found');
          return;
        }

        // Show loading state
        const joinButton = document.querySelector('.btn-primary');
        const originalText = joinButton.textContent;
        joinButton.textContent = 'Joining...';
        joinButton.disabled = true;

        // Get join URL from server
        const response = await fetch(`/zoom/student/zoom/${meetingId}/join`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        const data = await response.json();

        // Reset button state
        joinButton.textContent = originalText;
        joinButton.disabled = false;

        if (!data.success) {
          alert(data.message || 'Failed to join meeting');
          return;
        }

        console.log('📋 Meeting join response:', data);

        // Show success message
        showToast('Redirecting to Zoom meeting...', 'success');

        // Record that the student attempted to join
        recordMeetingJoinAttempt(meetingId);

        // Small delay to show the message, then redirect
        setTimeout(() => {
          // Open Zoom meeting in new tab/window
          window.open(data.meeting.joinUrl, '_blank');

          // Update UI to show that student is joining
          updateMeetingStatus('joining');

          // Optional: Show meeting info modal
          showMeetingInfoModal(data.meeting, data.student);
        }, 1000);

      } catch (error) {
        console.error('❌ Error joining meeting:', error);
        alert('Failed to join meeting. Please try again.');

        // Reset button state
        const joinButton = document.querySelector('.btn-primary');
        joinButton.textContent = 'Join Meeting';
        joinButton.disabled = false;
      }
    }

    // Record meeting join attempt for analytics
    async function recordMeetingJoinAttempt(meetingId) {
      try {
        await fetch(`/zoom/student/zoom/${meetingId}/join-attempt`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        });
      } catch (error) {
        console.log('Could not record join attempt:', error);
      }
    }

    // Update meeting status in UI
    function updateMeetingStatus(status) {
      const statusElement = document.querySelector('.meeting-status');
      if (statusElement) {
        switch (status) {
          case 'joining':
            statusElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Joining meeting...';
            statusElement.className = 'meeting-status text-info';
            break;
          case 'joined':
            statusElement.innerHTML = '<i class="fas fa-video"></i> In meeting';
            statusElement.className = 'meeting-status text-success';
            break;
          default:
            statusElement.innerHTML = '<i class="fas fa-clock"></i> Ready to join';
            statusElement.className = 'meeting-status text-muted';
        }
      }
    }

    // Show meeting info modal (without Bootstrap dependency)
    function showMeetingInfoModal(meeting, student) {
      const modalHtml = `
        <div class="modal-overlay" id="meetingInfoModal" onclick="closeMeetingModal()">
          <div class="modal-content" onclick="event.stopPropagation()">
            <div class="modal-header">
              <h5 class="modal-title">
                <i class="fas fa-video text-primary"></i>
                Meeting Information
              </h5>
              <button type="button" class="btn-close" onclick="closeMeetingModal()">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <strong>Meeting:</strong> ${meeting.meetingName}
              </div>
              <div class="mb-3">
                <strong>Topic:</strong> ${meeting.meetingTopic}
              </div>
              <div class="mb-3">
                <strong>Meeting ID:</strong> 
                <code>${meeting.meetingId}</code>
                <button class="btn btn-sm btn-outline-secondary ms-2" onclick="copyToClipboard('${meeting.meetingId}')">
                  <i class="fas fa-copy"></i>
                </button>
              </div>
              ${meeting.password ? `
              <div class="mb-3">
                <strong>Password:</strong> 
                <code>${meeting.password}</code>
                <button class="btn btn-sm btn-outline-secondary ms-2" onclick="copyToClipboard('${meeting.password}')">
                  <i class="fas fa-copy"></i>
                </button>
              </div>
              ` : ''}
              <div class="mb-3">
                <strong>Joining as:</strong> ${student.name} (${student.email})
              </div>
              <div class="alert alert-info">
                <i class="fas fa-info-circle"></i>
                The meeting will open in a new tab. If it doesn't open automatically, 
                <a href="${meeting.joinUrl}" target="_blank">click here</a>.
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" onclick="closeMeetingModal()">Close</button>
              <a href="${meeting.joinUrl}" target="_blank" class="btn btn-primary">
                <i class="fas fa-external-link-alt"></i>
                Open Meeting
              </a>
            </div>
          </div>
        </div>
      `;

      // Remove existing modal if any
      const existingModal = document.getElementById('meetingInfoModal');
      if (existingModal) {
        existingModal.remove();
      }

      // Add new modal
      document.body.insertAdjacentHTML('beforeend', modalHtml);

      // Show modal with animation
      const modal = document.getElementById('meetingInfoModal');
      modal.style.display = 'flex';
      setTimeout(() => {
        modal.classList.add('show');
      }, 10);
    }

    // Close meeting modal
    function closeMeetingModal() {
      const modal = document.getElementById('meetingInfoModal');
      if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
          modal.remove();
        }, 300);
      }
    }

    // Copy to clipboard helper
    function copyToClipboard(text) {
      navigator.clipboard.writeText(text).then(() => {
        showToast('Copied to clipboard!', 'success');
      }).catch(() => {
        showToast('Could not copy to clipboard', 'error');
      });
    }
  </script>

  <!-- Zoom Meeting Styles -->
  <style>
    /* Enhanced Zoom Meeting Container */
    .zoom-meeting-container {
      background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
      border: 2px solid #dc2626;
      border-radius: 20px;
      box-shadow: 0 10px 30px rgba(220, 38, 38, 0.1);
      overflow: hidden;
      margin-bottom: 30px;
    }

    .meeting-info-card {
      background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
      color: white;
      padding: 30px;
      border-radius: 0;
      margin-bottom: 0;
      position: relative;
    }

    .meeting-info-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #ffffff, #dc2626, #ffffff);
      opacity: 0.8;
    }

    .meeting-status-badge {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 10px 20px;
      border-radius: 25px;
      font-weight: 600;
      margin-bottom: 15px;
      background: rgba(255, 255, 255, 0.95);
      color: #dc2626;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    .status-scheduled {
      background: rgba(255, 255, 255, 0.95);
      color: #dc2626;
    }

    .status-active {
      background: rgba(255, 255, 255, 0.95);
      color: #dc2626;
      animation: statusPulse 2s infinite;
    }

    .status-ended {
      background: rgba(255, 255, 255, 0.95);
      color: #6b7280;
    }

    @keyframes statusPulse {

      0%,
      100% {
        box-shadow: 0 2px 8px rgba(220, 38, 38, 0.3);
      }

      50% {
        box-shadow: 0 4px 15px rgba(220, 38, 38, 0.6);
      }
    }

    .meeting-title {
      font-size: 28px;
      font-weight: 700;
      margin: 15px 0;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .meeting-topic {
      font-size: 16px;
      opacity: 0.95;
      margin: 10px 0;
      font-weight: 500;
    }

    .meeting-meta {
      display: flex;
      gap: 15px;
      margin-top: 25px;
      flex-wrap: wrap;
    }

    .meta-item {
      display: flex;
      align-items: center;
      gap: 8px;
      background: rgba(255, 255, 255, 0.15);
      padding: 10px 16px;
      border-radius: 12px;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      font-weight: 500;
    }

    .meta-item i {
      color: rgba(255, 255, 255, 0.9);
    }

    /* Meeting Status Sections */
    .meeting-locked-section,
    .meeting-active-section,
    .meeting-ended-section {
      text-align: center;
      padding: 40px 30px;
      background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
      border-radius: 0;
      position: relative;
    }

    .meeting-locked-section::before,
    .meeting-active-section::before,
    .meeting-ended-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 20px;
      right: 20px;
      height: 1px;
      background: linear-gradient(90deg, transparent, #dc2626, transparent);
    }

    .locked-icon,
    .active-pulse,
    .ended-icon {
      font-size: 64px;
      margin-bottom: 20px;
    }

    .locked-icon {
      color: #dc2626;
    }

    .active-pulse {
      color: #dc2626;
      animation: pulse 2s infinite;
    }

    .ended-icon {
      color: #6b7280;
    }

    @keyframes pulse {

      0%,
      100% {
        opacity: 1;
        transform: scale(1);
      }

      50% {
        opacity: 0.8;
        transform: scale(1.05);
      }
    }

    .scheduled-time,
    .ended-time {
      font-size: 20px;
      font-weight: 600;
      color: #dc2626;
      margin: 20px 0;
      padding: 20px;
      background: #ffffff;
      border: 2px solid #dc2626;
      border-radius: 15px;
      box-shadow: 0 4px 15px rgba(220, 38, 38, 0.1);
      position: relative;
    }

    .scheduled-time::before,
    .ended-time::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, #dc2626, #b91c1c, #dc2626);
      border-radius: 15px;
      z-index: -1;
    }

    /* Enhanced Join Button */
    .join-options {
      display: flex;
      justify-content: center;
      gap: 15px;
      flex-wrap: wrap;
      margin-top: 30px;
    }

    .join-options .btn {
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      border-radius: 25px;
      padding: 15px 30px;
      font-size: 16px;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .join-options .btn-primary {
      background: linear-gradient(135deg, #dc2626, #b91c1c);
      border: none;
      color: white;
      box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);
    }

    .join-options .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(220, 38, 38, 0.4);
      background: linear-gradient(135deg, #b91c1c, #991b1b);
    }

    .join-options .btn-primary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s ease;
    }

    .join-options .btn-primary:hover::before {
      left: 100%;
    }

    .meeting-status {
      margin-top: 20px;
      padding: 15px;
      border-radius: 12px;
      background: #ffffff;
      border: 2px solid #dc2626;
      text-align: center;
      font-weight: 600;
      color: #dc2626;
    }

    .meeting-password {
      padding: 20px;
      background: #ffffff;
      border: 2px solid #dc2626;
      border-radius: 15px;
      text-align: center;
      margin-top: 20px;
      box-shadow: 0 4px 15px rgba(220, 38, 38, 0.1);
    }

    .meeting-password strong {
      color: #dc2626;
      font-weight: 700;
    }

    .meeting-password code {
      font-size: 18px;
      font-weight: 600;
      color: #dc2626;
      background: #f8f9fa;
      padding: 8px 20px;
      border-radius: 8px;
      margin-left: 10px;
      border: 1px solid #dc2626;
    }

    #meetingSDKElement {
      width: 100%;
      min-height: 600px;
      border-radius: 0;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .recording-available {
      padding: 25px;
      background: #ffffff;
      border: 2px solid #dc2626;
      border-radius: 15px;
      margin-top: 20px;
      text-align: center;
    }

    .recording-available h6 {
      color: #dc2626;
      font-weight: 700;
      margin-bottom: 15px;
    }

    .recording-available .btn-success {
      background: linear-gradient(135deg, #dc2626, #b91c1c);
      border: none;
      color: white;
      padding: 12px 25px;
      border-radius: 20px;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .recording-available .btn-success:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(220, 38, 38, 0.3);
    }

    /* Alert Styling */
    .alert-warning {
      background: #ffffff;
      border: 2px solid #dc2626;
      color: #dc2626;
      border-radius: 15px;
      padding: 20px;
      font-weight: 500;
    }

    .alert-warning i {
      color: #dc2626;
    }

    /* Dark theme adjustments */
    .dark-theme .zoom-meeting-container {
      background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
      border-color: #dc2626;
    }

    .dark-theme .meeting-locked-section,
    .dark-theme .meeting-active-section,
    .dark-theme .meeting-ended-section {
      background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
      color: #e5e7eb;
    }

    .dark-theme .scheduled-time,
    .dark-theme .ended-time {
      background: #1f2937;
      color: #dc2626;
      border-color: #dc2626;
    }

    .dark-theme .meeting-status {
      background: #1f2937;
      border-color: #dc2626;
      color: #dc2626;
    }

    .dark-theme .meeting-password {
      background: #1f2937;
      border-color: #dc2626;
    }

    .dark-theme .meeting-password strong {
      color: #dc2626;
    }

    .dark-theme .meeting-password code {
      background: #111827;
      color: #dc2626;
      border-color: #dc2626;
    }

    .dark-theme .recording-available {
      background: #1f2937;
      border-color: #dc2626;
    }

    .dark-theme .alert-warning {
      background: #1f2937;
      border-color: #dc2626;
      color: #dc2626;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .meeting-meta {
        flex-direction: column;
        gap: 10px;
      }

      .meta-item {
        justify-content: center;
      }

      .join-options {
        flex-direction: column;
      }

      .join-options .btn {
        width: 100%;
        margin-bottom: 10px;
      }

      .meeting-title {
        font-size: 24px;
      }

      .locked-icon,
      .active-pulse,
      .ended-icon {
        font-size: 48px;
      }
    }

    /* Custom Modal Styles - Updated with Red Theme */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .modal-overlay.show {
      opacity: 1;
    }

    .modal-content {
      background: white;
      border: 2px solid #dc2626;
      border-radius: 15px;
      max-width: 500px;
      width: 90%;
      max-height: 90vh;
      overflow-y: auto;
      box-shadow: 0 10px 30px rgba(220, 38, 38, 0.2);
      transform: scale(0.9);
      transition: transform 0.3s ease;
    }

    .modal-overlay.show .modal-content {
      transform: scale(1);
    }

    .modal-header {
      padding: 20px 20px 10px;
      border-bottom: 2px solid #dc2626;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: linear-gradient(135deg, #dc2626, #b91c1c);
      color: white;
      border-radius: 13px 13px 0 0;
    }

    .modal-title {
      margin: 0;
      font-size: 1.25rem;
      font-weight: 700;
      color: white;
    }

    .btn-close {
      background: rgba(255, 255, 255, 0.2);
      border: none;
      font-size: 1.2rem;
      color: white;
      cursor: pointer;
      padding: 8px;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .btn-close:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    .modal-body {
      padding: 20px;
      background: white;
    }

    .modal-footer {
      padding: 10px 20px 20px;
      display: flex;
      gap: 10px;
      justify-content: flex-end;
      background: white;
      border-radius: 0 0 13px 13px;
    }

    .alert {
      padding: 15px;
      border-radius: 10px;
      background-color: #ffffff;
      border: 2px solid #dc2626;
      color: #dc2626;
      font-weight: 500;
    }

    .alert i {
      margin-right: 8px;
      color: #dc2626;
    }

    .alert a {
      color: #dc2626;
      text-decoration: underline;
      font-weight: 600;
    }

    /* Dark theme modal */
    .dark-theme .modal-content {
      background: #1f2937;
      border-color: #dc2626;
    }

    .dark-theme .modal-body,
    .dark-theme .modal-footer {
      background: #1f2937;
      color: #e2e8f0;
    }

    .dark-theme .alert {
      background-color: #1f2937;
      border-color: #dc2626;
      color: #dc2626;
    }

    .dark-theme .alert a {
      color: #dc2626;
    }
  </style>
</body>

</html>