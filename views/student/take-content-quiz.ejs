<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= contentItem.title %> - Taking <%= contentItem.type === 'quiz' ? 'Quiz' : 'Homework' %> | ELKABLY</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/images/KImage.png">
    <link rel="shortcut icon" type="image/png" href="/images/KImage.png">
    <link rel="apple-touch-icon" href="/images/KImage.png">
    
    <!-- CSS -->
    <link rel="stylesheet" href="/css/studentCSS/student-main.css">
    <link rel="stylesheet" href="/css/studentCSS/quizzes.css">
    <link rel="stylesheet" href="/css/theme-toggle.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <!-- MathLive for professional math input -->
    <script src="https://unpkg.com/mathlive"></script>
    
    <!-- Enhanced Professional Styles -->
    <style>
        /* Full Page Layout */
        .quiz-full-page-layout {
            min-height: 100vh;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            display: flex;
            flex-direction: column;
        }

        /* Quiz Page Header */
        .quiz-page-header {
            background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
            color: white;
            padding: 1rem 2rem;
            box-shadow: 0 4px 20px rgba(220, 38, 38, 0.3);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .quiz-header-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            align-items: center;
            gap: 2rem;
        }

        .back-button {
            background: rgba(255, 255, 255, 0.15);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            backdrop-filter: blur(10px);
        }

        .back-button:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .quiz-header-info {
            flex: 1;
        }

        .quiz-page-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin: 0 0 0.5rem 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .quiz-meta {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .quiz-type, .quiz-difficulty {
            background: rgba(255, 255, 255, 0.2);
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            backdrop-filter: blur(10px);
        }

        /* Main Content */
        .quiz-main-content {
            flex: 1;
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
            width: 100%;
        }

        /* Quiz Taking Container */
        .quiz-taking-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            min-height: calc(100vh - 200px);
        }

        /* Compact Professional Quiz Header */
        .quiz-header {
            background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
            color: white;
            padding: 1.5rem 2rem;
            position: relative;
            overflow: hidden;
        }

        .quiz-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.3;
        }

        .quiz-header-compact {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 2rem;
            position: relative;
            z-index: 1;
            width: 100%;
        }

        .quiz-timer-section {
            flex-shrink: 0;
        }

        .quiz-progress-section {
            flex-shrink: 0;
        }

        .quiz-timer {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            background: rgba(255,255,255,0.15);
            padding: 0.75rem 1.25rem;
            border-radius: 12px;
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            min-width: 160px;
        }

        .timer-icon-wrapper {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .timer-icon {
            font-size: 1.1rem;
        }

        .timer-content {
            display: flex;
            flex-direction: column;
            gap: 0.15rem;
        }

        .timer-label {
            font-size: 0.75rem;
            opacity: 0.8;
            font-weight: 500;
        }

        .timer-text {
            font-size: 1.1rem;
            font-weight: 700;
            line-height: 1;
        }

        .timer-warning {
            color: #fbbf24;
        }

        .timer-danger {
            color: #ef4444;
            animation: pulse 1s infinite;
        }
        
        .quiz-timer.no-time-limit {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Compact Progress Section */
        .quiz-progress-section {
            position: relative;
            z-index: 1;
            flex-shrink: 0;
            margin-left: auto;
        }

        .progress-info {
            display: flex;
            align-items: center;
            font-size: 0.9rem;
            font-weight: 600;
            gap: 1rem;
            margin-bottom: 0.75rem;
        }

        .question-counter {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .current-question {
            font-size: 1.1rem;
            font-weight: 800;
            color: #fbbf24;
            background: rgba(251, 191, 36, 0.15);
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            border: 1px solid rgba(251, 191, 36, 0.3);
        }

        .separator {
            opacity: 0.7;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .total-questions {
            opacity: 0.8;
            font-size: 1rem;
            font-weight: 600;
        }

        .progress-percentage {
            font-size: 1.1rem;
            font-weight: 700;
            color: #fbbf24;
            background: rgba(251, 191, 36, 0.15);
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            border: 1px solid rgba(251, 191, 36, 0.3);
        }

        .progress-bar-container {
            position: relative;
            display: flex;
            justify-content: flex-end;
        }

        .progress-bar {
            width: 200px;
            height: 6px;
            background: rgba(255,255,255,0.2);
            border-radius: 3px;
            overflow: hidden;
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.2);
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #fbbf24, #f59e0b);
            border-radius: 3px;
            transition: width 0.4s ease;
            box-shadow: 0 1px 4px rgba(251, 191, 36, 0.4);
        }

        /* Main Quiz Content */
        .quiz-content-full {
            padding: 0;
        }

        /* Enhanced Question Section */
        .question-section-enhanced {
            padding: 3rem;
            background: white;
        }

        .question-header-enhanced {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 2px solid #f1f5f9;
        }

        .question-info {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .question-number {
            background: linear-gradient(135deg, #dc2626, #b91c1c);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-weight: 700;
            font-size: 1rem;
            box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
        }

        .question-points {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-weight: 700;
            font-size: 1rem;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .question-progress-info {
            background: #f8fafc;
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-weight: 600;
            color: #64748b;
            border: 1px solid #e2e8f0;
        }

        .question-content {
            margin-bottom: 2rem;
        }

        .question-text {
            font-size: 1.3rem;
            font-weight: 500;
            line-height: 1.7;
            margin-bottom: 2rem;
            color: #1e293b;
            background: #f8fafc;
            padding: 1.5rem;
            border-radius: 12px;
            border-left: 4px solid #dc2626;
        }

        /* Enhanced Image Container */
        .question-image-container {
            position: relative;
            margin: 2rem 0;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .question-image-container:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.15);
        }

        .question-image {
            width: 100%;
            height: auto;
            max-height: 400px;
            object-fit: contain;
            display: block;
        }

        .image-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
            color: white;
            font-weight: 600;
        }

        .question-image-container:hover .image-overlay {
            opacity: 1;
        }

        .image-overlay i {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .image-overlay span {
            font-size: 1rem;
        }

        /* Math Field Styles */
        .question-math-field {
            width: 100%;
            min-height: 40px;
            font-size: 16px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            background: var(--bg-color);
            padding: 12px;
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
        }

        .question-math-field:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb), 0.1);
        }

        .question-math-field.ML__focused {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb), 0.1);
        }

        /* Written Question Styles */
        .written-question-container {
            margin-top: 1rem;
        }

        /* Written Question Note */
        .written-question-note {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            border-left: 4px solid var(--primary-color);
        }

        .note-icon {
            color: var(--primary-color);
            font-size: 1.1rem;
            margin-top: 0.1rem;
            flex-shrink: 0;
        }

        .note-content {
            flex: 1;
            font-size: 0.95rem;
            line-height: 1.5;
            color: var(--text-color);
        }

        .note-content code {
            background: rgba(var(--primary-color-rgb), 0.1);
            color: var(--primary-color);
            padding: 0.2rem 0.4rem;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            font-weight: 600;
        }

        .written-answer-input {
            width: 100%;
            min-height: 120px;
            padding: 1rem;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            background: var(--bg-color);
            color: var(--text-color);
            font-size: 1rem;
            line-height: 1.6;
            resize: vertical;
            transition: all 0.3s ease;
            font-family: inherit;
        }

        .written-answer-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb), 0.1);
        }

        .written-answer-input::placeholder {
            color: var(--muted-text);
        }

        /* Math input mode toggle */
        .math-mode-toggle {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
            align-items: center;
        }

        .mode-toggle-btn {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 6px;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            color: var(--text-color);
        }

        .mode-toggle-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .mode-toggle-btn:hover:not(.active) {
            background: var(--border-color);
        }

        /* Math keyboard button */
        .math-keyboard-btn {
            background: var(--accent-color);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .math-keyboard-btn:hover {
            background: var(--primary-color);
            transform: translateY(-1px);
        }

        .question-image {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        /* Enhanced Options */
        .options-container {
            margin-bottom: 2rem;
        }

        .option-item {
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 16px;
            padding: 1.5rem 2rem;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 1.5rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .option-item:hover {
            border-color: #dc2626;
            background: rgba(220, 38, 38, 0.02);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(220, 38, 38, 0.1);
        }

        .option-item.selected {
            border-color: #dc2626;
            background: rgba(220, 38, 38, 0.05);
            box-shadow: 0 8px 25px rgba(220, 38, 38, 0.2);
        }

        .option-item.correct {
            border-color: #10b981;
            background: rgba(16, 185, 129, 0.05);
        }

        .option-item.incorrect {
            border-color: #ef4444;
            background: rgba(239, 68, 68, 0.05);
        }

        .option-radio {
            width: 24px;
            height: 24px;
            border: 3px solid #e2e8f0;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            flex-shrink: 0;
        }

        .option-item.selected .option-radio {
            border-color: #dc2626;
            background: #dc2626;
        }

        .option-item.selected .option-radio::after {
            content: '';
            width: 10px;
            height: 10px;
            background: white;
            border-radius: 50%;
        }

        .option-text {
            flex: 1;
            font-size: 1.1rem;
            line-height: 1.6;
            color: #1e293b;
            font-weight: 500;
        }

        /* Enhanced Navigation */
        .quiz-navigation-enhanced {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 3rem;
            padding-top: 2rem;
            border-top: 2px solid #f1f5f9;
        }

        .navigation-center {
            flex: 1;
            display: flex;
            justify-content: center;
        }

        .questions-mini-nav {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            justify-content: center;
        }

        .mini-nav-item {
            width: 45px;
            height: 45px;
            border: 3px solid #e2e8f0;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 700;
            font-size: 1rem;
            background: white;
            position: relative;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .mini-nav-item:hover {
            border-color: #dc2626;
            background: rgba(220, 38, 38, 0.05);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(220, 38, 38, 0.2);
        }

        .mini-nav-item.current {
            border-color: #dc2626;
            background: #dc2626;
            color: white;
            transform: scale(1.1);
            box-shadow: 0 4px 15px rgba(220, 38, 38, 0.4);
        }

        .mini-nav-item.answered {
            border-color: #10b981;
            background: #10b981;
            color: white;
            box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
        }

        .mini-nav-item.answered::after {
            content: '✓';
            position: absolute;
            top: -5px;
            right: -5px;
            background: #059669;
            color: white;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 700;
            border: 2px solid white;
        }

        .mini-nav-item.answered.current {
            border-color: #10b981;
            background: #10b981;
            color: white;
            transform: scale(1.1);
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);
        }

        .mini-nav-item.not-answered {
            border-color: #fbbf24;
            background: rgba(251, 191, 36, 0.1);
            color: #d97706;
        }

        .mini-nav-item.not-answered:hover {
            border-color: #f59e0b;
            background: rgba(245, 158, 11, 0.15);
        }

        /* Enhanced Bottom Bar */
        .quiz-bottom-bar {
            background: #f8fafc;
            border-top: 1px solid #e2e8f0;
            padding: 1.5rem 3rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .quiz-summary-enhanced {
            display: flex;
            gap: 2rem;
            align-items: center;
        }

        .summary-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.25rem;
        }

        .summary-label {
            font-size: 0.85rem;
            color: #64748b;
            font-weight: 500;
        }

        .summary-value {
            font-size: 1.1rem;
            font-weight: 700;
            color: #1e293b;
        }

        .btn-submit-enhanced {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .btn-submit-enhanced:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
        }

        .btn-submit-enhanced:disabled {
            background: #94a3b8;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* Option Math Field Styles */
        .option-math-field {
            width: 100%;
            min-height: 30px;
            font-size: 14px;
            border: none;
            background: transparent;
            padding: 4px;
            color: var(--text-color);
        }

        .option-math-field.ML__focused {
            border: none;
            box-shadow: none;
        }

        .option-image {
            max-width: 100px;
            height: auto;
            border-radius: 6px;
            margin-left: auto;
        }

        /* Enhanced Navigation Buttons */
        .nav-button {
            background: linear-gradient(135deg, #dc2626, #b91c1c);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 1rem;
            box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
        }

        .nav-button:hover {
            transform: translateY(-2px);
            color: black;
            box-shadow: 0 8px 25px rgba(220, 38, 38, 0.4);
        }

        .nav-button:disabled {
            background: #94a3b8;
            color: white;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .nav-button.secondary {
            background: white;
            color: #64748b;
            border: 2px solid #e2e8f0;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .nav-button.secondary:hover {
            background: #f8fafc;
            border-color: #cbd5e1;
            transform: translateY(-1px);
        }

        /* Image Preview Modal */
        .image-preview-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            padding: 2rem;
        }

        .image-preview-modal.show {
            display: flex;
        }

        .image-preview-content {
            position: relative;
            max-width: 90%;
            max-height: 90%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .image-preview-content img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
        }

        .image-preview-close {
            position: absolute;
            top: -50px;
            right: 0;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .image-preview-close:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        /* Dark Theme Support */
        .dark-theme .quiz-full-page-layout {
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        }

        .dark-theme .quiz-taking-container {
            background: #1e293b;
            border: 1px solid #334155;
        }

        .dark-theme .question-section-enhanced {
            background: #1e293b;
        }

        .dark-theme .question-header-enhanced {
            border-bottom-color: #334155;
        }

        .dark-theme .question-progress-info {
            background: #334155;
            border-color: #475569;
            color: #cbd5e1;
        }

        .dark-theme .question-text {
            background: #334155;
            color: #f1f5f9;
            border-left-color: #dc2626;
        }

        .dark-theme .option-item {
            background: #334155;
            border-color: #475569;
        }

        .dark-theme .option-item:hover {
            background: rgba(220, 38, 38, 0.1);
        }

        .dark-theme .option-item.selected {
            background: rgba(220, 38, 38, 0.15);
        }

        .dark-theme .option-text {
            color: #f1f5f9;
        }

        .dark-theme .nav-button.secondary {
            background: #334155;
            color: #cbd5e1;
            border-color: #475569;
        }

        .dark-theme .nav-button.secondary:hover {
            background: #475569;
        }

        .dark-theme .mini-nav-item {
            background: #334155;
            border-color: #475569;
            color: #cbd5e1;
        }

        .dark-theme .mini-nav-item:hover {
            background: rgba(220, 38, 38, 0.1);
        }

        .dark-theme .quiz-bottom-bar {
            background: #334155;
            border-top-color: #475569;
        }

        .dark-theme .summary-label {
            color: #94a3b8;
        }

        .dark-theme .summary-value {
            color: #f1f5f9;
        }

        .dark-theme .quiz-navigation-enhanced {
            border-top-color: #334155;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .quiz-header-container {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .quiz-page-title {
                font-size: 1.5rem;
            }

            .quiz-main-content {
                padding: 1rem;
            }

            .question-section-enhanced {
                padding: 2rem;
            }

            .questions-mini-nav {
                gap: 0.25rem;
            }

            .mini-nav-item {
                width: 35px;
                height: 35px;
                font-size: 0.8rem;
            }

            .quiz-header-compact {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }
        }

        @media (max-width: 768px) {
            .quiz-page-header {
                padding: 1rem;
            }

            .quiz-header-container {
                gap: 0.75rem;
            }

            .quiz-page-title {
                font-size: 1.3rem;
            }

            .quiz-meta {
                justify-content: center;
            }

            .quiz-main-content {
                padding: 0.5rem;
            }

            .quiz-taking-container {
                border-radius: 12px;
            }

            .quiz-header {
                padding: 1rem;
            }

            .quiz-header-compact {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .quiz-timer {
                justify-content: center;
                min-width: auto;
            }

            .progress-info {
                gap: 0.75rem;
            }

            .question-section-enhanced {
                padding: 1.5rem;
            }

            .question-header-enhanced {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .question-info {
                justify-content: center;
            }

            .question-text {
                font-size: 1.1rem;
                padding: 1rem;
            }

            .option-item {
                padding: 1rem 1.5rem;
            }

            .quiz-navigation-enhanced {
                flex-direction: column;
                gap: 1.5rem;
            }

            .nav-button {
                width: 100%;
                justify-content: center;
            }

            .questions-mini-nav {
                order: -1;
                gap: 0.25rem;
            }

            .mini-nav-item {
                width: 32px;
                height: 32px;
                font-size: 0.75rem;
            }

            .quiz-bottom-bar {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem 1.5rem;
            }

            .quiz-summary-enhanced {
                gap: 1rem;
            }

            .btn-submit-enhanced {
                width: 100%;
                justify-content: center;
            }
        }

        @media (max-width: 480px) {
            .quiz-page-title {
                font-size: 1.1rem;
            }

            .question-section-enhanced {
                padding: 1rem;
            }

            .question-text {
                font-size: 1rem;
            }

            .option-item {
                padding: 0.75rem 1rem;
            }

            .mini-nav-item {
                width: 28px;
                height: 28px;
                font-size: 0.7rem;
            }

            .quiz-summary-enhanced {
                flex-direction: column;
                gap: 0.5rem;
            }
        }

        /* Loading Animation */
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            padding: 1rem 1.5rem;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            max-width: 350px;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            border-left: 4px solid #10b981;
        }

        .toast.info {
            border-left: 4px solid #3b82f6;
        }

        .toast.error {
            border-left: 4px solid #ef4444;
        }

        .toast-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .toast-icon {
            font-size: 1.2rem;
        }

        .toast.success .toast-icon {
            color: #10b981;
        }

        .toast.info .toast-icon {
            color: #3b82f6;
        }

        .toast.error .toast-icon {
            color: #ef4444;
        }

        .toast-title {
            font-weight: 600;
            color: #1f2937;
        }

        .toast-message {
            color: #6b7280;
            font-size: 0.9rem;
        }
    </style>
    
    <!-- Meta Tags -->
    <meta name="description" content="Taking <%= contentItem.title %> - <%= contentItem.type === 'quiz' ? 'Quiz' : 'Homework' %>">
    <meta name="theme-color" content="#dc2626">
</head>
<body class="<%= theme %>-theme">
    <!-- Full Page Quiz Layout -->
    <div class="quiz-full-page-layout">
        <!-- Quiz Header with Back Button -->
        <header class="quiz-page-header">
            <div class="quiz-header-container">
                <button class="back-button" onclick="goBack()">
                    <i class="fas fa-arrow-left"></i>
                    <span>Back to Content</span>
                </button>
                <div class="quiz-header-info">
                    <h1 class="quiz-page-title">
                        <i class="fas fa-<%= contentItem.type === 'quiz' ? 'question-circle' : 'tasks' %>"></i>
                        <%= contentItem.title %>
                    </h1>
                </div>
            </div>
        </header>
            
            <!-- Quiz Taking Content -->
        <main class="quiz-main-content">
                <div class="quiz-taking-container">
                    <!-- Compact Professional Quiz Header -->
                    <div class="quiz-header">
                        <div class="quiz-header-compact">
                            <!-- Timer Section -->
                            <div class="quiz-timer-section">
                            <% if (timing && timing.durationMinutes > 0) { %>
                                <div class="quiz-timer" id="quizTimer">
                                        <div class="timer-icon-wrapper">
                                    <i class="fas fa-clock timer-icon"></i>
                                        </div>
                                        <div class="timer-content">
                                            <span class="timer-label">Time Remaining</span>
                                    <span class="timer-text" id="timerText">00:00</span>
                                        </div>
                                </div>
                            <% } else if (timing && timing.durationMinutes === 0) { %>
                                <div class="quiz-timer no-time-limit" id="quizTimer">
                                        <div class="timer-icon-wrapper">
                                    <i class="fas fa-infinity timer-icon"></i>
                                        </div>
                                        <div class="timer-content">
                                            <span class="timer-label">Time Limit</span>
                                    <span class="timer-text" id="timerText">No Time Limit</span>
                                        </div>
                                </div>
                            <% } %>
                        </div>
                        
                            <!-- Progress Section -->
                            <div class="quiz-progress-section">
                            <div class="progress-info">
                                    <span class="question-counter">
                                        <span class="current-question" id="currentQuestionNumber">1</span>
                                        <span class="separator">of</span>
                                        <span class="total-questions" id="totalQuestions">0</span>
                                    </span>
                                    <span class="progress-percentage" id="progressPercentage">0%</span>
                            </div>
                                <div class="progress-bar-container">
                            <div class="progress-bar">
                                <div class="progress-fill" id="progressFill" style="width: 0%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Main Quiz Content -->
                    <div class="quiz-content-full">
                        <!-- Question Section -->
                        <div class="question-section-enhanced">
                            <div class="question-header-enhanced">
                                <div class="question-info">
                                <div class="question-number" id="questionNumber">Question 1</div>
                                <div class="question-points" id="questionPoints">1 point</div>
                                </div>
                            </div>
                            
                            <div class="question-content">
                            <div class="question-text" id="questionText">
                                Loading question...
                            </div>
                            
                                <div class="question-image-container" id="questionImageContainer" style="display: none;" onclick="previewImage(document.getElementById('questionImage').src); console.log('Image container clicked');">
                                    <img class="question-image" id="questionImage" alt="Question Image">
                                    <div class="image-overlay">
                                        <i class="fas fa-search-plus"></i>
                                        <span>Click to preview</span>
                                    </div>
                            </div>
                            
                            <!-- MCQ and True/False Options -->
                            <div class="options-container" id="optionsContainer" style="display: none;">
                                <!-- Options will be loaded here -->
                            </div>
                            
                            <!-- Written Question Input -->
                            <div class="written-question-container" id="writtenQuestionContainer" style="display: none;">
                                <!-- Written Question Note -->
                                <div class="written-question-note">
                                    <div class="note-icon">
                                        <i class="fas fa-info-circle"></i>
                                    </div>
                                    <div class="note-content">
                                        <strong>Note:</strong> If you think there are two answers, type them like this: <code>10,-10</code>
                                    </div>
                                </div>
                                
                                <textarea 
                                    class="written-answer-input" 
                                    id="writtenAnswerInput" 
                                    placeholder="Enter your answer here..."
                                    oninput="handleWrittenAnswer()">
                                </textarea>
                                </div>
                            </div>
                            
                            <div class="quiz-navigation-enhanced">
                                <button class="nav-button secondary" id="prevButton" onclick="previousQuestion()" disabled>
                                    <i class="fas fa-chevron-left"></i>
                                    Previous
                                </button>
                                <div class="navigation-center">
                                    <div class="questions-mini-nav" id="questionsMiniNav">
                                        <!-- Mini navigation will be generated here -->
                                    </div>
                                </div>
                                <button class="nav-button" id="nextButton" onclick="nextQuestion()">
                                    Next
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Bottom Summary Bar -->
                        <div class="quiz-bottom-bar">
                            <div class="quiz-summary-enhanced">
                                    <div class="summary-item">
                                        <span class="summary-label">Answered:</span>
                                        <span class="summary-value" id="summaryAnswered">0</span>
                                    </div>
                                    <div class="summary-item">
                                        <span class="summary-label">Remaining:</span>
                                    <span class="summary-value" id="summaryRemaining">0</span>
                                    </div>
                                    <% if (timing && timing.durationMinutes > 0) { %>
                                        <div class="summary-item">
                                            <span class="summary-label">Time Left:</span>
                                            <span class="summary-value" id="summaryTimeLeft">00:00</span>
                                        </div>
                                    <% } else if (timing && timing.durationMinutes === 0) { %>
                                        <div class="summary-item">
                                            <span class="summary-label">Time Limit:</span>
                                            <span class="summary-value">No Time Limit</span>
                                        </div>
                                    <% } %>
                                </div>
                            <button class="btn-submit-enhanced" id="submitButton" onclick="submitQuiz()" disabled>
                                    <i class="fas fa-check"></i>
                                    Submit <%= contentItem.type === 'quiz' ? 'Quiz' : 'Homework' %>
                                </button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Image Preview Modal -->
    <div id="imagePreviewModal" class="image-preview-modal" onclick="closeImagePreview()">
        <div class="image-preview-content" onclick="event.stopPropagation()">
            <button class="image-preview-close" onclick="closeImagePreview()">
                <i class="fas fa-times"></i>
            </button>
            <img id="previewImage" src="" alt="Preview">
        </div>
    </div>

    <!-- Hidden meta for quiz timing only (NO QUESTIONS FOR SECURITY) -->
    <div id="quizMeta"
         data-timing="<%- encodeURIComponent(JSON.stringify(timing || {})) %>"
         data-attempt-number="<%= attemptNumber || 1 %>"
         data-content-id="<%= contentItem._id %>"
         data-course-id="<%= course._id %>"
         data-topic-id="<%= topic._id %>"
         data-content-type="<%= contentItem.type %>"></div>

    <!-- JavaScript -->
    <script>
        // Secure Quiz data (QUESTIONS LOADED ONCE WITHOUT CORRECT ANSWERS)
        const quizData = {
            contentId: '',
            courseId: '',
            topicId: '',
            contentType: '',
            settings: {},
            attemptNumber: 1,
            remainingSeconds: 0,
            isExpired: false,
            totalQuestions: 0,
            currentQuestionIndex: 0,
            questions: [] // Will be loaded securely from server
        };

        // Load server meta from DOM data attributes (SECURE - NO QUESTIONS)
        (function loadServerMeta(){
            var metaEl = document.getElementById('quizMeta');
            try {
                var timingStr = metaEl ? metaEl.getAttribute('data-timing') : '';
                var attemptStr = metaEl ? metaEl.getAttribute('data-attempt-number') : '';
                var contentId = metaEl ? metaEl.getAttribute('data-content-id') : '';
                var courseId = metaEl ? metaEl.getAttribute('data-course-id') : '';
                var topicId = metaEl ? metaEl.getAttribute('data-topic-id') : '';
                var contentType = metaEl ? metaEl.getAttribute('data-content-type') : '';
                
                var serverTiming = timingStr ? JSON.parse(decodeURIComponent(timingStr)) : {};
                
                quizData.contentId = contentId;
                quizData.courseId = courseId;
                quizData.topicId = topicId;
                quizData.contentType = contentType;
                quizData.settings.duration = serverTiming.durationMinutes || 0;
                quizData.settings.passingScore = (typeof serverTiming.passingScore === 'number') ? serverTiming.passingScore : 60;
                quizData.attemptNumber = attemptStr ? parseInt(attemptStr) : 1;
                quizData.remainingSeconds = serverTiming.remainingSeconds || 0;
                quizData.isExpired = !!serverTiming.isExpired;
                
                // If the previous session is expired, clear any cached answers immediately
                if (quizData.isExpired) {
                    clearSavedState();
                }
            } catch (e) {
                // Failed to parse server meta
            }
        })();

        // Local persistence (answers and progress) - Content quiz
        const quizCacheKey = `contentQuizAnswers:<%= student._id %>:<%= contentItem._id %>`;
        function loadSavedState() {
            try {
                const raw = localStorage.getItem(quizCacheKey);
                
                if (!raw) {
                    return;
                }
                
                const data = JSON.parse(raw);
                
                if (!data) {
                    return;
                }
                
                // Clear if attempt mismatch
                if (!data.attemptNumber || data.attemptNumber !== quizData.attemptNumber) {
                    clearSavedState();
                    return;
                }
                
                if (data.answers && typeof data.answers === 'object') {
                    answers = data.answers;
                }
                
                if (typeof data.currentQuestionIndex === 'number') {
                    // Don't validate against quizData.questions.length yet since questions aren't loaded
                    currentQuestionIndex = Math.max(0, data.currentQuestionIndex);
                }
            } catch (e) {
                // Failed to load saved quiz state
            }
        }
        function saveState() {
            try {
                const data = {
                    attemptNumber: quizData.attemptNumber,
                    answers: answers,
                    currentQuestionIndex: currentQuestionIndex,
                    savedAt: Date.now()
                };
                localStorage.setItem(quizCacheKey, JSON.stringify(data));
            } catch (e) {
                // Failed to save quiz state
            }
        }
        function clearSavedState() {
            try { localStorage.removeItem(quizCacheKey); } catch (e) { /* ignore */ }
        }


        // Secure Quiz state (NO QUESTIONS STORED CLIENT-SIDE)
        let currentQuestionIndex = 0;
        let answers = {};
        let timeRemaining = 0;
        let timerInterval = null;
        let quizStarted = false;
        let currentQuestion = null;

        // Initialize quiz
        document.addEventListener('DOMContentLoaded', function() {
            
            // Check if this is a fresh attempt (no saved state exists)
            const hasExistingState = localStorage.getItem(quizCacheKey);
            
            if (!hasExistingState && quizData.attemptNumber === 1) {
                // This is a completely fresh attempt - start clean
                answers = {};
                currentQuestionIndex = 0;
            } else {
                // Restore saved state
                loadSavedState();
            }
            
            // Initialize quiz with secure question loading
            initializeSecureQuiz();
            
            // Start timer if applicable, using server-provided remainingSeconds
            if (quizData.settings && quizData.settings.duration && quizData.settings.duration > 0) {
                timeRemaining = (quizData.remainingSeconds && parseInt(quizData.remainingSeconds) > 0)
                    ? parseInt(quizData.remainingSeconds)
                    : quizData.settings.duration * 60;
                if (quizData.isExpired || timeRemaining <= 0) {
                    // Immediately auto-submit gracefully
                    submitQuiz(true);
                } else {
                    startTimer();
                }
            } else {
                // No time limit - timer should show "No Time Limit" message
                const timerElement = document.getElementById('quizTimer');
                if (timerElement) {
                    timerElement.style.display = 'flex';
                }
                // Hide the time left summary item since there's no time limit
                const timeLeftElement = document.querySelector('#summaryTimeLeft');
                if (timeLeftElement) {
                    timeLeftElement.parentElement.style.display = 'none';
                }
            }
        });

        // Secure quiz initialization - load all questions from server
        function initializeSecureQuiz() {
            
            // Load all questions securely from server
            loadAllSecureQuestions();
            quizStarted = true;
        }

        // Load all questions securely from server
        function loadAllSecureQuestions() {
            
            // Show loading state
            document.getElementById('questionText').textContent = 'Loading questions...';
            document.getElementById('optionsContainer').style.display = 'none';
            document.getElementById('writtenQuestionContainer').style.display = 'none';
            
            // Fetch all questions from server
            fetch('/student/content/quiz/all-questions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contentId: quizData.contentId,
                    attemptNumber: quizData.attemptNumber
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    quizData.questions = data.questions;
                    quizData.totalQuestions = data.totalQuestions;
                    
                    // Update total questions display
                    document.getElementById('totalQuestions').textContent = quizData.totalQuestions;
                    
                    // Validate current question index now that we have questions loaded
                    currentQuestionIndex = Math.min(Math.max(0, currentQuestionIndex), quizData.totalQuestions - 1);
                    
                    // Load first question
                    loadQuestion(currentQuestionIndex);
                    updateProgress();
                    updateQuizSummary();
                    generateQuestionNavigation();
            updateQuestionNavigation();
            checkSubmitButton();
                } else {
                    showToast('Error loading questions: ' + data.message, 'error');
                }
            })
            .catch(error => {
                showToast('Error loading questions. Please try again.', 'error');
            });
        }

        // Load question from loaded questions array
        function loadQuestion(index) {
            
            if (index < 0 || index >= quizData.questions.length) {
                return;
            }
            
            currentQuestionIndex = index;
            currentQuestion = quizData.questions[index];
            
            if (!currentQuestion) {
                showToast('Error loading question. Please try again.', 'error');
                return;
            }
            
            // Update question display
            updateQuestionDisplay();
            updateProgress();
            updateQuestionNavigation();
        }

        // Update question display with secure data
        function updateQuestionDisplay() {
            if (!currentQuestion) {
                return;
            }
            
            // Update question number and points
            document.getElementById('questionNumber').textContent = `Question ${currentQuestionIndex + 1}`;
            document.getElementById('questionPoints').textContent = `${currentQuestion.points || 1} point${(currentQuestion.points || 1) > 1 ? 's' : ''}`;
            document.getElementById('currentQuestionNumber').textContent = currentQuestionIndex + 1;
            
            // Update question text with math support
            const questionTextElement = document.getElementById('questionText');
            const questionText = currentQuestion.questionText || 'No question text available';
            
            if (questionText.includes('\\') || questionText.includes('$')) {
                // If it contains LaTeX, render it with MathLive
                questionTextElement.innerHTML = `
                    <math-field readonly 
                        style="width: 100%; min-height: 40px; font-size: 16px; border: none; background: transparent; padding: 8px;"
                        class="question-math-field">
                        ${questionText}
                    </math-field>
                `;
            } else {
                questionTextElement.textContent = questionText;
            }
            
            // Update question image if exists
            const questionImageContainer = document.getElementById('questionImageContainer');
            const questionImage = document.getElementById('questionImage');
            if (currentQuestion.questionImage && currentQuestion.questionImage.trim() !== '') {
                questionImage.src = currentQuestion.questionImage;
                questionImageContainer.style.display = 'block';
            } else {
                questionImageContainer.style.display = 'none';
            }
            
            // Show appropriate input type based on question type
            const optionsContainer = document.getElementById('optionsContainer');
            const writtenContainer = document.getElementById('writtenQuestionContainer');
            
            if (currentQuestion.questionType === 'Written') {
                optionsContainer.style.display = 'none';
                writtenContainer.style.display = 'block';
                loadWrittenQuestion();
            } else {
                optionsContainer.style.display = 'block';
                writtenContainer.style.display = 'none';
                loadOptions();
            }
            
            // Update navigation buttons
            updateNavigationButtons();
        }

        // Load options securely (no question data stored client-side)
        function loadOptions() {
            if (!currentQuestion || !currentQuestion.options) {
                return;
            }
            
            const container = document.getElementById('optionsContainer');
            container.innerHTML = '';
            
            if (!currentQuestion.options || currentQuestion.options.length === 0) {
                container.innerHTML = '<p style="color: #ef4444; text-align: center; padding: 2rem;">No options available for this question</p>';
                return;
            }
            
            currentQuestion.options.forEach((option, index) => {
                const optionElement = document.createElement('div');
                optionElement.className = 'option-item';
                optionElement.onclick = () => selectOption(index);
                
                // Check if this option is already selected
                const questionId = currentQuestion._id;
                if (answers[questionId] === index.toString()) {
                    optionElement.classList.add('selected');
                }
                
                // Check if option text contains math notation
                const optionText = option.text || 'No option text';
                let optionTextElement;
                
                if (optionText.includes('\\') || optionText.includes('$')) {
                    // If it contains LaTeX, render it with MathLive
                    optionTextElement = `
                        <math-field readonly 
                            style="width: 100%; min-height: 30px; font-size: 14px; border: none; background: transparent; padding: 4px;"
                            class="option-math-field">
                            ${optionText}
                        </math-field>
                    `;
                } else {
                    // Regular text
                    optionTextElement = optionText;
                }
                
                optionElement.innerHTML = `
                    <div class="option-radio"></div>
                    <div class="option-text">${optionTextElement}</div>
                    ${option.image && option.image.trim() !== '' ? `<img src="${option.image}" alt="Option image" class="option-image">` : ''}
                `;
                
                container.appendChild(optionElement);
            });
        }

        // Secure option selection
        function selectOption(optionIndex) {
            if (!currentQuestion) {
                return;
            }
            
            const questionId = currentQuestion._id;
            
            // Remove previous selection
            document.querySelectorAll('.option-item').forEach(item => {
                item.classList.remove('selected');
            });
            
            // Add selection to clicked option
            document.querySelectorAll('.option-item')[optionIndex].classList.add('selected');
            
            // Store answer
            answers[questionId] = optionIndex.toString();
            
            // Persist after selection
            saveState();
            
            // Update quiz summary
            updateQuizSummary();
            
            // Enable submit button if all questions answered
            checkSubmitButton();
        }

        // Load written question securely
        function loadWrittenQuestion() {
            if (!currentQuestion) {
                return;
            }
            
            const questionId = currentQuestion._id;
            
            // Load existing answer if available
            const existingAnswer = answers[questionId];
            const textInput = document.getElementById('writtenAnswerInput');
            
            // Reset input
            textInput.value = '';
            
            if (existingAnswer) {
                textInput.value = existingAnswer;
            }
        }

        // Handle written answer securely
        function handleWrittenAnswer() {
            if (!currentQuestion) {
                return;
            }
            
            const questionId = currentQuestion._id;
            const answer = document.getElementById('writtenAnswerInput').value.trim();
            
            
            // Store answer
            answers[questionId] = answer;
            
            // Save state immediately
            saveState();
            
            // Update quiz summary
            updateQuizSummary();
            
            // Enable submit button if all questions answered
            checkSubmitButton();
        }


        // Navigation functions
        function previousQuestion() {
            if (currentQuestionIndex > 0) {
                loadQuestion(currentQuestionIndex - 1);
                saveState();
            }
        }

        function nextQuestion() {
            if (currentQuestionIndex < quizData.totalQuestions - 1) {
                loadQuestion(currentQuestionIndex + 1);
                saveState();
            }
        }

        function updateNavigationButtons() {
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');
            
            prevButton.disabled = currentQuestionIndex === 0;
            
            if (currentQuestionIndex === quizData.totalQuestions - 1) {
                nextButton.style.display = 'none';
            } else {
                nextButton.style.display = 'flex';
            }
        }

        // Generate question navigation
        function generateQuestionNavigation() {
            const miniNav = document.getElementById('questionsMiniNav');
            miniNav.innerHTML = '';
            
            for (let i = 0; i < quizData.totalQuestions; i++) {
                const navItem = document.createElement('div');
                navItem.className = 'mini-nav-item';
                navItem.textContent = i + 1;
                navItem.onclick = () => loadQuestion(i);
                
                if (i === currentQuestionIndex) {
                    navItem.classList.add('current');
                }
                
                miniNav.appendChild(navItem);
            }
        }

        // Update question navigation
        function updateQuestionNavigation() {
            document.querySelectorAll('.mini-nav-item').forEach((item, index) => {
                item.classList.remove('current', 'answered', 'not-answered');
                
                if (index === currentQuestionIndex) {
                    item.classList.add('current');
                }
                
                // Check if this question has been answered locally
                if (quizData.questions && quizData.questions[index]) {
                    const questionId = quizData.questions[index]._id;
                    if (answers[questionId] !== undefined && answers[questionId] !== '') {
                    item.classList.add('answered');
                    } else {
                        item.classList.add('not-answered');
                    }
                }
            });
        }

        function updateProgress() {
            const progress = ((currentQuestionIndex + 1) / quizData.totalQuestions) * 100;
            document.getElementById('progressFill').style.width = progress + '%';
            document.getElementById('progressPercentage').textContent = Math.round(progress) + '%';
        }

        function updateQuizSummary() {
            const answered = Object.keys(answers).length;
            const total = quizData.totalQuestions;
            const remaining = total - answered;
            
            document.getElementById('summaryAnswered').textContent = answered;
            document.getElementById('summaryRemaining').textContent = remaining;
        }

        function checkSubmitButton() {
            const submitButton = document.getElementById('submitButton');
            const answered = Object.keys(answers).length;
            const total = quizData.totalQuestions;
            
            submitButton.disabled = answered < total;
        }

        function startTimer() {
            updateTimerDisplay();
            timerInterval = setInterval(() => {
                timeRemaining--;
                updateTimerDisplay();
                
                if (timeRemaining <= 0) {
                    clearInterval(timerInterval);
                    submitQuiz(true); // Auto-submit when time runs out
                }
            }, 1000);
        }

        function updateTimerDisplay() {
            const minutes = Math.floor(timeRemaining / 60);
            const seconds = timeRemaining % 60;
            const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            document.getElementById('timerText').textContent = timeString;
            document.getElementById('summaryTimeLeft').textContent = timeString;
            
            // Add warning styles
            const timerElement = document.getElementById('quizTimer');
            if (timeRemaining <= 60) {
                timerElement.classList.add('timer-danger');
            } else if (timeRemaining <= 300) {
                timerElement.classList.add('timer-warning');
            }
        }

        function submitQuiz(isAutoSubmit = false) {
            if (!isAutoSubmit) {
                const answered = Object.keys(answers).length;
                const total = quizData.totalQuestions;
                
                if (answered < total) {
                    showToast(`Please answer all questions. You have answered ${answered} out of ${total} questions.`, 'error');
                    return;
                }
            }
            
            // Clear timer
            if (timerInterval) {
                clearInterval(timerInterval);
            }
            
            // Disable submit button (no blocking loader; keep smooth UX)
            const submitButton = document.getElementById('submitButton');
            submitButton.disabled = true;
            
            // Prepare submission data
            const submissionData = {
                contentId: quizData.contentId,
                courseId: quizData.courseId,
                topicId: quizData.topicId,
                contentType: quizData.contentType,
                answers: answers,
                timeSpent: quizData.settings && quizData.settings.duration ? 
                    (quizData.settings.duration * 60 - timeRemaining) : 0,
                // Derive startedAt using remainingSeconds to be more robust across refreshes
                startedAt: (quizData.settings && quizData.settings.duration && quizData.settings.duration > 0)
                    ? new Date(Date.now() - ((quizData.settings.duration * 60 - Math.max(0, timeRemaining)) * 1000)).toISOString()
                    : new Date().toISOString(),
                completedAt: new Date().toISOString(),
                attemptNumber: quizData.attemptNumber
            };
            
            // Submit quiz
            fetch('/student/content/quiz/submit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(submissionData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Always clear saved state when quiz is completed
                    clearSavedState();
                    showQuizResults(data);
                } else {
                    showToast('Error submitting quiz: ' + data.message, 'error');
                    submitButton.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error submitting quiz', 'error');
                submitButton.disabled = false;
            });
        }

        // Final results overlay modal
        function showQuizResults(data) {
            // Build overlay
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed; inset: 0; background: rgba(0,0,0,0.5);
                display: flex; align-items: center; justify-content: center; z-index: 2000;`;
            const modal = document.createElement('div');
            modal.style.cssText = `
                background: white; border-radius: 16px; padding: 24px; max-width: 420px; width: 90%;
                box-shadow: 0 20px 40px rgba(0,0,0,0.2); font-family: 'Inter', sans-serif;`;
            modal.innerHTML = `
                <div style="display:flex; align-items:center; gap:12px; margin-bottom:12px;">
                    <i class="fas fa-${data.passed ? 'check-circle' : 'info-circle'}" style="font-size:22px; color:${data.passed ? '#10b981' : '#3b82f6'}"></i>
                    <h3 style="margin:0; font-size:18px; color:#111827;">${data.passed ? 'Quiz Completed' : 'Quiz Finished'}</h3>
                </div>
                <div style="margin-bottom:16px; color:#374151;">
                    <p style="margin:6px 0;">Score: <strong>${data.score}%</strong></p>
                    <p style="margin:6px 0;">Correct: <strong>${data.correctAnswers}/${data.totalQuestions}</strong></p>
                    <p style="margin:6px 0;">Status: <strong>${data.passed ? 'Passed' : 'Finished'}</strong></p>
                </div>
                <div style="display:flex; gap:8px; justify-content:flex-end;">
                    <button id="btnCloseTab" class="nav-button secondary" style="padding:10px 14px;">
                        <i class="fas fa-times"></i> Close Page
                    </button>
                    ${data.passed ? `<a id="btnViewResults" class="nav-button" style="padding:10px 14px; text-decoration:none;"><i class="fas fa-chart-line"></i> View Results</a>` : ''}
                </div>
            `;
            overlay.appendChild(modal);
            document.body.appendChild(overlay);

            // Wire actions
            const viewResults = modal.querySelector('#btnViewResults');
            if (viewResults) {
                viewResults.href = `/student/content/${quizData.contentId}/results`;
            }
            const closeTab = modal.querySelector('#btnCloseTab');
            closeTab.addEventListener('click', function() {
                // Try closing tab; fallback navigate back or to course content
                try { window.close(); } catch (_) {}
                if (!document.hidden) {
                    if (document.referrer) {
                        history.back();
                    } else {
                        window.location.href = `/student/content/${quizData.contentId}`;
                    }
                }
            });
        }

        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="toast-header">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'info' ? 'info-circle' : 'exclamation-circle'} toast-icon"></i>
                    <span class="toast-title">${type === 'success' ? 'Success' : type === 'info' ? 'Info' : 'Error'}</span>
                </div>
                <div class="toast-message">${message}</div>
            `;
            
            document.body.appendChild(toast);
            
            // Show toast
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Hide toast
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Save state before page unload and prevent accidental navigation
        window.addEventListener('beforeunload', function(e) {
            // Always save state before leaving
            saveState();
            
            if (quizStarted && Object.keys(answers).length > 0) {
                e.preventDefault();
                e.returnValue = 'You have unsaved answers. Are you sure you want to leave?';
            }
        });

        // Also save state periodically (every 30 seconds)
        setInterval(function() {
            if (quizStarted && Object.keys(answers).length > 0) {
                console.log('Auto-saving state...');
                saveState();
            }
        }, 30000); // 30 seconds

        // Image preview functions
        function previewImage(imageSrc) {
            console.log('previewImage called with:', imageSrc);
            const modal = document.getElementById('imagePreviewModal');
            const previewImg = document.getElementById('previewImage');
            
            if (!modal || !previewImg) {
                console.error('Modal or preview image element not found');
                return;
            }
            
            previewImg.src = imageSrc;
            modal.classList.add('show');
            
            // Prevent body scroll when modal is open
            document.body.style.overflow = 'hidden';
            console.log('Modal should be visible now');
        }

        function closeImagePreview() {
            const modal = document.getElementById('imagePreviewModal');
            modal.classList.remove('show');
            
            // Restore body scroll
            document.body.style.overflow = '';
        }

        // Go back function
        function goBack() {
            // Save current state before leaving
            saveState();
            
            // Navigate back to content details page
            const contentId = '<%= contentItem._id %>';
            window.location.href = '/student/content/' + contentId;
        }

        // Close image preview on escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeImagePreview();
            }
        });
    </script>
</body>
</html>

