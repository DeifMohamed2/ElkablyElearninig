<%- include('partials/admin-header', { title: 'Brilliant Students Management', theme: 'admin' }) %>

<!-- Admin Layout -->
<div class="admin-layout">
  
  <!-- Sidebar -->
  <%- include('./partials/admin-sidebar', { currentPage: 'brilliant-students' }) %>
  
  <!-- Main Content -->
  <main class="admin-main">
    
    <!-- Top Bar -->
    <%- include('./partials/admin-topbar', { 
        breadcrumb: 'Brilliant Students',
        breadcrumbSubtitle: 'Manage Outstanding Student Achievements',
        showSearch: false
    }) %>
    
    <!-- Content Area -->
    <div class="admin-content">

<!-- Brilliant Students Management Page -->
<div class="brilliant-students-container">
  <!-- Header Section -->
  <div class="brilliant-students-header">
    <div class="brilliant-students-title">
      <i class="fas fa-trophy"></i>
      <div>
        <h1>Brilliant Students</h1>
        <p>Manage outstanding student achievements and testimonials</p>
      </div>
    </div>
    <div class="brilliant-students-actions">
      <button class="btn-export" onclick="exportStudents()">
        <i class="fas fa-download"></i>
        Export Data
      </button>
      <button class="btn-add-student" onclick="showAddStudentModal()">
        <i class="fas fa-plus"></i>
        Add Student
      </button>
    </div>
  </div>

  <!-- Statistics Cards -->
  <div class="brilliant-students-stats">
    <div class="stat-card">
      <div class="stat-card-icon">
        <i class="fas fa-users"></i>
      </div>
      <div class="stat-card-number"><%= pagination.totalStudents %></div>
      <div class="stat-card-label">Total Students</div>
    </div>
    
    <% if (stats.EST) { %>
    <div class="stat-card">
      <div class="stat-card-icon">
        <i class="fas fa-graduation-cap"></i>
      </div>
      <div class="stat-card-number"><%= stats.EST.count %></div>
      <div class="stat-card-label">EST Students</div>
    </div>
    <% } %>
    
    <% if (stats.DSAT) { %>
    <div class="stat-card">
      <div class="stat-card-icon">
        <i class="fas fa-laptop"></i>
      </div>
      <div class="stat-card-number"><%= stats.DSAT.count %></div>
      <div class="stat-card-label">DSAT Students</div>
    </div>
    <% } %>
    
    <% if (stats.ACT) { %>
    <div class="stat-card">
      <div class="stat-card-icon">
        <i class="fas fa-award"></i>
      </div>
      <div class="stat-card-number"><%= stats.ACT.count %></div>
      <div class="stat-card-label">ACT Students</div>
    </div>
    <% } %>
  </div>

  <!-- Filters Section -->
  <div class="brilliant-students-filters">
    <form method="GET" action="/admin/brilliant-students" class="filters-form">
      <div class="filters-row">
        <div class="filter-group">
          <label class="filter-label">Test Type</label>
          <select name="testType" class="filter-control">
            <option value="all" <%= filters.testType === 'all' ? 'selected' : '' %>>All Test Types</option>
            <option value="EST" <%= filters.testType === 'EST' ? 'selected' : '' %>>EST</option>
            <option value="DSAT" <%= filters.testType === 'DSAT' ? 'selected' : '' %>>DSAT</option>
            <option value="ACT" <%= filters.testType === 'ACT' ? 'selected' : '' %>>ACT</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Status</label>
          <select name="isActive" class="filter-control">
            <option value="">All Status</option>
            <option value="true" <%= filters.isActive === 'true' ? 'selected' : '' %>>Active</option>
            <option value="false" <%= filters.isActive === 'false' ? 'selected' : '' %>>Inactive</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Search</label>
          <input type="text" name="search" class="filter-control" placeholder="Search by name..." value="<%= filters.search %>">
        </div>
      </div>
      
      <div class="filter-actions">
        <button type="submit" class="btn-filter primary">
          <i class="fas fa-search"></i>
          Apply Filters
        </button>
        <a href="/admin/brilliant-students" class="btn-filter">
          <i class="fas fa-times"></i>
          Clear Filters
        </a>
      </div>
    </form>
  </div>

  <!-- Students Grid -->
  <div class="brilliant-students-grid" id="studentsGrid">
    <% if (students && students.length > 0) { %>
      <% students.forEach(student => { %>
        <div class="student-card draggable" data-id="<%= student._id %>">
          <div class="student-card-header">
            <div class="student-card-actions">
              <button class="student-card-action" onclick="editStudent('<%= student._id %>')" title="Edit">
                <i class="fas fa-edit"></i>
              </button>
              <button class="student-card-action" onclick="deleteStudent('<%= student._id %>')" title="Delete">
                <i class="fas fa-trash"></i>
              </button>
            </div>
            
            <div class="student-card-photo">
              <% if (student.image) { %>
                <img src="<%= student.image %>" alt="<%= student.name %>" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
              <% } %>
              <div class="fallback" data-visible="<%= student.image ? 'false' : 'true' %>"><%= student.fallbackInitials %></div>
            </div>
            
            <div class="student-card-name"><%= student.name %></div>
            <div class="student-card-test-type"><%= student.testTypeDisplayName %></div>
          </div>
          
          <div class="student-card-body">
            <div class="student-card-score">
              <div>
                <div class="student-score-value"><%= student.score %></div>
                <div class="student-score-max">/ <%= student.maxScore %></div>
              </div>
              <div class="student-percentage"><%= student.percentage %>%</div>
            </div>
            
            <div class="score-progress">
              <div class="score-progress-fill" data-width="<%= student.percentage %>"></div>
            </div>
            
            <div class="student-card-details">
              <div class="student-detail-item">
                <i class="fas fa-graduation-cap"></i>
                <span><%= student.testTypeDisplayName %></span>
              </div>
            </div>
          </div>
          
          <div class="student-card-footer">
            <div class="student-status <%= student.isActive ? 'active' : 'inactive' %>">
              <i class="fas fa-circle"></i>
              <%= student.isActive ? 'Active' : 'Inactive' %>
            </div>
            <div class="student-display-order">Order: <%= student.displayOrder %></div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="no-students-message">
        <div class="no-students-icon">
          <i class="fas fa-user-graduate"></i>
        </div>
        <h3>No Brilliant Students Found</h3>
        <p>Start by adding some outstanding students to showcase their achievements.</p>
        <button class="btn-add-student" onclick="showAddStudentModal()">
          <i class="fas fa-plus"></i>
          Add First Student
        </button>
      </div>
    <% } %>
  </div>

  <!-- Pagination -->
  <% if (pagination.totalPages > 1) { %>
    <div class="brilliant-students-pagination">
      <% if (pagination.hasPrev) { %>
        <a href="?page=<%= pagination.prevPage %>" class="admin-pagination-btn">
          <i class="fas fa-chevron-left"></i>
          Previous
        </a>
      <% } %>
      
      <% for (let i = 1; i <= pagination.totalPages; i++) { %>
        <% if (i === pagination.currentPage) { %>
          <span class="admin-pagination-btn active"><%= i %></span>
        <% } else { %>
          <a href="?page=<%= i %>" class="admin-pagination-btn"><%= i %></a>
        <% } %>
      <% } %>
      
      <% if (pagination.hasNext) { %>
        <a href="?page=<%= pagination.nextPage %>" class="admin-pagination-btn">
          Next
          <i class="fas fa-chevron-right"></i>
        </a>
      <% } %>
    </div>
  <% } %>
</div>

<!-- Add/Edit Student Modal -->
<div class="brilliant-student-modal" id="studentModal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 class="modal-title" id="modalTitle">Add Brilliant Student</h3>
      <button class="modal-close" onclick="hideStudentModal()">
        <i class="fas fa-times"></i>
      </button>
    </div>
    
    <form id="studentForm">
      <div class="form-grid">
        <div class="form-group">
          <label class="form-label">Student Name <span class="required">*</span></label>
          <input type="text" name="name" class="form-input" required>
        </div>
        
        <div class="form-group">
          <label class="form-label">Test Type <span class="required">*</span></label>
          <select name="testType" id="testTypeSelect" class="form-select" required>
            <option value="">Select Test Type</option>
            <option value="EST">EST (0-800)</option>
            <option value="DSAT">DSAT (0-1600)</option>
            <option value="ACT">ACT (0-36)</option>
          </select>
        </div>
        
        <div class="form-group">
          <label class="form-label">Score <span class="required">*</span></label>
          <input type="number" name="score" class="form-input" required min="0">
          <div class="form-help" id="scoreHelp">Enter the student's test score</div>
        </div>
        
        <div class="form-group">
          <label class="form-label">Max Score <span class="required">*</span></label>
          <input type="number" name="maxScore" id="maxScoreInput" class="form-input" required readonly>
          <div class="form-help">Auto-filled based on test type selection</div>
        </div>
        
        <div class="form-group">
          <label class="form-label">Fallback Initials <span class="required">*</span></label>
          <input type="text" name="fallbackInitials" class="form-input" required maxlength="5" placeholder="e.g., JH">
          <div class="form-help">Used when image is not available</div>
        </div>
        
        <div class="form-group">
          <label class="form-label">Student Photo</label>
          <input type="url" name="image" id="studentImageUrl" class="form-input" placeholder="Enter image URL or upload below">
          <div class="form-help">Optional: URL to student's photo or upload using the section below</div>
        </div>
        
        <!-- Image Upload Section -->
        <div class="form-group">
          <label class="form-label">
            <i class="fas fa-cloud-upload-alt me-2"></i>
            Upload Student Photo
          </label>
          <div class="upload-section">
            <input type="file" id="studentImageFile" class="upload-input" accept="image/*">
            <label for="studentImageFile" class="upload-label">
              <i class="fas fa-cloud-upload-alt"></i>
              Choose Photo
            </label>
            <div id="studentImagePreview" class="upload-preview">
              <div class="preview-overlay">
                <i class="fas fa-cloud-upload-alt"></i>
                <p>Click or drag to upload photo</p>
                <small>JPEG, PNG, JPG, WebP (max 10MB)</small>
              </div>
            </div>
            <div id="studentImageProgress" class="upload-progress" style="display: none;"></div>
          </div>
        </div>
        
        <div class="form-group">
          <label class="form-label">Display Order</label>
          <input type="number" name="displayOrder" class="form-input" min="0" value="0">
          <div class="form-help">Lower numbers appear first</div>
        </div>
        
        <div class="form-group">
          <label class="form-label">Status</label>
          <select name="isActive" class="form-select">
            <option value="true">Active</option>
            <option value="false">Inactive</option>
          </select>
        </div>
      </div>
      
      <div class="modal-actions">
        <button type="button" class="btn-modal" onclick="hideStudentModal()">Cancel</button>
        <button type="submit" class="btn-modal primary" id="submitButton">
          <span class="button-text">Save Student</span>
          <span class="button-loading" style="display: none;">
            <i class="fas fa-spinner fa-spin"></i> Saving...
          </span>
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Include CSS -->
<link rel="stylesheet" href="/css/adminCSS/brilliant-students.css">

<!-- Cloudinary Upload Script -->
<script src="/js/cloudinary-upload.js"></script>

<script>
// Global variables
let isEditMode = false;
let currentStudentId = null;

// Initialize Cloudinary upload functionality
document.addEventListener('DOMContentLoaded', function() {
  const uploader = new CloudinaryUploader();
  
  // Initialize image upload for student photos
  setupStudentImageUpload(uploader);
});

// Setup student image upload functionality
function setupStudentImageUpload(uploader) {
  const imageFileInput = document.getElementById('studentImageFile');
  const imagePreview = document.getElementById('studentImagePreview');
  const imageProgress = document.getElementById('studentImageProgress');
  const imageUrlInput = document.getElementById('studentImageUrl');
  
  if (!imageFileInput || !imagePreview || !imageProgress || !imageUrlInput) {
    console.error('Student image upload elements not found');
    return;
  }
  
  // Handle file selection
  imageFileInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (file) {
      handleStudentImageSelection(file, imagePreview, imageProgress, imageUrlInput);
    }
  });
  
  // Handle drag and drop
  imagePreview.addEventListener('dragover', (e) => {
    e.preventDefault();
    imagePreview.classList.add('drag-over');
  });
  
  imagePreview.addEventListener('dragleave', (e) => {
    e.preventDefault();
    imagePreview.classList.remove('drag-over');
  });
  
  imagePreview.addEventListener('drop', (e) => {
    e.preventDefault();
    imagePreview.classList.remove('drag-over');
    const file = e.dataTransfer.files[0];
    if (file) {
      imageFileInput.files = e.dataTransfer.files;
      handleStudentImageSelection(file, imagePreview, imageProgress, imageUrlInput);
    }
  });
}

// Handle student image selection and upload
function handleStudentImageSelection(file, preview, progress, urlInput) {
  // Validate file
  if (!validateStudentImageFile(file)) {
    return;
  }
  
  // Show preview
  showStudentImagePreview(file, preview);
  
  // Show progress bar
  showStudentImageProgress(progress, 0);
  
  // Auto-upload the file
  uploadStudentImage(file, preview, progress, urlInput);
}

// Validate student image file
function validateStudentImageFile(file) {
  const maxFileSize = 10 * 1024 * 1024; // 10MB
  const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
  
  // Check file size
  if (file.size > maxFileSize) {
    showNotification('File size must be less than 10MB', 'error');
    return false;
  }
  
  // Check file type
  if (!allowedTypes.includes(file.type)) {
    showNotification('Only JPEG, PNG, JPG, and WebP images are allowed', 'error');
    return false;
  }
  
  return true;
}

// Show student image preview
function showStudentImagePreview(file, preview) {
  const reader = new FileReader();
  reader.onload = (e) => {
    preview.innerHTML = `
      <img src="${e.target.result}" alt="Preview" class="preview-image">
      <div class="preview-overlay">
        <i class="fas fa-cloud-upload-alt"></i>
        <p>Uploading...</p>
        <small>${file.name}</small>
      </div>
    `;
  };
  reader.readAsDataURL(file);
}

// Show student image upload progress
function showStudentImageProgress(progress, percent) {
  progress.style.display = 'block';
  progress.innerHTML = `
    <div class="progress-container">
      <div class="progress-bar">
        <div class="progress-fill" style="width: ${percent}%"></div>
      </div>
      <div class="progress-text">${percent}%</div>
    </div>
  `;
}

// Upload student image to Cloudinary
function uploadStudentImage(file, preview, progress, urlInput) {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('upload_preset', 'order_project');
  
  const xhr = new XMLHttpRequest();
  
  // Upload progress
  xhr.upload.addEventListener('progress', (e) => {
    if (e.lengthComputable) {
      const percent = Math.round((e.loaded / e.total) * 100);
      showStudentImageProgress(progress, percent);
    }
  });
  
  // Upload complete
  xhr.addEventListener('load', () => {
    if (xhr.status === 200) {
      const response = JSON.parse(xhr.responseText);
      showStudentImageSuccess(preview, progress, response.secure_url, urlInput);
    } else {
      showNotification('Upload failed. Please try again.', 'error');
      resetStudentImageUpload(preview, progress);
    }
  });
  
  // Upload error
  xhr.addEventListener('error', () => {
    showNotification('Upload failed. Please check your connection.', 'error');
    resetStudentImageUpload(preview, progress);
  });
  
  // Start upload
  xhr.open('POST', 'https://api.cloudinary.com/v1_1/dusod9wxt/upload', true);
  xhr.send(formData);
}

// Show student image upload success
function showStudentImageSuccess(preview, progress, url, urlInput) {
  preview.innerHTML = `
    <img src="${url}" alt="Uploaded Image" class="preview-image">
    <div class="preview-overlay" style="opacity: 1; background: rgba(40, 167, 69, 0.9);">
      <i class="fas fa-check-circle" style="color: white;"></i>
      <p>Upload Successful!</p>
      <small>Image uploaded to Cloudinary</small>
    </div>
  `;
  
  // Set the URL input value
  urlInput.value = url;
  urlInput.style.backgroundColor = '#d4edda';
  urlInput.style.border = '1px solid #c3e6cb';
  
  progress.style.display = 'none';
  showNotification('Image uploaded successfully!', 'success');
}

// Reset student image upload
function resetStudentImageUpload(preview, progress) {
  preview.innerHTML = `
    <div class="preview-overlay">
      <i class="fas fa-cloud-upload-alt"></i>
      <p>Click or drag to upload photo</p>
      <small>JPEG, PNG, JPG, WebP (max 10MB)</small>
    </div>
  `;
  progress.style.display = 'none';
}

// Show add student modal
function showAddStudentModal() {
  isEditMode = false;
  currentStudentId = null;
  document.getElementById('modalTitle').textContent = 'Add Brilliant Student';
  document.getElementById('studentForm').reset();
  
  // Reset image upload section
  const imagePreview = document.getElementById('studentImagePreview');
  const imageProgress = document.getElementById('studentImageProgress');
  const imageUrlInput = document.getElementById('studentImageUrl');
  
  if (imagePreview) {
    imagePreview.innerHTML = `
      <div class="preview-overlay">
        <i class="fas fa-cloud-upload-alt"></i>
        <p>Click or drag to upload photo</p>
        <small>JPEG, PNG, JPG, WebP (max 10MB)</small>
      </div>
    `;
  }
  
  if (imageProgress) {
    imageProgress.style.display = 'none';
  }
  
  if (imageUrlInput) {
    imageUrlInput.style.backgroundColor = '';
    imageUrlInput.style.border = '';
  }
  
  document.getElementById('studentModal').classList.add('show');
  
  // Ensure the updateScoreLimits function works when modal is shown
  setTimeout(() => {
    console.log('Modal shown, calling updateScoreLimits');
    updateScoreLimits();
  }, 100);
}

// Show edit student modal
async function editStudent(studentId) {
  try {
    const response = await fetch(`/admin/brilliant-students/${studentId}`);
    const student = await response.json();
    
    if (student.success) {
      isEditMode = true;
      currentStudentId = studentId;
      
      // Populate form with student data
      document.getElementById('modalTitle').textContent = 'Edit Brilliant Student';
      
      // Fill form fields
      document.querySelector('input[name="name"]').value = student.data.name;
      document.querySelector('select[name="testType"]').value = student.data.testType;
      document.querySelector('input[name="score"]').value = student.data.score;
      document.querySelector('input[name="maxScore"]').value = student.data.maxScore;
      document.querySelector('input[name="fallbackInitials"]').value = student.data.fallbackInitials;
      document.querySelector('input[name="image"]').value = student.data.image || '';
      document.querySelector('input[name="displayOrder"]').value = student.data.displayOrder;
      document.querySelector('select[name="isActive"]').value = student.data.isActive;
      
      // Handle image preview for edit mode
      if (student.data.image) {
        const imagePreview = document.getElementById('studentImagePreview');
        imagePreview.innerHTML = `
          <img src="${student.data.image}" alt="Current Image" class="preview-image">
          <div class="preview-overlay" style="opacity: 0.7;">
            <i class="fas fa-edit"></i>
            <p>Current Image</p>
            <small>Click to upload new image</small>
          </div>
        `;
      }
      
      document.getElementById('studentModal').classList.add('show');
    } else {
      showNotification('Failed to load student data', 'error');
    }
  } catch (error) {
    console.error('Error loading student data:', error);
    showNotification('Failed to load student data', 'error');
  }
}

// Hide student modal
function hideStudentModal() {
  document.getElementById('studentModal').classList.remove('show');
}

// Update score limits based on test type
function updateScoreLimits() {
  console.log('updateScoreLimits called');
  
  const testTypeSelect = document.getElementById('testTypeSelect');
  const scoreInput = document.querySelector('input[name="score"]');
  const maxScoreInput = document.getElementById('maxScoreInput');
  const scoreHelp = document.getElementById('scoreHelp');
  
  if (!testTypeSelect || !scoreInput || !maxScoreInput) {
    console.error('Required elements not found');
    return;
  }
  
  const testType = testTypeSelect.value;
  console.log('Test type selected:', testType);
  
  // Clear previous values
  scoreInput.max = '';
  maxScoreInput.value = '';
  
  switch(testType) {
    case 'EST':
      scoreInput.max = 800;
      maxScoreInput.value = 800;
      if (scoreHelp) scoreHelp.textContent = 'EST scores range from 0-800';
      console.log('Set EST limits - maxScore: 800');
      break;
    case 'DSAT':
      scoreInput.max = 1600;
      maxScoreInput.value = 1600;
      if (scoreHelp) scoreHelp.textContent = 'DSAT scores range from 0-1600';
      console.log('Set DSAT limits - maxScore: 1600');
      break;
    case 'ACT':
      scoreInput.max = 36;
      maxScoreInput.value = 36;
      if (scoreHelp) scoreHelp.textContent = 'ACT scores range from 0-36';
      console.log('Set ACT limits - maxScore: 36');
      break;
    default:
      if (scoreHelp) scoreHelp.textContent = 'Select a test type first';
      console.log('Reset limits - no test type selected');
  }
  
  // Force visual update
  maxScoreInput.style.backgroundColor = maxScoreInput.value ? 'rgba(184, 1, 1, 0.05)' : '';
}

// Handle form submission
async function handleFormSubmit(event) {
  event.preventDefault();
  
  const form = document.getElementById('studentForm');
  const formData = new FormData(form);
  const submitButton = document.getElementById('submitButton');
  const buttonText = submitButton.querySelector('.button-text');
  const buttonLoading = submitButton.querySelector('.button-loading');
  
  // Show loading state
  submitButton.disabled = true;
  buttonText.style.display = 'none';
  buttonLoading.style.display = 'inline-block';
  
  try {
    // Prepare data object
    const data = {
      name: formData.get('name'),
      testType: formData.get('testType'),
      score: formData.get('score'),
      maxScore: formData.get('maxScore'),
      fallbackInitials: formData.get('fallbackInitials'),
      image: formData.get('image'),
      displayOrder: formData.get('displayOrder'),
      isActive: formData.get('isActive')
    };
    
    console.log('Submitting data:', data);
    
    let url, method;
    if (isEditMode && currentStudentId) {
      url = `/admin/brilliant-students/${currentStudentId}`;
      method = 'PUT';
    } else {
      url = '/admin/brilliant-students';
      method = 'POST';
    }
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    });
    
    const result = await response.json();
    
    if (result.success) {
      showNotification(result.message, 'success');
      hideStudentModal();
      // Reload the page to show the new/updated student
      setTimeout(() => location.reload(), 1000);
    } else {
      showNotification(result.message, 'error');
      console.error('Server error:', result);
    }
  } catch (error) {
    console.error('Error submitting form:', error);
    showNotification('Failed to save student. Please try again.', 'error');
  } finally {
    // Reset button state
    submitButton.disabled = false;
    buttonText.style.display = 'inline-block';
    buttonLoading.style.display = 'none';
  }
}

// Add form submission event listener
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('studentForm');
  if (form) {
    form.addEventListener('submit', handleFormSubmit);
  }
  
  // Set progress bar widths from data attributes
  const progressBars = document.querySelectorAll('.score-progress-fill[data-width]');
  progressBars.forEach(bar => {
    const width = bar.getAttribute('data-width');
    bar.style.width = width + '%';
  });
  
  // Set fallback visibility from data attributes
  const fallbacks = document.querySelectorAll('.fallback[data-visible]');
  fallbacks.forEach(fallback => {
    const visible = fallback.getAttribute('data-visible') === 'true';
    fallback.style.display = visible ? 'flex' : 'none';
  });
  
  // Add event listener for test type changes - use event delegation
  document.addEventListener('change', function(e) {
    if (e.target.id === 'testTypeSelect') {
      console.log('Test type changed via event delegation:', e.target.value);
      updateScoreLimits();
    }
  });
});


// Delete student
function deleteStudent(studentId) {
  if (confirm('Are you sure you want to delete this student? This action cannot be undone.')) {
    fetch(`/admin/brilliant-students/${studentId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showNotification(data.message, 'success');
        setTimeout(() => location.reload(), 1000);
      } else {
        showNotification(data.message, 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showNotification('Failed to delete student', 'error');
    });
  }
}

// Export students data
function exportStudents() {
  const currentUrl = new URL(window.location.href);
  const exportUrl = '/admin/brilliant-students/export' + currentUrl.search;
  window.open(exportUrl, '_blank');
}

// Show notification
function showNotification(message, type) {
  const notification = document.createElement('div');
  notification.className = `notification ${type === 'success' ? 'success-message' : 'error-message'}`;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.classList.add('show');
  }, 100);
  
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

// Close modal on escape key
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    hideStudentModal();
  }
});

// Close modal on overlay click
document.getElementById('studentModal').addEventListener('click', function(e) {
  if (e.target === this) {
    hideStudentModal();
  }
});

// Drag and drop functionality
let draggedElement = null;

document.addEventListener('DOMContentLoaded', function() {
  const grid = document.getElementById('studentsGrid');
  
  if (grid) {
    grid.addEventListener('dragstart', function(e) {
      if (e.target.classList.contains('draggable')) {
        draggedElement = e.target;
        e.target.classList.add('dragging');
      }
    });
    
    grid.addEventListener('dragend', function(e) {
      if (e.target.classList.contains('draggable')) {
        e.target.classList.remove('dragging');
        draggedElement = null;
      }
    });
    
    grid.addEventListener('dragover', function(e) {
      e.preventDefault();
    });
    
    grid.addEventListener('drop', function(e) {
      e.preventDefault();
      if (draggedElement && e.target.classList.contains('student-card')) {
        // Handle reordering logic here
        console.log('Reordering students...');
      }
    });
  }
});
</script>

    </div> <!-- admin-content -->
  </main> <!-- admin-main -->
</div> <!-- admin-layout -->

<%- include('partials/admin-footer') %>
