<%- include('partials/admin-header', { title: 'Team Management', theme: 'admin', pageCSS: 'brilliant-students' }) %>

<!-- Admin Layout -->
<div class="admin-layout">

  <!-- Sidebar -->
  <%- include('./partials/admin-sidebar', { currentPage: 'team-management' }) %>

  <!-- Main Content -->
  <main class="admin-main">

    <!-- Top Bar -->
    <%- include('./partials/admin-topbar', { 
        breadcrumb: 'Team Management',
        breadcrumbSubtitle: 'Manage Elkably Team Members',
        showSearch: false
    }) %>

    <!-- Content Area -->
    <div class="admin-content">

      <!-- Team Management Page -->
      <div class="brilliant-students-container">
        <!-- Header Section -->
        <div class="brilliant-students-header">
          <div class="brilliant-students-title">
            <i class="fas fa-users"></i>
            <div>
              <h1>Elkably Team</h1>
              <p>Manage team members displayed on the homepage</p>
            </div>
          </div>
          <div class="brilliant-students-actions">
            <button class="btn-export" onclick="exportTeamMembers()">
              <i class="fas fa-file-excel"></i>
              Export Excel Report
            </button>
            <button class="btn-add-student" onclick="showAddMemberModal()">
              <i class="fas fa-plus"></i>
              Add Team Member
            </button>
          </div>
        </div>

        <!-- Statistics Cards -->
        <div class="brilliant-students-stats">
          <div class="stat-card">
            <div class="stat-card-icon">
              <i class="fas fa-users"></i>
            </div>
            <div class="stat-card-number"><%= pagination.totalMembers %></div>
            <div class="stat-card-label">Total Members</div>
          </div>

          <div class="stat-card">
            <div class="stat-card-icon">
              <i class="fas fa-user-check"></i>
            </div>
            <div class="stat-card-number"><%= stats.active %></div>
            <div class="stat-card-label">Active Members</div>
          </div>

          <div class="stat-card">
            <div class="stat-card-icon">
              <i class="fas fa-user-times"></i>
            </div>
            <div class="stat-card-number"><%= stats.inactive %></div>
            <div class="stat-card-label">Inactive Members</div>
          </div>
        </div>

        <!-- Filters Section -->
        <div class="brilliant-students-filters">
          <form method="GET" action="/admin/team-management" class="filters-form">
            <div class="filters-row">
              <div class="filter-group">
                <label class="filter-label">Status</label>
                <select name="isActive" class="filter-control">
                  <option value="">All Status</option>
                  <option value="true" <%= filters.isActive === 'true' ? 'selected' : '' %>>Active</option>
                  <option value="false" <%= filters.isActive === 'false' ? 'selected' : '' %>>Inactive</option>
                </select>
              </div>

              <div class="filter-group">
                <label class="filter-label">Search</label>
                <input type="text" name="search" class="filter-control" placeholder="Search by name or position..." value="<%= filters.search %>">
              </div>
            </div>

            <div class="filter-actions">
              <button type="submit" class="btn-filter primary">
                <i class="fas fa-search"></i>
                Apply Filters
              </button>
              <a href="/admin/team-management" class="btn-filter">
                <i class="fas fa-times"></i>
                Clear Filters
              </a>
            </div>
          </form>
        </div>

        <!-- Team Members Grid -->
        <div class="brilliant-students-grid" id="teamMembersGrid">
          <% if (teamMembers && teamMembers.length > 0) { %>
          <% teamMembers.forEach(member => { %>
          <div class="student-card draggable" data-id="<%= member._id %>">
            <div class="student-card-header">
              <div class="student-card-actions">
                <button class="student-card-action" onclick="editMember('<%= member._id %>')" title="Edit">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="student-card-action" onclick="deleteMember('<%= member._id %>')" title="Delete">
                  <i class="fas fa-trash"></i>
                </button>
              </div>

              <div class="student-card-photo">
                <% if (member.image) { %>
                <img src="<%= member.image %>" alt="<%= member.name %>" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                <% } %>
                <div class="fallback" data-visible="<%= member.image ? 'false' : 'true' %>"><%= member.fallbackInitials %></div>
              </div>

              <div class="student-card-name"><%= member.name %></div>
              <div class="student-card-test-type"><%= member.position %></div>
            </div>

            <div class="student-card-body">
              <div class="student-card-details">
                <div class="student-detail-item">
                  <i class="fas fa-user-tag"></i>
                  <span><%= member.position %></span>
                </div>
                <div class="student-detail-item">
                  <i class="fas fa-sort-numeric-up"></i>
                  <span>Order: <%= member.displayOrder %></span>
                </div>
              </div>
            </div>

            <div class="student-card-footer">
              <div class="student-status <%= member.isActive ? 'active' : 'inactive' %>">
                <i class="fas fa-circle"></i>
                <%= member.isActive ? 'Active' : 'Inactive' %>
              </div>
              <div class="student-display-order">Order: <%= member.displayOrder %></div>
            </div>
          </div>
          <% }); %>
          <% } else { %>
          <div class="no-students-message">
            <div class="no-students-icon">
              <i class="fas fa-users"></i>
            </div>
            <h3>No Team Members Found</h3>
            <p>Start by adding some team members to showcase on the homepage.</p>
            <button class="btn-add-student" onclick="showAddMemberModal()">
              <i class="fas fa-plus"></i>
              Add First Member
            </button>
          </div>
          <% } %>
        </div>

        <!-- Pagination -->
        <% if (pagination.totalPages > 1) { %>
        <div class="brilliant-students-pagination">
          <% if (pagination.hasPrev) { %>
          <a href="?page=<%= pagination.prevPage %>" class="admin-pagination-btn">
            <i class="fas fa-chevron-left"></i>
            Previous
          </a>
          <% } %>

          <% for (let i = 1; i <= pagination.totalPages; i++) { %>
          <% if (i === pagination.currentPage) { %>
          <span class="admin-pagination-btn active"><%= i %></span>
          <% } else { %>
          <a href="?page=<%= i %>" class="admin-pagination-btn"><%= i %></a>
          <% } %>
          <% } %>

          <% if (pagination.hasNext) { %>
          <a href="?page=<%= pagination.nextPage %>" class="admin-pagination-btn">
            Next
            <i class="fas fa-chevron-right"></i>
          </a>
          <% } %>
        </div>
        <% } %>
      </div>

      <!-- Add/Edit Team Member Modal (Bootstrap) -->
      <div class="modal fade" id="memberModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="modalTitle">Add Team Member</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <form id="memberForm">
              <div class="modal-body">
                <div class="form-grid">
                  <div class="form-group">
                    <label class="form-label">Member Name <span class="required">*</span></label>
                    <input type="text" name="name" class="form-control" required>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Position <span class="required">*</span></label>
                    <input type="text" name="position" class="form-control" placeholder="e.g., HEAD, TEAM LEADER" required>
                    <div class="form-help">Enter the team member's position/role</div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Fallback Initials <span class="required">*</span></label>
                    <input type="text" name="fallbackInitials" class="form-control" required maxlength="5" placeholder="e.g., NE">
                    <div class="form-help">Used when image is not available</div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Member Photo</label>
                    <input type="url" name="image" id="memberImageUrl" class="form-control" placeholder="Enter image URL or upload below">
                    <div class="form-help">Optional: URL to member's photo or upload using the section below</div>
                  </div>

                  <!-- Image Upload Section -->
                  <div class="form-group">
                    <label class="form-label">
                      <i class="fas fa-cloud-upload-alt me-2"></i>
                      Upload Member Photo
                    </label>
                    <div class="upload-section">
                      <input type="file" id="memberImageFile" class="upload-input" accept="image/*">
                      <label for="memberImageFile" class="upload-label">
                        <i class="fas fa-cloud-upload-alt"></i>
                        Choose Photo
                      </label>
                      <div id="memberImagePreview" class="upload-preview">
                        <div class="preview-overlay">
                          <i class="fas fa-cloud-upload-alt"></i>
                          <p>Click or drag to upload photo</p>
                          <small>JPEG, PNG, JPG, WebP (max 10MB)</small>
                        </div>
                      </div>
                      <div id="memberImageProgress" class="upload-progress" style="display: none;"></div>
                    </div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Display Order</label>
                    <input type="number" name="displayOrder" class="form-control" min="0" value="0">
                    <div class="form-help">Lower numbers appear first</div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Status</label>
                    <select name="isActive" class="form-control">
                      <option value="true">Active</option>
                      <option value="false">Inactive</option>
                    </select>
                  </div>
                </div>
              </div>

              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary" id="submitButton">
                  <span class="button-text">Save Member</span>
                  <span class="button-loading" style="display: none;">
                    <i class="fas fa-spinner fa-spin"></i> Saving...
                  </span>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Cloudinary Upload Script -->
      <script src="/js/cloudinary-upload.js"></script>

      <script>
        // Global variables
        let isEditMode = false;
        let currentMemberId = null;

        // Initialize Cloudinary upload functionality
        document.addEventListener('DOMContentLoaded', function() {
          // Initialize Cloudinary upload functionality and Bootstrap modal instance
          const modalEl = document.getElementById('memberModal');
          if (modalEl && typeof bootstrap !== 'undefined' && bootstrap.Modal) {
            // Make instance globally accessible for other functions
            window.memberModalInstance = bootstrap.Modal.getOrCreateInstance(modalEl);
            console.log('memberModal initialized');
          } else if (!modalEl) {
            console.warn('memberModal element not found');
          } else {
            console.warn('Bootstrap Modal API not available');
          }

          const uploader = new CloudinaryUploader();
          // Initialize image upload for member photos
          setupMemberImageUpload(uploader);
        });

        // Setup member image upload functionality
        function setupMemberImageUpload(uploader) {
          const imageFileInput = document.getElementById('memberImageFile');
          const imagePreview = document.getElementById('memberImagePreview');
          const imageProgress = document.getElementById('memberImageProgress');
          const imageUrlInput = document.getElementById('memberImageUrl');

          if (!imageFileInput || !imagePreview || !imageProgress || !imageUrlInput) {
            console.error('Member image upload elements not found');
            return;
          }

          // Handle file selection
          imageFileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
              handleMemberImageSelection(file, imagePreview, imageProgress, imageUrlInput);
            }
          });

          // Handle drag and drop
          imagePreview.addEventListener('dragover', (e) => {
            e.preventDefault();
            imagePreview.classList.add('drag-over');
          });

          imagePreview.addEventListener('dragleave', (e) => {
            e.preventDefault();
            imagePreview.classList.remove('drag-over');
          });

          imagePreview.addEventListener('drop', (e) => {
            e.preventDefault();
            imagePreview.classList.remove('drag-over');
            const file = e.dataTransfer.files[0];
            if (file) {
              imageFileInput.files = e.dataTransfer.files;
              handleMemberImageSelection(file, imagePreview, imageProgress, imageUrlInput);
            }
          });
        }

        // Handle member image selection and upload
        function handleMemberImageSelection(file, preview, progress, urlInput) {
          // Validate file
          if (!validateMemberImageFile(file)) {
            return;
          }

          // Show preview
          showMemberImagePreview(file, preview);

          // Show progress bar
          showMemberImageProgress(progress, 0);

          // Auto-upload the file
          uploadMemberImage(file, preview, progress, urlInput);
        }

        // Validate member image file
        function validateMemberImageFile(file) {
          const maxFileSize = 10 * 1024 * 1024; // 10MB
          const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];

          // Check file size
          if (file.size > maxFileSize) {
            showNotification('File size must be less than 10MB', 'error');
            return false;
          }

          // Check file type
          if (!allowedTypes.includes(file.type)) {
            showNotification('Only JPEG, PNG, JPG, and WebP images are allowed', 'error');
            return false;
          }

          return true;
        }

        // Show member image preview
        function showMemberImagePreview(file, preview) {
          const reader = new FileReader();
          reader.onload = (e) => {
            preview.innerHTML = `
              <img src="${e.target.result}" alt="Preview" class="preview-image">
              <div class="preview-overlay">
                <i class="fas fa-cloud-upload-alt"></i>
                <p>Uploading...</p>
                <small>${file.name}</small>
              </div>
            `;
          };
          reader.readAsDataURL(file);
        }

        // Show member image upload progress
        function showMemberImageProgress(progress, percent) {
          progress.style.display = 'block';
          progress.innerHTML = `
            <div class="progress-container">
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${percent}%"></div>
              </div>
              <div class="progress-text">${percent}%</div>
            </div>
          `;
        }

        // Upload member image to Cloudinary
        function uploadMemberImage(file, preview, progress, urlInput) {
          const formData = new FormData();
          formData.append('file', file);
          formData.append('upload_preset', 'order_project');

          const xhr = new XMLHttpRequest();

          // Upload progress
          xhr.upload.addEventListener('progress', (e) => {
            if (e.lengthComputable) {
              const percent = Math.round((e.loaded / e.total) * 100);
              showMemberImageProgress(progress, percent);
            }
          });

          // Upload complete
          xhr.addEventListener('load', () => {
            if (xhr.status === 200) {
              const response = JSON.parse(xhr.responseText);
              showMemberImageSuccess(preview, progress, response.secure_url, urlInput);
            } else {
              showNotification('Upload failed. Please try again.', 'error');
              resetMemberImageUpload(preview, progress);
            }
          });

          // Upload error
          xhr.addEventListener('error', () => {
            showNotification('Upload failed. Please check your connection.', 'error');
            resetMemberImageUpload(preview, progress);
          });

          // Start upload
          xhr.open('POST', 'https://api.cloudinary.com/v1_1/dusod9wxt/upload', true);
          xhr.send(formData);
        }

        // Show member image upload success
        function showMemberImageSuccess(preview, progress, url, urlInput) {
          preview.innerHTML = `
            <img src="${url}" alt="Uploaded Image" class="preview-image">
            <div class="preview-overlay" style="opacity: 1; background: rgba(40, 167, 69, 0.9);">
              <i class="fas fa-check-circle" style="color: white;"></i>
              <p>Upload Successful!</p>
              <small>Image uploaded to Cloudinary</small>
            </div>
          `;

          // Set the URL input value
          urlInput.value = url;
          urlInput.style.backgroundColor = '#d4edda';
          urlInput.style.border = '1px solid #c3e6cb';

          progress.style.display = 'none';
          showNotification('Image uploaded successfully!', 'success');
        }

        // Reset member image upload
        function resetMemberImageUpload(preview, progress) {
          preview.innerHTML = `
            <div class="preview-overlay">
              <i class="fas fa-cloud-upload-alt"></i>
              <p>Click or drag to upload photo</p>
              <small>JPEG, PNG, JPG, WebP (max 10MB)</small>
            </div>
          `;
          progress.style.display = 'none';
        }

        // Show add member modal
        function showAddMemberModal() {
          isEditMode = false;
          currentMemberId = null;
          document.getElementById('modalTitle').textContent = 'Add Team Member';
          document.getElementById('memberForm').reset();

          // Reset image upload section
          const imagePreview = document.getElementById('memberImagePreview');
          const imageProgress = document.getElementById('memberImageProgress');
          const imageUrlInput = document.getElementById('memberImageUrl');

          if (imagePreview) {
            imagePreview.innerHTML = `
              <div class="preview-overlay">
                <i class="fas fa-cloud-upload-alt"></i>
                <p>Click or drag to upload photo</p>
                <small>JPEG, PNG, JPG, WebP (max 10MB)</small>
              </div>
            `;
          }

          if (imageProgress) {
            imageProgress.style.display = 'none';
          }

          if (imageUrlInput) {
            imageUrlInput.style.backgroundColor = '';
            imageUrlInput.style.border = '';
          }

          // Lazy-init Bootstrap modal instance if bootstrap is now available
          if (!window.memberModalInstance && typeof bootstrap !== 'undefined' && bootstrap.Modal) {
            window.memberModalInstance = bootstrap.Modal.getOrCreateInstance(document.getElementById('memberModal'));
            console.log('memberModal instance created lazily');
          }

          // Use Bootstrap modal API to show
          if (window.memberModalInstance && typeof window.memberModalInstance.show === 'function') {
            window.memberModalInstance.show();
            console.log('Bootstrap modal shown');
          } else {
            // Fallback to direct element manipulation if Bootstrap not available
            const modal = document.getElementById('memberModal');
            if (modal) {
              modal.style.display = 'flex';
              modal.classList.add('show');
              console.log('Fallback modal shown');
            }
          }
        }

        // Show edit member modal
        async function editMember(memberId) {
          try {
            const response = await fetch(`/admin/team-management/${memberId}`);
            const member = await response.json();

            if (member.success) {
              isEditMode = true;
              currentMemberId = memberId;

              // Populate form with member data
              document.getElementById('modalTitle').textContent = 'Edit Team Member';

              // Fill form fields
              document.querySelector('input[name="name"]').value = member.data.name;
              document.querySelector('input[name="position"]').value = member.data.position;
              document.querySelector('input[name="fallbackInitials"]').value = member.data.fallbackInitials;
              document.querySelector('input[name="image"]').value = member.data.image || '';
              document.querySelector('input[name="displayOrder"]').value = member.data.displayOrder;
              document.querySelector('select[name="isActive"]').value = member.data.isActive;

              // Handle image preview for edit mode
              if (member.data.image) {
                const imagePreview = document.getElementById('memberImagePreview');
                imagePreview.innerHTML = `
                  <img src="${member.data.image}" alt="Current Image" class="preview-image">
                  <div class="preview-overlay" style="opacity: 0.7;">
                    <i class="fas fa-edit"></i>
                    <p>Current Image</p>
                    <small>Click to upload new image</small>
                  </div>
                `;
              }

              // Lazy-init bootstrap modal if needed
              if (!window.memberModalInstance && typeof bootstrap !== 'undefined' && bootstrap.Modal) {
                window.memberModalInstance = bootstrap.Modal.getOrCreateInstance(document.getElementById('memberModal'));
                console.log('memberModal instance created lazily for edit');
              }

              // Show using Bootstrap modal instance
              if (window.memberModalInstance && typeof window.memberModalInstance.show === 'function') {
                window.memberModalInstance.show();
                console.log('Bootstrap modal shown for edit');
              } else {
                const modal = document.getElementById('memberModal');
                if (modal) {
                  modal.style.display = 'flex';
                  modal.classList.add('show');
                  console.log('Fallback modal shown for edit');
                }
              }
            } else {
              showNotification('Failed to load member data', 'error');
            }
          } catch (error) {
            console.error('Error loading member data:', error);
            showNotification('Failed to load member data', 'error');
          }
        }

        // Hide member modal
        function hideMemberModal() {
          if (window.memberModalInstance && typeof window.memberModalInstance.hide === 'function') {
            window.memberModalInstance.hide();
            console.log('Bootstrap modal hidden');
            return;
          }

          const modal = document.getElementById('memberModal');
          if (modal) {
            modal.classList.remove('show');
            modal.style.display = 'none';
            console.log('Fallback modal hidden');
          }
        }

        // Handle form submission
        async function handleFormSubmit(event) {
          event.preventDefault();

          const form = document.getElementById('memberForm');
          const formData = new FormData(form);
          const submitButton = document.getElementById('submitButton');
          const buttonText = submitButton.querySelector('.button-text');
          const buttonLoading = submitButton.querySelector('.button-loading');

          // Show loading state
          submitButton.disabled = true;
          buttonText.style.display = 'none';
          buttonLoading.style.display = 'inline-block';

          try {
            // Prepare data object
            const data = {
              name: formData.get('name'),
              position: formData.get('position'),
              image: formData.get('image'),
              fallbackInitials: formData.get('fallbackInitials'),
              displayOrder: formData.get('displayOrder'),
              isActive: formData.get('isActive')
            };

            console.log('Submitting data:', data);

            let url, method;
            if (isEditMode && currentMemberId) {
              url = `/admin/team-management/${currentMemberId}`;
              method = 'PUT';
            } else {
              url = '/admin/team-management';
              method = 'POST';
            }

            const response = await fetch(url, {
              method: method,
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
              showNotification(result.message, 'success');
              hideMemberModal();
              // Reload the page to show the new/updated member
              setTimeout(() => location.reload(), 1000);
            } else {
              showNotification(result.message, 'error');
              console.error('Server error:', result);
            }
          } catch (error) {
            console.error('Error submitting form:', error);
            showNotification('Failed to save member. Please try again.', 'error');
          } finally {
            // Reset button state
            submitButton.disabled = false;
            buttonText.style.display = 'inline-block';
            buttonLoading.style.display = 'none';
          }
        }

        // Add form submission event listener
        document.addEventListener('DOMContentLoaded', function() {
          const form = document.getElementById('memberForm');
          if (form) {
            form.addEventListener('submit', handleFormSubmit);
          }

          // Set fallback visibility from data attributes
          const fallbacks = document.querySelectorAll('.fallback[data-visible]');
          fallbacks.forEach(fallback => {
            const visible = fallback.getAttribute('data-visible') === 'true';
            fallback.style.display = visible ? 'flex' : 'none';
          });
        });

        // Delete member
        function deleteMember(memberId) {
          if (confirm('Are you sure you want to delete this team member? This action cannot be undone.')) {
            fetch(`/admin/team-management/${memberId}`, {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',
                }
              })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  showNotification(data.message, 'success');
                  setTimeout(() => location.reload(), 1000);
                } else {
                  showNotification(data.message, 'error');
                }
              })
              .catch(error => {
                console.error('Error:', error);
                showNotification('Failed to delete member', 'error');
              });
          }
        }

        // Export members data
        function exportTeamMembers() {
          try {
            const currentUrl = new URL(window.location.href);
            const exportUrl = new URL('/admin/team-management/export', window.location.origin);
            
            // Copy search parameters
            currentUrl.searchParams.forEach((value, key) => {
              exportUrl.searchParams.set(key, value);
            });
            
            // Ensure CSV format
            exportUrl.searchParams.set('format', 'csv');

            // Show loading state
            const exportBtn = document.querySelector('.btn-export');
            if (exportBtn) {
              const originalText = exportBtn.innerHTML;
              exportBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Exporting...';
              exportBtn.disabled = true;

              // Reset button after a delay
              setTimeout(() => {
                exportBtn.innerHTML = originalText;
                exportBtn.disabled = false;
              }, 3000);
            }

            // Create a temporary link to trigger download
            const link = document.createElement('a');
            link.href = exportUrl.toString();
            link.download = `team-members-report-${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          } catch (error) {
            console.error('Error exporting team members:', error);
            // Reset button on error
            const exportBtn = document.querySelector('.btn-export');
            if (exportBtn) {
              exportBtn.innerHTML = '<i class="fas fa-file-excel"></i> Export Excel Report';
              exportBtn.disabled = false;
            }
          }
        }

        // Show notification
        function showNotification(message, type) {
          const notification = document.createElement('div');
          notification.className = `notification ${type === 'success' ? 'success-message' : 'error-message'}`;
          notification.textContent = message;

          document.body.appendChild(notification);

          setTimeout(() => {
            notification.classList.add('show');
          }, 100);

          setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
          }, 3000);
        }

        // Close modal on escape key using Bootstrap instance
        document.addEventListener('keydown', function(e) {
          if (e.key === 'Escape') {
            if (window.memberModalInstance && typeof window.memberModalInstance.hide === 'function') {
              window.memberModalInstance.hide();
            } else {
              hideMemberModal();
            }
          }
        });

        // Drag and drop functionality
        let draggedElement = null;

        document.addEventListener('DOMContentLoaded', function() {
          const grid = document.getElementById('teamMembersGrid');

          if (grid) {
            grid.addEventListener('dragstart', function(e) {
              if (e.target.classList.contains('draggable')) {
                draggedElement = e.target;
                e.target.classList.add('dragging');
              }
            });

            grid.addEventListener('dragend', function(e) {
              if (e.target.classList.contains('draggable')) {
                e.target.classList.remove('dragging');
                draggedElement = null;
              }
            });

            grid.addEventListener('dragover', function(e) {
              e.preventDefault();
            });

            grid.addEventListener('drop', function(e) {
              e.preventDefault();
              if (draggedElement && e.target.classList.contains('team-member-card')) {
                // Handle reordering logic here
                console.log('Reordering team members...');
              }
            });
          }
        });
      </script>

    </div> <!-- admin-content -->
  </main> <!-- admin-main -->
</div> <!-- admin-layout -->

<%- include('partials/admin-footer') %>
