<%- include('./partials/admin-header') %>

<!-- Admin Layout -->
<div class="admin-layout">
  
  <!-- Sidebar -->
  <%- include('./partials/admin-sidebar', { currentPage: 'courses' }) %>
  
  <!-- Main Content -->
  <main class="admin-main">
    
    <!-- Top Bar -->
    <%- include('./partials/admin-topbar', { 
        breadcrumb: `Courses / ${course.title} / ${topic.title}`,
        breadcrumbSubtitle: 'Edit Content Item',
        showSearch: false
    }) %>
    <!-- Content Area -->
    <div class="admin-content">
      <div class="admin-dashboard admin-fade-in">
        
        <!-- Content Edit Header -->
        <div class="content-edit-header">
          <div class="content-edit-header-content">
            <div class="d-flex justify-content-between align-items-start">
              <div>
                <h1 class="content-title">
                  <i class="fas fa-<%= getContentIcon(contentItem.type) %> me-2"></i>
                  Edit <%= contentItem.type.charAt(0).toUpperCase() + contentItem.type.slice(1) %> Content
                </h1>
                <p class="content-subtitle">
                  <strong><%= contentItem.title %></strong>
                </p>
                <div class="content-badges">
                  <span class="badge bg-<%= getContentTypeColor(contentItem.type) %>">
                    <i class="fas fa-<%= getContentIcon(contentItem.type) %> me-1"></i>
                    <%= contentItem.type.charAt(0).toUpperCase() + contentItem.type.slice(1) %>
                  </span>
                  <% if (contentItem.duration > 0) { %>
                    <span class="badge bg-info">
                      <i class="fas fa-clock me-1"></i>
                      <%= contentItem.duration %> minutes
                    </span>
                  <% } %>
                  <span class="badge bg-<%= contentItem.isRequired ? 'success' : 'secondary' %>">
                    <%= contentItem.isRequired ? 'Required' : 'Optional' %>
                  </span>
                </div>
              </div>
              <div class="content-actions">
                <a href="/admin/courses/<%= course.courseCode %>/content" class="btn btn-outline-secondary">
                  <i class="fas fa-arrow-left me-2"></i>
                  Back to Course
                </a>
                <button class="btn btn-primary" id="saveContentChangesBtn">
                  <i class="fas fa-save me-2"></i>
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Content Edit Form -->
        <div class="content-edit-form">
          <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
            <!-- Quiz/Homework Content Edit -->
            <div class="row">
              <div class="col-lg-8">
                <!-- Basic Information -->
                <div class="admin-form-section">
                  <h6 class="admin-form-section-title">
                    <i class="fas fa-info-circle me-2"></i>
                    Content Information
                  </h6>
                  
                  <div class="row">
                    <div class="col-md-6">
                      <div class="admin-form-group">
                        <label for="contentTitle" class="admin-form-label">
                          <i class="fas fa-heading me-2"></i>
                          Content Title
                        </label>
                        <input type="text" class="admin-form-control" id="contentTitle" value="<%= contentItem.title %>" required>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="admin-form-group">
                        <label for="contentDuration" class="admin-form-label">
                          <i class="fas fa-clock me-2"></i>
                          Duration (minutes)
                        </label>
                        <input type="number" class="admin-form-control" id="contentDuration" value="<%= contentItem.duration || 0 %>" min="0">
                      </div>
                    </div>
                  </div>
                  
                  <div class="admin-form-group">
                    <label for="contentDescription" class="admin-form-label">
                      <i class="fas fa-align-left me-2"></i>
                      Description
                    </label>
                    <textarea class="admin-form-control" id="contentDescription" rows="3"><%= contentItem.description || '' %></textarea>
                  </div>
                  
                  <div class="row">
                    <div class="col-md-6">
                      <div class="admin-form-group">
                        <label for="contentOrder" class="admin-form-label">
                          <i class="fas fa-sort-numeric-up me-2"></i>
                          Order
                        </label>
                        <input type="number" class="admin-form-control" id="contentOrder" value="<%= contentItem.order || 1 %>" min="1">
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="admin-form-group">
                        <label for="contentDifficulty" class="admin-form-label">
                          <i class="fas fa-signal me-2"></i>
                          Difficulty
                        </label>
                        <select class="admin-form-control" id="contentDifficulty">
                          <option value="beginner" <%= contentItem.difficulty === 'beginner' ? 'selected' : '' %>>Beginner</option>
                          <option value="intermediate" <%= contentItem.difficulty === 'intermediate' ? 'selected' : '' %>>Intermediate</option>
                          <option value="advanced" <%= contentItem.difficulty === 'advanced' ? 'selected' : '' %>>Advanced</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  
                  <div class="admin-form-group">
                    <div class="admin-form-check">
                      <input type="checkbox" class="admin-form-check-input" id="contentIsRequired" <%= contentItem.isRequired ? 'checked' : '' %>>
                      <label class="admin-form-check-label" for="contentIsRequired">
                        Required content
                      </label>
                    </div>
                  </div>
                </div>

                <!-- Question Bank Information -->
                <% if (currentBank) { %>
                <div class="admin-form-section">
                  <h6 class="admin-form-section-title">
                    <i class="fas fa-database me-2"></i>
                    Question Bank Information
                  </h6>
                  
                  <div class="question-bank-info-card">
                    <div class="bank-header">
                      <h5><%= currentBank.name %></h5>
                      <span class="bank-code"><%= currentBank.bankCode %></span>
                    </div>
                    <p class="bank-description"><%= currentBank.description || 'No description available' %></p>
                    <div class="bank-stats">
                      <div class="stat-item">
                        <i class="fas fa-question-circle"></i>
                        <span><%= currentBank.totalQuestions || 0 %> Total Questions</span>
                      </div>
                      <div class="stat-item">
                        <i class="fas fa-check-circle"></i>
                        <span><%= currentQuestions.length %> Selected</span>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Selected Questions Display -->
                <% if (currentQuestions && currentQuestions.length > 0) { %>
                <div class="admin-form-section">
                  <h6 class="admin-form-section-title">
                    <i class="fas fa-list me-2"></i>
                    Selected Questions
                  </h6>
                  
                  <div class="selected-questions-grid">
                    <% currentQuestions.forEach((question, index) => { %>
                    <div class="question-circle" data-question-id="<%= question._id %>">
                      <div class="question-circle-number"><%= index + 1 %></div>
                      <div class="question-circle-meta">
                        <div class="question-circle-difficulty <%= question.difficulty ? question.difficulty.toLowerCase() : 'medium' %>"></div>
                        <div class="question-circle-type"><%= question.questionType.charAt(0).toUpperCase() %></div>
                      </div>
                      <div class="question-circle-preview" onclick="previewQuestion('<%= question._id %>')">
                        <i class="fas fa-eye"></i>
                      </div>
                    </div>
                    <% }); %>
                  </div>
                </div>
                <% } %>
                <% } %>
              </div>
              
              <div class="col-lg-4">
                <!-- Settings Panel -->
                <div class="admin-form-section">
                  <h6 class="admin-form-section-title">
                    <i class="fas fa-cog me-2"></i>
                    <%= contentItem.type === 'quiz' ? 'Quiz Settings' : 'Homework Settings' %>
                  </h6>
                  
                  <% if (contentItem.type === 'quiz') { %>
                    <!-- Quiz Settings -->
                    <div class="admin-form-group">
                      <label for="quizTimeLimit" class="admin-form-label">
                        <i class="fas fa-clock me-2"></i>
                        Time Limit (minutes)
                      </label>
                      <input type="number" class="admin-form-control" id="quizTimeLimit" 
                             value="<%= contentItem.quizSettings?.timeLimit || 0 %>" min="0" max="300">
                      <small class="admin-form-text">0 = No time limit</small>
                    </div>
                    
                    <div class="admin-form-group">
                      <label for="quizPassingScore" class="admin-form-label">
                        <i class="fas fa-percentage me-2"></i>
                        Passing Score (%)
                      </label>
                      <input type="number" class="admin-form-control" id="quizPassingScore" 
                             value="<%= contentItem.quizSettings?.passingScore || 60 %>" min="0" max="100">
                    </div>
                    
                    <div class="admin-form-group">
                      <label for="quizMaxAttempts" class="admin-form-label">
                        <i class="fas fa-redo me-2"></i>
                        Max Attempts
                      </label>
                      <input type="number" class="admin-form-control" id="quizMaxAttempts" 
                             value="<%= contentItem.quizSettings?.maxAttempts || 1 %>" min="1" max="10">
                    </div>
                    
                    <div class="admin-form-group">
                      <label for="quizInstructions" class="admin-form-label">
                        <i class="fas fa-info-circle me-2"></i>
                        Instructions
                      </label>
                      <textarea class="admin-form-control" id="quizInstructions" rows="3" 
                                placeholder="Optional instructions for students"><%= contentItem.quizSettings?.instructions || '' %></textarea>
                    </div>
                    
                    <div class="admin-form-group">
                      <div class="quiz-options">
                        <div class="admin-form-check">
                          <input type="checkbox" class="admin-form-check-input" id="quizShuffleQuestions" 
                                 <%= contentItem.quizSettings?.shuffleQuestions ? 'checked' : '' %>>
                          <label class="admin-form-check-label" for="quizShuffleQuestions">
                            Shuffle Questions
                          </label>
                        </div>
                        <div class="admin-form-check">
                          <input type="checkbox" class="admin-form-check-input" id="quizShuffleOptions" 
                                 <%= contentItem.quizSettings?.shuffleOptions ? 'checked' : '' %>>
                          <label class="admin-form-check-label" for="quizShuffleOptions">
                            Shuffle Answer Options
                          </label>
                        </div>
                        <div class="admin-form-check">
                          <input type="checkbox" class="admin-form-check-input" id="quizShowCorrectAnswers" 
                                 <%= contentItem.quizSettings?.showCorrectAnswers ? 'checked' : '' %>>
                          <label class="admin-form-check-label" for="quizShowCorrectAnswers">
                            Show Correct Answers
                          </label>
                        </div>
                        <div class="admin-form-check">
                          <input type="checkbox" class="admin-form-check-input" id="quizShowResults" 
                                 <%= contentItem.quizSettings?.showResults ? 'checked' : '' %>>
                          <label class="admin-form-check-label" for="quizShowResults">
                            Show Results Immediately
                          </label>
                        </div>
                      </div>
                    </div>
                  <% } else if (contentItem.type === 'homework') { %>
                    <!-- Homework Settings -->
                    <div class="admin-form-group">
                      <label for="homeworkPassingScore" class="admin-form-label">
                        <i class="fas fa-percentage me-2"></i>
                        Passing Score (%)
                      </label>
                      <input type="number" class="admin-form-control" id="homeworkPassingScore" 
                             value="<%= contentItem.homeworkSettings?.passingScore || 60 %>" min="0" max="100">
                    </div>
                    
                    <div class="admin-form-group">
                      <label for="homeworkMaxAttempts" class="admin-form-label">
                        <i class="fas fa-redo me-2"></i>
                        Max Attempts
                      </label>
                      <input type="number" class="admin-form-control" id="homeworkMaxAttempts" 
                             value="<%= contentItem.homeworkSettings?.maxAttempts || 1 %>" min="1" max="5">
                    </div>
                    
                    <div class="admin-form-group">
                      <label for="homeworkInstructions" class="admin-form-label">
                        <i class="fas fa-info-circle me-2"></i>
                        Instructions
                      </label>
                      <textarea class="admin-form-control" id="homeworkInstructions" rows="3" 
                                placeholder="Optional instructions for students"><%= contentItem.homeworkSettings?.instructions || '' %></textarea>
                    </div>
                    
                    <div class="admin-form-group">
                      <div class="homework-options">
                        <div class="admin-form-check">
                          <input type="checkbox" class="admin-form-check-input" id="homeworkShuffleQuestions" 
                                 <%= contentItem.homeworkSettings?.shuffleQuestions ? 'checked' : '' %>>
                          <label class="admin-form-check-label" for="homeworkShuffleQuestions">
                            Shuffle Questions
                          </label>
                        </div>
                        <div class="admin-form-check">
                          <input type="checkbox" class="admin-form-check-input" id="homeworkShowCorrectAnswers" 
                                 <%= contentItem.homeworkSettings?.showCorrectAnswers ? 'checked' : '' %>>
                          <label class="admin-form-check-label" for="homeworkShowCorrectAnswers">
                            Show Correct Answers
                          </label>
                        </div>
                      </div>
                    </div>
                  <% } %>
                </div>
              </div>
            </div>
          <% } else { %>
            <!-- Media Content Edit (Video, PDF, etc.) -->
            <div class="row">
              <div class="col-lg-8">
                <!-- Basic Information -->
                <div class="admin-form-section">
                  <h6 class="admin-form-section-title">
                    <i class="fas fa-info-circle me-2"></i>
                    Content Information
                  </h6>
                  
                  <div class="row">
                    <div class="col-md-6">
                      <div class="admin-form-group">
                        <label for="contentTitle" class="admin-form-label">
                          <i class="fas fa-heading me-2"></i>
                          Content Title
                        </label>
                        <input type="text" class="admin-form-control" id="contentTitle" value="<%= contentItem.title %>" required>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="admin-form-group">
                        <label for="contentDuration" class="admin-form-label">
                          <i class="fas fa-clock me-2"></i>
                          Duration (minutes)
                        </label>
                        <input type="number" class="admin-form-control" id="contentDuration" value="<%= contentItem.duration || 0 %>" min="0">
                      </div>
                    </div>
                  </div>
                  
                  <div class="admin-form-group">
                    <label for="contentDescription" class="admin-form-label">
                      <i class="fas fa-align-left me-2"></i>
                      Description
                    </label>
                    <textarea class="admin-form-control" id="contentDescription" rows="3"><%= contentItem.description || '' %></textarea>
                  </div>
                  
                  <div class="admin-form-group">
                    <label for="contentUrl" class="admin-form-label">
                      <i class="fas fa-<%= getContentIcon(contentItem.type) %> me-2"></i>
                      <%= contentItem.type === 'video' ? 'Video URL' : contentItem.type === 'pdf' ? 'PDF URL/File' : 'Content URL' %>
                    </label>
                    <input type="text" class="admin-form-control" id="contentUrl" value="<%= contentItem.content || '' %>" required>
                    <small class="admin-form-text">
                      <% if (contentItem.type === 'video') { %>
                        Enter the video URL (YouTube, Vimeo, or direct video link)
                      <% } else if (contentItem.type === 'pdf') { %>
                        Enter the PDF URL or upload a new file
                      <% } else { %>
                        Enter the content URL or file path
                      <% } %>
                    </small>
                  </div>
                  
                  <% if (contentItem.type === 'pdf') { %>
                  <div class="admin-form-group">
                    <label class="admin-form-label">
                      <i class="fas fa-cloud-upload-alt me-2"></i>
                      Upload New File
                    </label>
                    <div class="upload-section">
                      <input type="file" id="contentFile" class="upload-input" accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.csv,.zip,.jpg,.jpeg,.png,.webp">
                      <label for="contentFile" class="upload-label">
                        <i class="fas fa-cloud-upload-alt"></i>
                        Choose File
                      </label>
                      <div id="contentFilePreview" class="upload-preview">
                        <div class="preview-overlay">
                          <i class="fas fa-cloud-upload-alt"></i>
                          <p>Click or drag to upload</p>
                          <small>PDF, DOC, DOCX, XLS, XLSX, PPT, PPTX, TXT, CSV, ZIP, Images</small>
                        </div>
                      </div>
                      <div id="contentFileProgress" class="progress-container" style="display: none;"></div>
                    </div>
                    <small class="admin-form-text">Upload a new file to replace the current one</small>
                  </div>
                  <% } %>
                </div>
              </div>
              
              <div class="col-lg-4">
                <!-- Settings Panel -->
                <div class="admin-form-section">
                  <h6 class="admin-form-section-title">
                    <i class="fas fa-cog me-2"></i>
                    Content Settings
                  </h6>
                  
                  <div class="row">
                    <div class="col-md-6">
                      <div class="admin-form-group">
                        <label for="contentOrder" class="admin-form-label">
                          <i class="fas fa-sort-numeric-up me-2"></i>
                          Order
                        </label>
                        <input type="number" class="admin-form-control" id="contentOrder" value="<%= contentItem.order || 1 %>" min="1">
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="admin-form-group">
                        <label for="contentDifficulty" class="admin-form-label">
                          <i class="fas fa-signal me-2"></i>
                          Difficulty
                        </label>
                        <select class="admin-form-control" id="contentDifficulty">
                          <option value="beginner" <%= contentItem.difficulty === 'beginner' ? 'selected' : '' %>>Beginner</option>
                          <option value="intermediate" <%= contentItem.difficulty === 'intermediate' ? 'selected' : '' %>>Intermediate</option>
                          <option value="advanced" <%= contentItem.difficulty === 'advanced' ? 'selected' : '' %>>Advanced</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  
                  <div class="admin-form-group">
                    <div class="admin-form-check">
                      <input type="checkbox" class="admin-form-check-input" id="contentIsRequired" <%= contentItem.isRequired ? 'checked' : '' %>>
                      <label class="admin-form-check-label" for="contentIsRequired">
                        Required content
                      </label>
                    </div>
                  </div>
                  
                  <div class="admin-form-group">
                    <label for="contentTags" class="admin-form-label">
                      <i class="fas fa-tags me-2"></i>
                      Tags
                    </label>
                    <input type="text" class="admin-form-control" id="contentTags" 
                           value="<%= contentItem.tags ? contentItem.tags.join(', ') : '' %>" 
                           placeholder="Enter tags separated by commas">
                    <small class="admin-form-text">Separate multiple tags with commas</small>
                  </div>
                </div>
              </div>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </main>
</div>

<!-- Question Preview Modal -->
<div class="modal fade" id="questionPreviewModal" tabindex="-1" aria-labelledby="questionPreviewModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content admin-modal-content">
      <div class="modal-header admin-modal-header">
        <h5 class="modal-title" id="questionPreviewModalLabel">
          <i class="fas fa-eye me-2"></i>
          Question Preview
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      
      <div class="modal-body admin-modal-body">
        <div id="questionPreviewContent">
          <!-- Question content will be loaded here -->
        </div>
      </div>
      
      <div class="modal-footer admin-modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<% 
// Helper function to get content icons
function getContentIcon(type) {
  const icons = {
    'video': 'play-circle',
    'pdf': 'file-pdf',
    'homework': 'tasks',
    'quiz': 'question-circle',
    'assignment': 'clipboard-list',
    'reading': 'book',
    'link': 'external-link-alt'
  };
  return icons[type] || 'file';
}

// Helper function to get content type colors
function getContentTypeColor(type) {
  const colors = {
    'video': 'primary',
    'pdf': 'danger',
    'homework': 'warning',
    'quiz': 'info',
    'assignment': 'success',
    'reading': 'secondary',
    'link': 'dark'
  };
  return colors[type] || 'secondary';
}
%>

<%- include('./partials/admin-footer') %>

<!-- Question Selection Styles -->
<link rel="stylesheet" href="/css/question-selection.css">

<!-- Content Upload Styles -->
<style>
/* Content File Upload Styles */
.content-preview {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 8px;
  border: 1px solid #dee2e6;
}

.content-preview .file-icon {
  width: 60px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #495057;
  color: white;
  border-radius: 8px;
  font-size: 1.5rem;
}

.content-preview .file-info h6 {
  margin: 0 0 0.25rem 0;
  color: #2c3e50;
  font-weight: 600;
}

.content-preview .file-info small {
  display: block;
  color: #6c757d;
  font-size: 0.85rem;
}

.content-preview .file-info .file-type {
  background: #e9ecef;
  padding: 0.125rem 0.5rem;
  border-radius: 4px;
  font-size: 0.75rem;
}

.content-preview.success .file-icon {
  background: #28a745;
}

.upload-preview {
  position: relative;
  min-height: 120px;
  border: 2px dashed #dee2e6;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  cursor: pointer;
}

.upload-preview:hover {
  border-color: #495057;
  background: #f8f9fa;
}

.upload-preview.drag-over {
  border-color: #495057;
  background: #e9ecef;
}

.preview-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: rgba(255, 255, 255, 0.9);
  color: #6c757d;
  text-align: center;
  opacity: 0.7;
  transition: opacity 0.3s ease;
}

.upload-preview:hover .preview-overlay {
  opacity: 1;
}

.preview-overlay i {
  font-size: 2rem;
  margin-bottom: 0.5rem;
}

.preview-overlay p {
  margin: 0 0 0.25rem 0;
  font-weight: 600;
}

.preview-overlay small {
  font-size: 0.8rem;
}

.progress-container {
  margin-top: 1rem;
}

.progress-bar {
  width: 100%;
  height: 8px;
  background: #e9ecef;
  border-radius: 4px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #495057, #6c757d);
  transition: width 0.3s ease;
  border-radius: 4px;
}

.progress-text {
  text-align: center;
  margin-top: 0.5rem;
  font-size: 0.9rem;
  color: #495057;
  font-weight: 600;
}

.upload-input {
  display: none;
}

.upload-label {
  display: inline-block;
  padding: 0.5rem 1rem;
  background: #495057;
  color: white;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.2s ease;
  margin-bottom: 1rem;
}

.upload-label:hover {
  background: #343a40;
}

.upload-label i {
  margin-right: 0.5rem;
}
</style>

<!-- Cloudinary Upload Script -->
<script src="/js/cloudinary-upload.js"></script>

<script>
// Pass content data to JavaScript
window.contentData = <%- JSON.stringify(contentItem) %>;
window.currentQuestions = <%- JSON.stringify(currentQuestions) %>;
</script>

<style>
/* Content Edit Page Styles */
.content-edit-header {
  background: #2c3e50;
  color: white;
  border-radius: 8px;
  margin-bottom: 2rem;
  border: 1px solid #34495e;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.content-edit-header-content {
  padding: 2rem;
}

.content-title {
  font-size: 1.75rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: #ffffff;
}

.content-subtitle {
  font-size: 1.1rem;
  opacity: 0.9;
  margin-bottom: 1rem;
}

.content-badges {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.content-actions {
  display: flex;
  gap: 0.5rem;
}

.content-actions .btn {
  border-radius: 6px;
  font-weight: 500;
  padding: 0.5rem 1rem;
}

.content-actions .btn-primary {
  background-color: #495057;
  border-color: #495057;
}

.content-actions .btn-primary:hover {
  background-color: #343a40;
  border-color: #343a40;
}

.content-actions .btn-outline-secondary {
  border-color: #6c757d;
  color: #6c757d;
}

.content-actions .btn-outline-secondary:hover {
  background-color: #6c757d;
  border-color: #6c757d;
  color: white;
}

.content-edit-form {
  background: var(--admin-card-light);
  border-radius: 8px;
  padding: 2rem;
  border: 1px solid var(--admin-border-light);
  box-shadow: var(--admin-shadow);
}

/* Enhanced form styling */
.content-edit-form .admin-form-control {
  border: 1px solid #dee2e6;
  border-radius: 6px;
  padding: 0.75rem;
  font-size: 0.9rem;
  transition: border-color 0.2s ease;
}

.content-edit-form .admin-form-control:focus {
  border-color: #495057;
  box-shadow: 0 0 0 0.2rem rgba(73, 80, 87, 0.1);
}

.content-edit-form .admin-form-label {
  font-weight: 600;
  color: #495057;
  margin-bottom: 0.5rem;
}

.content-edit-form .admin-form-section-title {
  color: #2c3e50;
  font-weight: 600;
  border-bottom: 2px solid #f8f9fa;
  padding-bottom: 0.5rem;
  margin-bottom: 1.5rem;
}

.content-edit-form .admin-form-check-input:checked {
  background-color: #495057;
  border-color: #495057;
}

/* Question Bank Info Card */
.question-bank-info-card {
  background: var(--admin-card-light);
  border: 1px solid var(--admin-border-light);
  border-radius: 6px;
  padding: 1.5rem;
  margin-bottom: 1rem;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

.bank-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.bank-header h5 {
  margin: 0;
  color: #2c3e50;
}

.bank-code {
  background: #495057;
  color: white;
  padding: 0.25rem 0.75rem;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 600;
}

.bank-description {
  color: #6c757d;
  margin-bottom: 1rem;
  line-height: 1.5;
}

.bank-stats {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.stat-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: #6c757d;
  font-size: 0.9rem;
}

.stat-item i {
  color: #495057;
}

/* Selected Questions Grid */
.selected-questions-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
  gap: 1rem;
  margin-top: 1rem;
}

.question-circle {
  position: relative;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: var(--admin-card-light);
  border: 2px solid var(--admin-border-light);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  overflow: hidden;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.question-circle:hover {
  border-color: #495057;
  transform: scale(1.02);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
}

.question-circle-number {
  font-weight: 600;
  font-size: 1.1rem;
  color: #2c3e50;
  z-index: 2;
}

.question-circle-meta {
  position: absolute;
  top: 2px;
  right: 2px;
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.question-circle-difficulty {
  width: 8px;
  height: 8px;
  border-radius: 50%;
}

.question-circle-difficulty.easy {
  background: #28a745;
}

.question-circle-difficulty.medium {
  background: #ffc107;
}

.question-circle-difficulty.hard {
  background: #dc3545;
}

.question-circle-type {
  width: 12px;
  height: 12px;
  background: #6c757d;
  color: white;
  border-radius: 2px;
  font-size: 0.6rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
}

.question-circle-preview {
  position: absolute;
  bottom: 2px;
  right: 2px;
  width: 16px;
  height: 16px;
  background: #495057;
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.6rem;
  cursor: pointer;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.question-circle:hover .question-circle-preview {
  opacity: 1;
}

/* Question Preview Styles */
.question-preview {
  padding: 1rem;
}

.question-preview-header {
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e9ecef;
}

.question-meta {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.difficulty-badge {
  padding: 0.25rem 0.75rem;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 600;
  color: white;
}

.difficulty-badge.difficulty-easy {
  background: #28a745;
}

.difficulty-badge.difficulty-medium {
  background: #ffc107;
  color: #212529;
}

.difficulty-badge.difficulty-hard {
  background: #dc3545;
}

.points-badge, .type-badge {
  padding: 0.25rem 0.75rem;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 600;
  background: #6c757d;
  color: white;
}

.question-text {
  font-size: 1.1rem;
  line-height: 1.6;
  margin-bottom: 1rem;
  color: #2c3e50;
}

.options-list {
  margin-bottom: 1.5rem;
}

.option-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem;
  margin-bottom: 0.5rem;
  background: #f8f9fa;
  border-radius: 6px;
  border: 1px solid #e9ecef;
}

.option-item.correct-option {
  background: #d4edda;
  border-color: #c3e6cb;
}

.option-letter {
  width: 24px;
  height: 24px;
  background: #6c757d;
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 0.8rem;
  flex-shrink: 0;
}

.correct-option .option-letter {
  background: #28a745;
}

.option-text {
  flex: 1;
  color: #2c3e50;
}

.explanation-text {
  background: #f8f9fa;
  padding: 1rem;
  border-radius: 6px;
  border-left: 4px solid #495057;
  color: #2c3e50;
  line-height: 1.6;
}

.question-tags {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.tag {
  background: #f8f9fa;
  color: #495057;
  padding: 0.25rem 0.75rem;
  border-radius: 4px;
  font-size: 0.8rem;
  border: 1px solid #dee2e6;
}

/* Enhanced Notification Styles */
.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 9999;
  min-width: 320px;
  max-width: 500px;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
  animation: slideInBounce 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  overflow: hidden;
}

.notification-success {
  background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
  border-left: 4px solid #28a745;
  color: #155724;
}

.notification-error {
  background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
  border-left: 4px solid #dc3545;
  color: #721c24;
}

.notification-info {
  background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
  border-left: 4px solid #17a2b8;
  color: #0c5460;
}

.notification-content {
  display: flex;
  align-items: flex-start;
  gap: 1rem;
  padding: 1.25rem;
  position: relative;
}

.notification-icon {
  flex-shrink: 0;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.875rem;
  font-weight: 600;
}

.notification-success .notification-icon {
  background: #28a745;
  color: white;
}

.notification-error .notification-icon {
  background: #dc3545;
  color: white;
}

.notification-info .notification-icon {
  background: #17a2b8;
  color: white;
}

.notification-message {
  flex: 1;
  font-weight: 500;
  line-height: 1.4;
  font-size: 0.95rem;
}

.notification-close {
  background: none;
  border: none;
  color: inherit;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 4px;
  transition: background-color 0.2s ease;
  opacity: 0.7;
  font-size: 1rem;
}

.notification-close:hover {
  opacity: 1;
  background: rgba(0, 0, 0, 0.1);
}

.notification-progress {
  position: absolute;
  bottom: 0;
  left: 0;
  height: 3px;
  background: rgba(255, 255, 255, 0.3);
  animation: progressBar 2s linear;
}

.notification-success .notification-progress {
  background: #28a745;
}

.notification-error .notification-progress {
  background: #dc3545;
}

.notification-info .notification-progress {
  background: #17a2b8;
}

@keyframes slideInBounce {
  0% {
    transform: translateX(100%) scale(0.8);
    opacity: 0;
  }
  50% {
    transform: translateX(-10px) scale(1.05);
    opacity: 0.8;
  }
  100% {
    transform: translateX(0) scale(1);
    opacity: 1;
  }
}

@keyframes progressBar {
  from {
    width: 100%;
  }
  to {
    width: 0%;
  }
}

@keyframes slideOut {
  from {
    transform: translateX(0) scale(1);
    opacity: 1;
  }
  to {
    transform: translateX(100%) scale(0.8);
    opacity: 0;
  }
}

/* Hover effects */
.notification:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
  transition: all 0.3s ease;
}

/* Mobile responsive */
@media (max-width: 768px) {
  .notification {
    top: 10px;
    right: 10px;
    left: 10px;
    min-width: auto;
    max-width: none;
  }
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid #f8f9fa;
}

.section-header h3 {
  color: #2c3e50;
  margin: 0;
}

.section-actions {
  display: flex;
  gap: 0.5rem;
}

/* Content Items Grid */
.content-items-grid {
  display: grid;
  gap: 1.5rem;
}

.content-item-card {
  background: var(--admin-card-light);
  border: 1px solid var(--admin-border-light);
  border-radius: 12px;
  padding: 1.5rem;
  transition: all 0.3s ease;
  position: relative;
}

.content-item-card:hover {
  border-color: #495057;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.content-item-header {
  display: flex;
  align-items: flex-start;
  gap: 1rem;
}

.content-type-icon {
  background: #495057;
  color: white;
  width: 50px;
  height: 50px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  flex-shrink: 0;
}

.content-info {
  flex: 1;
}

.content-title {
  font-size: 1.2rem;
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 0.5rem;
}

.content-description {
  color: #6c757d;
  margin-bottom: 0.75rem;
  line-height: 1.5;
}

.content-meta {
  display: flex;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
}

.content-duration, .content-required {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  font-size: 0.9rem;
  color: #6c757d;
}

.content-actions {
  display: flex;
  gap: 0.5rem;
  flex-shrink: 0;
}

/* Quiz/Homework Details */
.quiz-homework-details {
  margin-top: 1rem;
  padding-top: 1rem;
  border-top: 1px solid #e9ecef;
}

.quiz-settings-summary {
  display: flex;
  gap: 1.5rem;
  flex-wrap: wrap;
}

.setting-item {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  font-size: 0.9rem;
  color: #6c757d;
  background: var(--admin-card-light);
  padding: 0.5rem 0.75rem;
}

/* Dark Theme Support for Content Edit */
.dark-theme .content-edit-form {
  background: var(--admin-card-dark);
  border-color: var(--admin-border-dark);
}

.dark-theme .question-bank-info-card {
  background: var(--admin-card-dark);
  border-color: var(--admin-border-dark);
}

.dark-theme .question-circle {
  background: var(--admin-card-dark);
  border-color: var(--admin-border-dark);
}

.dark-theme .content-item-card {
  background: var(--admin-card-dark);
  border-color: var(--admin-border-dark);
}

.dark-theme .content-edit-form .form-control,
.dark-theme .content-edit-form .form-select {
  background: var(--admin-card-dark);
  border-color: var(--admin-border-dark);
  color: var(--admin-text-dark);
}

.dark-theme .content-edit-form .form-control:focus,
.dark-theme .content-edit-form .form-select:focus {
  border-color: var(--admin-primary);
  box-shadow: 0 0 0 0.2rem rgba(184, 1, 1, 0.25);
}

.dark-theme .content-edit-form label {
  color: var(--admin-text-dark);
}

.dark-theme .content-edit-form .text-muted {
  color: var(--admin-text-dark) !important;
  opacity: 0.7;
}

.dark-theme .admin-modal-content {
  background: var(--admin-card-dark);
}

.dark-theme .admin-modal-header {
  background: linear-gradient(135deg, var(--admin-primary), #dc2626);
  border-bottom-color: var(--admin-border-dark);
}

.dark-theme .admin-modal-body {
  background: var(--admin-card-dark);
  color: var(--admin-text-dark);
}

.dark-theme .admin-modal-footer {
  background: var(--admin-card-dark);
  border-top-color: var(--admin-border-dark);
}

.dark-theme .content-preview {
  background: var(--admin-card-dark);
  border-color: var(--admin-border-dark);
  border-radius: 4px;
  border: 1px solid #dee2e6;
}

/* Content Preview */
.content-preview {
  margin-top: 1rem;
  padding-top: 1rem;
  border-top: 1px solid #e9ecef;
}

.video-preview, .pdf-preview, .link-preview {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: #6c757d;
  font-size: 0.9rem;
}

/* Empty State */
.empty-content-state {
  text-align: center;
  padding: 3rem;
  color: #6c757d;
}

.empty-state-icon {
  font-size: 4rem;
  color: #dee2e6;
  margin-bottom: 1rem;
}

.empty-content-state h4 {
  color: #495057;
  margin-bottom: 1rem;
}

.empty-content-state p {
  margin-bottom: 1.5rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .topic-edit-header-content {
    padding: 1.5rem;
  }
  
  .topic-edit-header-content .d-flex {
    flex-direction: column;
    gap: 1rem;
  }
  
  .topic-actions {
    width: 100%;
    justify-content: stretch;
  }
  
  .topic-actions .btn {
    flex: 1;
  }
  
  .content-item-header {
    flex-direction: column;
    align-items: stretch;
    text-align: center;
  }
  
  .content-type-icon {
    align-self: center;
  }
  
  .content-actions {
    justify-content: center;
    margin-top: 1rem;
  }
  
  .quiz-settings-summary {
    justify-content: center;
  }
  
  .section-header {
    flex-direction: column;
    align-items: stretch;
    gap: 1rem;
  }
  
  .section-actions {
    justify-content: center;
  }
}

@media (max-width: 576px) {
  .content-meta {
    justify-content: center;
  }
  
  .quiz-settings-summary {
    flex-direction: column;
    align-items: center;
  }
  
  .setting-item {
    justify-content: center;
  }
}
</style>

<script>
// Content Edit Page JavaScript

// Add new content
function addNewContent() {
  // This will open the enhanced modal from the course-content.ejs
  // We need to implement the modal here or redirect
  window.location.href = `/admin/courses/<%= course.courseCode %>/content?addContent=<%= topic._id %>`;
}

// Edit content item
function editContent(contentId) {
  currentEditingContentId = contentId;
  
  // Find the content item
  const contentItem = findContentItem(contentId);
  if (!contentItem) {
    showNotification('Content item not found', 'error');
    return;
  }
  
  // Load edit form based on content type
  loadContentEditForm(contentItem);
  
  // Show modal
  const modal = new bootstrap.Modal(document.getElementById('editContentModal'));
  modal.show();
}

// Delete content item
function deleteContent(contentId) {
  if (confirm('Are you sure you want to delete this content item? This action cannot be undone.')) {
    // Make API call to delete content
    fetch(`/admin/courses/<%= course.courseCode %>/topics/<%= topic._id %>/content/${contentId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showNotification('Content deleted successfully', 'success');
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        showNotification(data.message || 'Error deleting content', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showNotification('Error deleting content', 'error');
    });
  }
}

// Duplicate content item
function duplicateContent(contentId) {
  const contentItem = findContentItem(contentId);
  if (!contentItem) {
    showNotification('Content item not found', 'error');
    return;
  }
  
  // Create a copy with modified title
  const duplicatedContent = {
    ...contentItem,
    title: contentItem.title + ' (Copy)',
    order: (contentItem.order || 0) + 1
  };
  
  // Make API call to create duplicate
  fetch(`/admin/courses/<%= course.courseCode %>/topics/<%= topic._id %>/content/create`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(duplicatedContent)
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showNotification('Content duplicated successfully', 'success');
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      showNotification(data.message || 'Error duplicating content', 'error');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showNotification('Error duplicating content', 'error');
  });
}

// Move content item (placeholder)
function moveContent(contentId) {
  showNotification('Move content feature coming soon!', 'info');
}

// View content details (placeholder)
function viewContentDetails(contentId) {
  const contentItem = findContentItem(contentId);
  if (contentItem) {
    alert(`Content Details:\n\nTitle: ${contentItem.title}\nType: ${contentItem.type}\nDescription: ${contentItem.description || 'No description'}\nDuration: ${contentItem.duration || 0} minutes\nRequired: ${contentItem.isRequired ? 'Yes' : 'No'}`);
  }
}

// Reorder content (placeholder)
function reorderContent() {
  showNotification('Reorder content feature coming soon!', 'info');
}

// Preview topic (placeholder)
function previewTopic() {
  showNotification('Preview feature coming soon!', 'info');
}

// Helper function to find content item by ID
function findContentItem(contentId) {
  return window.topicData.content.find(item => item._id === contentId);
}

// Load content edit form based on type
function loadContentEditForm(contentItem) {
  const editForm = document.getElementById('contentEditForm');
  
  if (contentItem.type === 'quiz' || contentItem.type === 'homework') {
    editForm.innerHTML = `
      <div class="row">
        <div class="col-md-8">
          <div class="admin-form-section">
            <h6 class="admin-form-section-title">
        <i class="fas fa-info-circle me-2"></i>
              Content Information
            </h6>
            
            <div class="admin-form-group">
              <label for="editTitle" class="admin-form-label">
                <i class="fas fa-heading me-2"></i>
                Content Title
              </label>
              <input type="text" class="admin-form-control" id="editTitle" value="${contentItem.title}" required>
      </div>
            
            <div class="admin-form-group">
              <label for="editDescription" class="admin-form-label">
                <i class="fas fa-align-left me-2"></i>
                Description
              </label>
              <textarea class="admin-form-control" id="editDescription" rows="3">${contentItem.description || ''}</textarea>
          </div>

            <!-- Question Bank Info -->
            <div id="editQuestionBankInfo" class="question-bank-info">
              <div class="bank-info-card">
                <div class="bank-header">
                  <h6 id="editBankName">Question Bank Name</h6>
                  <span id="editBankCode" class="bank-code"></span>
          </div>
                <div class="bank-stats">
                  <span class="stat-item">
                    <i class="fas fa-question-circle"></i>
                    <span id="editTotalQuestions">0</span> Total Questions
                  </span>
                  <span class="stat-item">
                    <i class="fas fa-check-circle"></i>
                    <span id="editSelectedCount">0</span> Selected
                  </span>
        </div>
          </div>
            </div>

            <!-- Questions List -->
            <div id="editQuestionsList" class="questions-list">
              <div class="questions-header">
                <h6><i class="fas fa-list me-2"></i>Available Questions</h6>
                <div class="questions-filters">
                  <select id="editDifficultyFilter" class="form-select form-select-sm">
                    <option value="">All Difficulties</option>
                    <option value="Easy">Easy</option>
                    <option value="Medium">Medium</option>
                    <option value="Hard">Hard</option>
                  </select>
                  <input type="text" id="editSearchQuestions" placeholder="Search questions..." class="form-control form-control-sm">
                </div>
              </div>
              <div id="editQuestionsContainer" class="questions-grid">
                <!-- Questions will be loaded here as numbered circles -->
              </div>
            </div>

            <!-- Selected Questions Summary -->
            <div id="editSelectedQuestionsSummary" class="selected-questions-summary">
              <div class="summary-header">
                <h6><i class="fas fa-check-circle me-2"></i>Selected Questions Summary</h6>
                <span id="editSelectedCountBadge" class="badge bg-primary">0 selected</span>
              </div>
              <div id="editSelectedQuestionsList" class="selected-questions-list">
                <!-- Selected questions will be shown here -->
              </div>
            </div>

            <!-- Hidden input for selected questions -->
            <input type="hidden" id="editSelectedQuestions" name="selectedQuestions">
          </div>
        </div>
        
        <div class="col-md-4">
          <div class="admin-form-section">
            <h6 class="admin-form-section-title">
              <i class="fas fa-cog me-2"></i>
              Content Settings
            </h6>
            
            <div class="admin-form-group">
              <label for="editDuration" class="admin-form-label">
                <i class="fas fa-clock me-2"></i>
                Duration (minutes)
              </label>
              <input type="number" class="admin-form-control" id="editDuration" value="${contentItem.duration || 0}" min="0">
            </div>
            
            <div class="admin-form-group">
              <label for="editOrder" class="admin-form-label">
                <i class="fas fa-sort-numeric-up me-2"></i>
                Order
              </label>
              <input type="number" class="admin-form-control" id="editOrder" value="${contentItem.order || 1}" min="1">
            </div>
            
            <div class="admin-form-group">
              <div class="admin-form-check">
                <input type="checkbox" class="admin-form-check-input" id="editIsRequired" ${contentItem.isRequired ? 'checked' : ''}>
                <label class="admin-form-check-label" for="editIsRequired">
                  Required content
                </label>
              </div>
            </div>

            <!-- Quiz Settings -->
            ${contentItem.type === 'quiz' ? `
            <div class="quiz-settings-section">
              <h6 class="admin-form-section-title">
                <i class="fas fa-cog me-2"></i>
                Quiz Settings
              </h6>
              
              <div class="admin-form-group">
                <label for="editQuizTimeLimit" class="admin-form-label">
                  <i class="fas fa-clock me-2"></i>
                  Time Limit (minutes)
                </label>
                <input type="number" class="admin-form-control" id="editQuizTimeLimit" value="${contentItem.quizSettings?.timeLimit || 0}" min="0" max="300">
                <small class="admin-form-text">0 = No time limit</small>
              </div>
              
              <div class="admin-form-group">
                <label for="editQuizPassingScore" class="admin-form-label">
                  <i class="fas fa-percentage me-2"></i>
                  Passing Score (%)
                </label>
                <input type="number" class="admin-form-control" id="editQuizPassingScore" value="${contentItem.quizSettings?.passingScore || 60}" min="0" max="100">
              </div>
              
              <div class="admin-form-group">
                <label for="editQuizMaxAttempts" class="admin-form-label">
                  <i class="fas fa-redo me-2"></i>
                  Max Attempts
                </label>
                <input type="number" class="admin-form-control" id="editQuizMaxAttempts" value="${contentItem.quizSettings?.maxAttempts || 1}" min="1" max="10">
              </div>
              
              <div class="admin-form-group">
                <label for="editQuizInstructions" class="admin-form-label">
                  <i class="fas fa-info-circle me-2"></i>
                  Instructions
                </label>
                <textarea class="admin-form-control" id="editQuizInstructions" rows="2" placeholder="Optional instructions for students">${contentItem.quizSettings?.instructions || ''}</textarea>
              </div>
              
              <div class="admin-form-group">
                <div class="quiz-options">
                  <div class="admin-form-check">
                    <input type="checkbox" class="admin-form-check-input" id="editQuizShuffleQuestions" ${contentItem.quizSettings?.shuffleQuestions ? 'checked' : ''}>
                    <label class="admin-form-check-label" for="editQuizShuffleQuestions">
                      Shuffle Questions
                    </label>
                  </div>
                  <div class="admin-form-check">
                    <input type="checkbox" class="admin-form-check-input" id="editQuizShuffleOptions" ${contentItem.quizSettings?.shuffleOptions ? 'checked' : ''}>
                    <label class="admin-form-check-label" for="editQuizShuffleOptions">
                      Shuffle Answer Options
                    </label>
                  </div>
                  <div class="admin-form-check">
                    <input type="checkbox" class="admin-form-check-input" id="editQuizShowCorrectAnswers" ${contentItem.quizSettings?.showCorrectAnswers ? 'checked' : ''}>
                    <label class="admin-form-check-label" for="editQuizShowCorrectAnswers">
                      Show Correct Answers
                    </label>
                  </div>
                  <div class="admin-form-check">
                    <input type="checkbox" class="admin-form-check-input" id="editQuizShowResults" ${contentItem.quizSettings?.showResults ? 'checked' : ''}>
                    <label class="admin-form-check-label" for="editQuizShowResults">
                      Show Results Immediately
                    </label>
                  </div>
                </div>
              </div>
            </div>
            ` : ''}

            <!-- Homework Settings -->
            ${contentItem.type === 'homework' ? `
            <div class="homework-settings-section">
              <h6 class="admin-form-section-title">
                <i class="fas fa-tasks me-2"></i>
                Homework Settings
              </h6>
              
              <div class="admin-form-group">
                <label for="editHomeworkPassingScore" class="admin-form-label">
                  <i class="fas fa-percentage me-2"></i>
                  Passing Score (%)
                </label>
                <input type="number" class="admin-form-control" id="editHomeworkPassingScore" value="${contentItem.homeworkSettings?.passingScore || 60}" min="0" max="100">
              </div>
              
              <div class="admin-form-group">
                <label for="editHomeworkMaxAttempts" class="admin-form-label">
                  <i class="fas fa-redo me-2"></i>
                  Max Attempts
                </label>
                <input type="number" class="admin-form-control" id="editHomeworkMaxAttempts" value="${contentItem.homeworkSettings?.maxAttempts || 1}" min="1" max="5">
              </div>
              
              <div class="admin-form-group">
                <label for="editHomeworkInstructions" class="admin-form-label">
                  <i class="fas fa-info-circle me-2"></i>
                  Instructions
                </label>
                <textarea class="admin-form-control" id="editHomeworkInstructions" rows="2" placeholder="Optional instructions for students">${contentItem.homeworkSettings?.instructions || ''}</textarea>
              </div>
              
              <div class="admin-form-group">
                <div class="homework-options">
                  <div class="admin-form-check">
                    <input type="checkbox" class="admin-form-check-input" id="editHomeworkShuffleQuestions" ${contentItem.homeworkSettings?.shuffleQuestions ? 'checked' : ''}>
                    <label class="admin-form-check-label" for="editHomeworkShuffleQuestions">
                      Shuffle Questions
                    </label>
                  </div>
                  <div class="admin-form-check">
                    <input type="checkbox" class="admin-form-check-input" id="editHomeworkShowCorrectAnswers" ${contentItem.homeworkSettings?.showCorrectAnswers ? 'checked' : ''}>
                    <label class="admin-form-check-label" for="editHomeworkShowCorrectAnswers">
                      Show Correct Answers
                    </label>
                  </div>
                </div>
              </div>
            </div>
            ` : ''}
          </div>
        </div>
      </div>
    `;
    
    // Initialize question manager for editing
    initializeEditQuestionManager(contentItem);
    
  } else {
    editForm.innerHTML = `
      <div class="row">
        <div class="col-md-8">
          <div class="admin-form-section">
            <h6 class="admin-form-section-title">
              <i class="fas fa-info-circle me-2"></i>
              Content Information
            </h6>
            
            <div class="admin-form-group">
              <label for="editTitle" class="admin-form-label">
                <i class="fas fa-heading me-2"></i>
                Content Title
              </label>
              <input type="text" class="admin-form-control" id="editTitle" value="${contentItem.title}" required>
          </div>
            
            <div class="admin-form-group">
              <label for="editDescription" class="admin-form-label">
                <i class="fas fa-align-left me-2"></i>
                Description
              </label>
              <textarea class="admin-form-control" id="editDescription" rows="3">${contentItem.description || ''}</textarea>
          </div>
            
            <div class="admin-form-group">
              <label for="editContent" class="admin-form-label">
                <i class="fas fa-link me-2"></i>
                Content URL/File
              </label>
              <input type="text" class="admin-form-control" id="editContent" value="${contentItem.content || ''}" required>
          </div>
        </div>
        </div>
        
        <div class="col-md-4">
          <div class="admin-form-section">
            <h6 class="admin-form-section-title">
              <i class="fas fa-cog me-2"></i>
              Content Settings
            </h6>
            
            <div class="admin-form-group">
              <label for="editDuration" class="admin-form-label">
                <i class="fas fa-clock me-2"></i>
                Duration (minutes)
              </label>
              <input type="number" class="admin-form-control" id="editDuration" value="${contentItem.duration || 0}" min="0">
          </div>
            
            <div class="admin-form-group">
              <label for="editOrder" class="admin-form-label">
                <i class="fas fa-sort-numeric-up me-2"></i>
                Order
              </label>
              <input type="number" class="admin-form-control" id="editOrder" value="${contentItem.order || 1}" min="1">
            </div>
            
            <div class="admin-form-group">
              <div class="admin-form-check">
                <input type="checkbox" class="admin-form-check-input" id="editIsRequired" ${contentItem.isRequired ? 'checked' : ''}>
                <label class="admin-form-check-label" for="editIsRequired">
                  Required content
                </label>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
  }
}

// Initialize question manager for editing
function initializeEditQuestionManager(contentItem) {
  // Load questions from the question bank
  if (contentItem.questionBank) {
    loadEditQuestions(contentItem.questionBank, contentItem);
  }
  
  // Setup filtering
  document.getElementById('editDifficultyFilter')?.addEventListener('change', function() {
    const difficulty = this.value;
    const questions = document.querySelectorAll('#editQuestionsContainer .question-circle');
    
    questions.forEach(circle => {
      if (!difficulty || circle.dataset.difficulty === difficulty) {
        circle.style.display = 'flex';
      } else {
        circle.style.display = 'none';
      }
    });
  });

  document.getElementById('editSearchQuestions')?.addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const questions = document.querySelectorAll('#editQuestionsContainer .question-circle');
    
    questions.forEach(circle => {
      const questionId = circle.dataset.questionId;
      const question = editQuestionManager?.currentQuestions?.find(q => q._id === questionId);
      if (question && question.questionText.toLowerCase().includes(searchTerm)) {
        circle.style.display = 'flex';
      } else {
        circle.style.display = 'none';
      }
    });
  });
}

// Load questions for editing
async function loadEditQuestions(bankId, contentItem) {
  try {
    const response = await fetch(`/admin/api/question-banks/${bankId}/questions`);
    const data = await response.json();
    
    if (data.success) {
      editQuestionManager = new EditQuestionManager();
      editQuestionManager.currentBank = data.questionBank;
      editQuestionManager.currentQuestions = data.questions;
      
      // Pre-select existing questions
      if (contentItem.selectedQuestions && contentItem.selectedQuestions.length > 0) {
        editQuestionManager.selectedQuestions = contentItem.selectedQuestions.map(questionId => {
          const question = data.questions.find(q => q._id === questionId);
          return {
            question: question,
            points: question?.points || 1,
            order: editQuestionManager.selectedQuestions.length + 1,
            isSelected: true
          };
        });
      }
      
      editQuestionManager.displayQuestions();
      editQuestionManager.updateBankInfo();
      editQuestionManager.updateSelectedSummary();
    } else {
      showNotification('Error loading questions: ' + data.message, 'error');
    }
  } catch (error) {
    console.error('Error loading questions:', error);
    showNotification('Error loading questions', 'error');
  }
}

// Edit Question Manager Class
class EditQuestionManager {
  constructor() {
    this.selectedQuestions = [];
    this.currentQuestions = [];
    this.currentBank = null;
  }

  // Display questions in the interface
  displayQuestions() {
    const container = document.getElementById('editQuestionsContainer');
    if (!container) return;

    container.innerHTML = '';
    
    this.currentQuestions.forEach((question, index) => {
      const questionCard = this.createQuestionCard(question, index + 1);
      container.appendChild(questionCard);
    });

    // Show questions list
    document.getElementById('editQuestionsList').style.display = 'block';
  }

  // Create individual question card
  createQuestionCard(question, number) {
    const card = document.createElement('div');
    card.className = 'question-circle';
    card.dataset.questionId = question._id;
    card.dataset.difficulty = question.difficulty;
    card.dataset.questionIndex = number - 1;
    card.tabIndex = 0;
    card.setAttribute('role', 'button');
    card.setAttribute('aria-label', `Question ${number}: ${this.truncateText(question.questionText, 50)}...`);
    
    const isSelected = this.selectedQuestions.some(q => q.question._id === question._id);
    
    // Create tooltip text with all question details
    const tooltipText = `Question ${number}: ${this.truncateText(question.questionText, 50)} | ${question.difficulty} | ${question.points} pts | ${question.questionType}`;
    card.dataset.tooltip = tooltipText;
    
    // Map difficulty to lowercase for CSS classes
    const difficultyClass = question.difficulty ? question.difficulty.toLowerCase() : 'medium';
    
    card.innerHTML = `
      <div class="question-circle-number">${number}</div>
      <div class="question-circle-meta">
        <div class="question-circle-difficulty ${difficultyClass}"></div>
        <div class="question-circle-type">${question.questionType.charAt(0).toUpperCase()}</div>
      </div>
      <div class="question-circle-preview" onclick="event.stopPropagation(); editQuestionManager.previewQuestion('${question._id}')">
        <i class="fas fa-eye"></i>
      </div>
      <div class="question-circle-selected">
        <i class="fas fa-check"></i>
      </div>
    `;
    
    // Add selected class if already selected
    if (isSelected) {
      card.classList.add('selected');
    }
    
    // Add click event to the entire card
    card.addEventListener('click', () => {
      this.toggleQuestion(question._id);
    });
    
    // Add keyboard support
    card.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        this.toggleQuestion(question._id);
      }
    });
    
    return card;
  }

  // Toggle question selection
  toggleQuestion(questionId) {
    const question = this.currentQuestions.find(q => q._id === questionId);
    if (!question) return;

    const existingIndex = this.selectedQuestions.findIndex(q => q.question._id === questionId);
    const circleElement = document.querySelector(`#editQuestionsContainer [data-question-id="${questionId}"]`);
    
    if (existingIndex >= 0) {
      // Remove from selection
      this.selectedQuestions.splice(existingIndex, 1);
      if (circleElement) {
        circleElement.classList.remove('selected');
      }
      showNotification(`Question ${this.selectedQuestions.length + 1} deselected`, 'info');
    } else {
      // Add to selection
      this.selectedQuestions.push({
        question: question,
        points: question.points,
        order: this.selectedQuestions.length + 1,
        isSelected: true
      });
      if (circleElement) {
        circleElement.classList.add('selected');
      }
      showNotification(`Question ${this.selectedQuestions.length} selected`, 'success');
    }

    this.updateSelectedSummary();
    this.updateBankInfo();
  }

  // Update bank info display
  updateBankInfo() {
    if (!this.currentBank) return;

    document.getElementById('editBankName').textContent = this.currentBank.name;
    document.getElementById('editBankCode').textContent = this.currentBank.bankCode;
    document.getElementById('editTotalQuestions').textContent = this.currentBank.totalQuestions;
    document.getElementById('editSelectedCount').textContent = this.selectedQuestions.length;
    
    document.getElementById('editQuestionBankInfo').style.display = 'block';
  }

  // Update selected questions summary
  updateSelectedSummary() {
    const summary = document.getElementById('editSelectedQuestionsSummary');
    const list = document.getElementById('editSelectedQuestionsList');
    const badge = document.getElementById('editSelectedCountBadge');
    
    if (this.selectedQuestions.length === 0) {
      summary.style.display = 'none';
      return;
    }

    summary.style.display = 'block';
    badge.textContent = `${this.selectedQuestions.length} selected`;
    
    list.innerHTML = '';
    this.selectedQuestions.forEach((item, index) => {
      const summaryItem = document.createElement('div');
      summaryItem.className = 'selected-question-item';
      summaryItem.innerHTML = `
        <div class="selected-question-content">
          <div class="selected-question-number">${index + 1}</div>
          <div class="selected-question-text">${this.truncateText(item.question.questionText, 60)}</div>
          <div class="selected-question-meta">
            <span class="difficulty-badge difficulty-${item.question.difficulty.toLowerCase()}">${item.question.difficulty}</span>
            <span class="points-badge">${item.points} pts</span>
          </div>
        </div>
        <button class="btn btn-sm btn-outline-danger" onclick="editQuestionManager.removeSelectedQuestion('${item.question._id}')" title="Remove">
          <i class="fas fa-times"></i>
        </button>
      `;
      list.appendChild(summaryItem);
    });

    // Update hidden input
    document.getElementById('editSelectedQuestions').value = JSON.stringify(this.selectedQuestions);
  }

  // Remove question from selection
  removeSelectedQuestion(questionId) {
    this.selectedQuestions = this.selectedQuestions.filter(q => q.question._id !== questionId);
    // Update circle appearance
    const circleElement = document.querySelector(`#editQuestionsContainer [data-question-id="${questionId}"]`);
    if (circleElement) {
      circleElement.classList.remove('selected');
    }
    this.updateSelectedSummary();
    this.updateBankInfo();
  }

  // Preview question details
  async previewQuestion(questionId) {
    try {
      const response = await fetch(`/admin/api/questions/${questionId}`);
      const data = await response.json();
      
      if (data.success) {
        this.displayQuestionPreview(data.question);
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      console.error('Error loading question details:', error);
      showNotification('Error loading question details', 'error');
    }
  }

  // Display question preview in modal
  displayQuestionPreview(question) {
    const content = document.getElementById('questionPreviewContent');
    
    content.innerHTML = `
      <div class="question-preview">
        <div class="question-preview-header">
          <div class="question-meta">
            <span class="difficulty-badge difficulty-${question.difficulty.toLowerCase()}">${question.difficulty}</span>
            <span class="points-badge">${question.points} points</span>
            <span class="type-badge">${question.questionType}</span>
          </div>
        </div>
        
        <div class="question-preview-content">
          <h6>Question:</h6>
          <div class="question-text">${question.questionText}</div>
          ${question.questionImage ? `<img src="${question.questionImage}" class="question-image" alt="Question Image">` : ''}
          
          <h6>Options:</h6>
          <div class="options-list">
            ${question.options.map((option, index) => `
              <div class="option-item ${option.isCorrect ? 'correct-option' : ''}">
                <span class="option-letter">${String.fromCharCode(65 + index)}</span>
                <span class="option-text">${option.text}</span>
                ${option.isCorrect ? '<i class="fas fa-check-circle text-success"></i>' : ''}
                ${option.image ? `<img src="${option.image}" class="option-image" alt="Option Image">` : ''}
              </div>
            `).join('')}
          </div>
          
          ${question.explanation ? `
            <h6>Explanation:</h6>
            <div class="explanation-text">${question.explanation}</div>
            ${question.explanationImage ? `<img src="${question.explanationImage}" class="explanation-image" alt="Explanation Image">` : ''}
          ` : ''}
          
          ${question.tags.length > 0 ? `
            <h6>Tags:</h6>
            <div class="question-tags">
              ${question.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
            </div>
          ` : ''}
        </div>
      </div>
    `;
    
    const modal = new bootstrap.Modal(document.getElementById('questionPreviewModal'));
    modal.show();
  }

  // Utility function
  truncateText(text, maxLength) {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  }
}

// Global variable for edit question manager
let editQuestionManager = null;

// Preview question function
function previewQuestion(questionId) {
  if (editQuestionManager) {
    editQuestionManager.previewQuestion(questionId);
  } else {
    // Fallback preview function
    showQuestionPreview(questionId);
  }
}

// Fallback question preview function
async function showQuestionPreview(questionId) {
  try {
    const response = await fetch(`/admin/api/questions/${questionId}`);
    const data = await response.json();
    
    if (data.success) {
      displayQuestionPreview(data.question);
    } else {
      showNotification('Error loading question details', 'error');
    }
  } catch (error) {
    console.error('Error loading question details:', error);
    showNotification('Error loading question details', 'error');
  }
}

// Display question preview in modal
function displayQuestionPreview(question) {
  const content = document.getElementById('questionPreviewContent');
  
  content.innerHTML = `
    <div class="question-preview">
      <div class="question-preview-header">
        <div class="question-meta">
          <span class="difficulty-badge difficulty-${question.difficulty.toLowerCase()}">${question.difficulty}</span>
          <span class="points-badge">${question.points} points</span>
          <span class="type-badge">${question.questionType}</span>
        </div>
      </div>
      
      <div class="question-preview-content">
        <h6>Question:</h6>
        <div class="question-text">${question.questionText}</div>
        ${question.questionImage ? `<img src="${question.questionImage}" class="question-image" alt="Question Image">` : ''}
        
        <h6>Options:</h6>
        <div class="options-list">
          ${question.options.map((option, index) => `
            <div class="option-item ${option.isCorrect ? 'correct-option' : ''}">
              <span class="option-letter">${String.fromCharCode(65 + index)}</span>
              <span class="option-text">${option.text}</span>
              ${option.isCorrect ? '<i class="fas fa-check-circle text-success"></i>' : ''}
              ${option.image ? `<img src="${option.image}" class="option-image" alt="Option Image">` : ''}
            </div>
          `).join('')}
        </div>
        
        ${question.explanation ? `
          <h6>Explanation:</h6>
          <div class="explanation-text">${question.explanation}</div>
          ${question.explanationImage ? `<img src="${question.explanationImage}" class="explanation-image" alt="Explanation Image">` : ''}
        ` : ''}
        
        ${question.tags && question.tags.length > 0 ? `
          <h6>Tags:</h6>
          <div class="question-tags">
            ${question.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
          </div>
        ` : ''}
      </div>
    </div>
  `;
  
  const modal = new bootstrap.Modal(document.getElementById('questionPreviewModal'));
  modal.show();
}

// Save content changes function
function saveContentChanges() {
  // Use the current content item data
  const contentItem = window.contentData;
  if (!contentItem) {
    showNotification('Content data not found', 'error');
    return;
  }
  
  // Validate required form elements exist
  const titleElement = document.getElementById('contentTitle');
  if (!titleElement) {
    showNotification('Form elements not found. Please refresh the page.', 'error');
    return;
  }
  
   // Validate title is not empty
   if (!titleElement.value.trim()) {
     showNotification('Title is required', 'error');
     return;
   }
   
   // Collect form data
   const updatedData = {
     title: titleElement.value.trim(),
     description: document.getElementById('contentDescription')?.value || '',
     duration: parseInt(document.getElementById('contentDuration')?.value) || 0,
     order: parseInt(document.getElementById('contentOrder')?.value) || 1,
     isRequired: document.getElementById('contentIsRequired')?.checked || false
   };
  
  if (contentItem.type === 'quiz' || contentItem.type === 'homework') {
    // Validate quiz/homework content
    if (editQuestionManager && editQuestionManager.selectedQuestions.length === 0) {
      showNotification('Please select at least one question', 'error');
      return;
    }
    
    // Collect settings - only include relevant settings based on content type
    if (contentItem.type === 'quiz') {
      const quizSettings = {
        timeLimit: parseInt(document.getElementById('quizTimeLimit')?.value) || 0,
        passingScore: parseInt(document.getElementById('quizPassingScore')?.value) || 60,
        maxAttempts: parseInt(document.getElementById('quizMaxAttempts')?.value) || 1,
        shuffleQuestions: document.getElementById('quizShuffleQuestions')?.checked || false,
        shuffleOptions: document.getElementById('quizShuffleOptions')?.checked || false,
        showCorrectAnswers: document.getElementById('quizShowCorrectAnswers')?.checked || false,
        showResults: document.getElementById('quizShowResults')?.checked || false,
        instructions: document.getElementById('quizInstructions')?.value || ''
      };
      updatedData.quizSettings = quizSettings;
    } else if (contentItem.type === 'homework') {
      const homeworkSettings = {
        passingScore: parseInt(document.getElementById('homeworkPassingScore')?.value) || 60,
        maxAttempts: parseInt(document.getElementById('homeworkMaxAttempts')?.value) || 1,
        shuffleQuestions: document.getElementById('homeworkShuffleQuestions')?.checked || false,
        showCorrectAnswers: document.getElementById('homeworkShowCorrectAnswers')?.checked || false,
        instructions: document.getElementById('homeworkInstructions')?.value || ''
      };
      updatedData.homeworkSettings = homeworkSettings;
    }
    
    // Add selected questions
    if (editQuestionManager) {
      updatedData.selectedQuestions = JSON.stringify(editQuestionManager.selectedQuestions);
    }
  } else {
    const contentElement = document.getElementById('contentUrl');
    if (!contentElement) {
      showNotification('Content URL field not found', 'error');
      return;
    }
    updatedData.content = contentElement.value.trim();
  }
  console.log('URL:', `/admin/courses/<%= course.courseCode %>/topics/<%= topic._id %>/content/${contentItem._id}`);
  console.log('Updated data being sent:', updatedData);
  console.log('Content item type:', contentItem.type);
  
  // Show loading state
  const saveBtn = document.getElementById('saveContentChangesBtn');
  const originalBtnText = saveBtn.innerHTML;
  saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
  saveBtn.disabled = true;

  // Make API call to update content
  fetch(`/admin/courses/<%= course.courseCode %>/topics/<%= topic._id %>/content/${contentItem._id}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updatedData)
  })
  .then(async response => {
    console.log('Response status:', response.status);
    console.log('Response headers:', response.headers);
    
    // Try to parse JSON response
    let data;
    try {
      data = await response.json();
      console.log('Response data:', data);
    } catch (parseError) {
      console.error('Failed to parse JSON response:', parseError);
      const textResponse = await response.text();
      console.error('Raw response:', textResponse);
      throw new Error(`Invalid JSON response: ${textResponse.substring(0, 100)}...`);
    }
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${data.message || 'Unknown error'}`);
    }
    
    return data;
  })
  .then(data => {
    if (data.success) {
      showNotification('Content updated successfully!', 'success');
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } else {
      showNotification(data.message || 'Error updating content', 'error');
      // Restore button state
      saveBtn.innerHTML = originalBtnText;
      saveBtn.disabled = false;
    }
  })
  .catch(error => {
    console.error('Error:', error);
    console.error('Error details:', {
      name: error.name,
      message: error.message,
      stack: error.stack
    });
    
    // Show specific error message
    let errorMessage = 'Unable to update content';
    if (error.message.includes('HTTP 400')) {
      errorMessage = 'Invalid data: ' + error.message.replace('HTTP 400: ', '');
    } else if (error.message.includes('HTTP 404')) {
      errorMessage = 'Content not found';
    } else if (error.message.includes('HTTP 500')) {
      errorMessage = 'Server error: ' + error.message.replace('HTTP 500: ', '');
    } else if (error.message.includes('Invalid JSON')) {
      errorMessage = 'Server returned invalid response';
    } else if (error.message.includes('Failed to fetch')) {
      errorMessage = 'Network connection error';
    } else {
      errorMessage = error.message;
    }
    
    showNotification(errorMessage, 'error', error.stack ? error.stack.substring(0, 200) + '...' : null);
    // Restore button state
    saveBtn.innerHTML = originalBtnText;
    saveBtn.disabled = false;
  });
}

// Add event listener when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  const saveBtn = document.getElementById('saveContentChangesBtn');
  if (saveBtn) {
    saveBtn.addEventListener('click', saveContentChanges);
  }

  // Setup file upload for content using CloudinaryUploader
  if (typeof CloudinaryUploader !== 'undefined') {
    const uploader = new CloudinaryUploader();
    uploader.initContentUpload(
      '#contentFile',
      '#contentFilePreview',
      '#contentFileProgress',
      '#contentUrl'
    );
  }
});

// Enhanced notification function
function showNotification(message, type = 'info', details = null) {
  // Remove existing notifications
  const existingNotifications = document.querySelectorAll('.notification');
  existingNotifications.forEach(notification => notification.remove());
  
  // Create notification element
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  
  // Get appropriate icon for each type
  let iconClass;
  let iconText;
  switch(type) {
    case 'success':
      iconClass = 'fas fa-check';
      iconText = '✓';
      break;
    case 'error':
      iconClass = 'fas fa-times';
      iconText = '✕';
      break;
    case 'info':
    default:
      iconClass = 'fas fa-info';
      iconText = 'i';
      break;
  }
  
  // Add details if provided
  let detailsHtml = '';
  if (details && type === 'error') {
    detailsHtml = `
      <div class="notification-details" style="margin-top: 0.5rem; font-size: 0.85rem; opacity: 0.8;">
        ${details}
      </div>
    `;
  }
  
  notification.innerHTML = `
    <div class="notification-content">
      <div class="notification-icon">
        <i class="${iconClass}"></i>
      </div>
      <div class="notification-message">
        ${message}
        ${detailsHtml}
      </div>
      <button class="notification-close" onclick="removeNotification(this.parentElement.parentElement)">
        <i class="fas fa-times"></i>
      </button>
      <div class="notification-progress"></div>
    </div>
  `;
  
  // Add to page
  document.body.appendChild(notification);
  
  // Auto remove after 2 seconds (or 5 seconds for errors with details)
  const autoHideDelay = (type === 'error' && details) ? 5000 : 2000;
  setTimeout(() => {
    removeNotification(notification);
  }, autoHideDelay);
}

// Helper function to remove notification with animation
function removeNotification(notification) {
  if (notification && notification.parentElement) {
    // Add fade out animation
    notification.style.animation = 'slideOut 0.3s ease forwards';
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 300);
  }
}
</script>