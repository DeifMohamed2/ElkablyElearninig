<%- include('./partials/admin-header', { pageCSS: 'quizzes' }) %>

<!-- MathLive for professional math input -->
<script src="https://unpkg.com/mathlive"></script>

<!-- Admin Layout -->
<div class="admin-layout">
  
  <!-- Sidebar -->
  <%- include('./partials/admin-sidebar', { currentPage: currentPage }) %>
  
  <!-- Main Content -->
  <main class="admin-main">
    
    <!-- Top Bar -->
    <%- include('./partials/admin-topbar', { 
        breadcrumb: 'Create Quiz',
        breadcrumbSubtitle: 'Build a comprehensive quiz by selecting questions from your question banks'
    }) %>
    
    <!-- Content -->
    <div class="admin-content">
      <!-- Flash Messages -->
      <% if (typeof messages !== 'undefined' && messages.success) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <i class="fas fa-check-circle"></i>
          <%= messages.success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
      
      <% if (typeof messages !== 'undefined' && messages.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <i class="fas fa-exclamation-circle"></i>
          <%= messages.error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <!-- Quiz Creation Header -->
      <div class="quiz-creation-header">
        <h1 class="quiz-creation-title">
          <i class="fas fa-plus-circle"></i>
          Create New Quiz
        </h1>
        <p class="quiz-creation-subtitle">
          Build a comprehensive quiz in 3 simple steps
        </p>
      </div>

      <!-- Progress Steps -->
      <div class="quiz-creation-progress">
        <div class="progress-step active" data-step="1">
          <div class="progress-step-number">1</div>
          <div class="progress-step-label">Basic Info</div>
        </div>
        <div class="progress-step" data-step="2">
          <div class="progress-step-number">2</div>
          <div class="progress-step-label">Question Bank</div>
        </div>
        <div class="progress-step" data-step="3">
          <div class="progress-step-number">3</div>
          <div class="progress-step-label">Select Questions</div>
        </div>
      </div>

      <!-- Quiz Creation Form -->
      <form id="quizCreationForm">
        
        <!-- Step 1: Basic Information Card -->
        <div class="quiz-step-card active" id="step1">
          <div class="quiz-step-card-header">
            <div class="quiz-step-card-title">
              <i class="fas fa-info-circle"></i>
              Step 1: Basic Information
            </div>
            <div class="quiz-step-card-subtitle">
              Provide the essential details for your quiz
            </div>
          </div>
          
          <div class="quiz-step-card-body">
            <div class="row">
              <div class="col-md-8">
                <div class="quiz-form-group">
                  <label for="title" class="quiz-form-label">
                    <i class="fas fa-heading"></i>
                    Quiz Title *
                  </label>
                  <input type="text" id="title" name="title" class="quiz-form-control" 
                         placeholder="Enter quiz title" maxlength="200">
                </div>
              </div>
              <div class="col-md-4">
                <div class="quiz-form-group">
                  <label for="code" class="quiz-form-label">
                    <i class="fas fa-code"></i>
                    Quiz Code *
                  </label>
                  <input type="text" id="code" name="code" class="quiz-form-control" 
                         value="<%= generatedCode %>" maxlength="20" readonly
                         pattern="[A-Z0-9\-]+" title="Uppercase letters, numbers, and hyphens only">
                </div>
              </div>
            </div>

            <!-- Enhanced Quiz Thumbnail Upload -->
            <div class="quiz-form-group">
              <label class="quiz-form-label">
                <i class="fas fa-image"></i>
                Quiz Thumbnail
                <span class="quiz-form-label-optional">(Optional)</span>
              </label>
              <div class="enhanced-thumbnail-upload-container">
                <div class="enhanced-thumbnail-preview" id="thumbnailPreview" style="display: none;">
                  <div class="enhanced-thumbnail-preview-wrapper">
                  <img id="thumbnailImage" src="" alt="Quiz thumbnail">
                    <div class="enhanced-thumbnail-overlay">
                      <div class="enhanced-thumbnail-actions">
                        <button type="button" class="btn btn-sm btn-outline-light" onclick="removeThumbnail()" title="Remove thumbnail">
                      <i class="fas fa-trash"></i>
                    </button>
                        <button type="button" class="btn btn-sm btn-outline-light" onclick="changeThumbnail()" title="Change thumbnail">
                          <i class="fas fa-edit"></i>
                    </button>
                  </div>
                </div>
                  </div>
                  <div class="enhanced-thumbnail-info">
                    <div class="enhanced-thumbnail-filename" id="thumbnailFilename"></div>
                    <div class="enhanced-thumbnail-size" id="thumbnailSize"></div>
                  </div>
                </div>
                <div class="enhanced-thumbnail-upload-area" id="thumbnailUploadArea">
                  <div class="enhanced-upload-content">
                    <div class="enhanced-upload-icon">
                    <i class="fas fa-cloud-upload-alt"></i>
                    </div>
                    <div class="enhanced-upload-text">
                      <h4>Upload Quiz Thumbnail</h4>
                      <p>Click to browse or drag and drop your image here</p>
                    </div>
                    <div class="enhanced-upload-formats">
                      <div class="format-badge">
                        <i class="fas fa-file-image"></i>
                        PNG
                      </div>
                      <div class="format-badge">
                        <i class="fas fa-file-image"></i>
                        JPG
                      </div>
                      <div class="format-badge">
                        <i class="fas fa-file-image"></i>
                        GIF
                      </div>
                    </div>
                    <div class="enhanced-upload-limit">
                      <i class="fas fa-info-circle"></i>
                      Maximum file size: 5MB
                    </div>
                  </div>
                  <input type="file" id="thumbnailInput" name="thumbnail" accept="image/*" style="display: none;">
                </div>
                <div class="enhanced-thumbnail-progress" id="thumbnailProgress" style="display: none;">
                  <div class="enhanced-progress-wrapper">
                    <div class="enhanced-progress-bar">
                      <div class="enhanced-progress-fill" id="thumbnailProgressBar"></div>
                  </div>
                    <div class="enhanced-progress-text" id="thumbnailProgressText">Preparing upload...</div>
                  </div>
                </div>
              </div>
            </div>

            <div class="quiz-form-group">
              <label for="description" class="quiz-form-label">
                <i class="fas fa-align-left"></i>
                Description *
              </label>
              <textarea id="description" name="description" class="quiz-form-control quiz-form-textarea" 
                        placeholder="Describe what this quiz covers and its objectives" maxlength="1000"></textarea>
            </div>

            <div class="row">
              <div class="col-md-4">
                <div class="quiz-form-group">
                  <label for="duration" class="quiz-form-label">
                    <i class="fas fa-clock"></i>
                    Duration (minutes) * <small class="text-muted">(0 = No time limit)</small>
                  </label>
                  <input type="number" id="duration" name="duration" class="quiz-form-control" 
                         placeholder="60" min="0" max="480" value="60">
                </div>
              </div>
              <div class="col-md-4">
                <div class="quiz-form-group">
                  <label for="difficulty" class="quiz-form-label">
                    <i class="fas fa-signal"></i>
                    Difficulty Level *
                  </label>
                  <select id="difficulty" name="difficulty" class="quiz-form-control quiz-form-select">
                    <option value="">Select Difficulty</option>
                    <option value="easy">Easy</option>
                    <option value="medium">Medium</option>
                    <option value="hard">Hard</option>
                  </select>
                </div>
              </div>
              <div class="col-md-4">
                <div class="quiz-form-group">
                  <label for="passingScore" class="quiz-form-label">
                    <i class="fas fa-percentage"></i>
                    Passing Score (%)
                  </label>
                  <input type="number" id="passingScore" name="passingScore" class="quiz-form-control" 
                         placeholder="60" min="0" max="100" value="60">
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6">
                <div class="quiz-form-group">
                  <label for="maxAttempts" class="quiz-form-label">
                    <i class="fas fa-redo"></i>
                    Max Attempts
                  </label>
                  <input type="number" id="maxAttempts" name="maxAttempts" class="quiz-form-control" 
                         placeholder="3" min="1" max="10" value="3">
                </div>
              </div>
              <div class="col-md-6">
                <div class="quiz-form-group">
                  <label for="tags" class="quiz-form-label">
                    <i class="fas fa-tags"></i>
                    Tags (comma-separated)
                  </label>
                  <input type="text" id="tags" name="tags" class="quiz-form-control" 
                         placeholder="math, algebra, beginner">
                </div>
              </div>
            </div>

            <div class="quiz-form-group">
              <label for="instructions" class="quiz-form-label">
                <i class="fas fa-list-ol"></i>
                Instructions
              </label>
              <textarea id="instructions" name="instructions" class="quiz-form-control quiz-form-textarea" 
                        placeholder="Provide specific instructions for students taking this quiz" maxlength="2000"></textarea>
            </div>

            <div class="quiz-form-group">
              <label class="quiz-form-label">
                <i class="fas fa-sliders-h"></i>
                Quiz Options
              </label>
              <div class="row">
                <div class="col-md-6">
                  <div class="quiz-form-check">
                    <input type="checkbox" id="shuffleQuestions" name="shuffleQuestions" class="quiz-form-check-input">
                    <label for="shuffleQuestions" class="quiz-form-check-label">
                      Shuffle Questions
                    </label>
                  </div>
                  <div class="quiz-form-check">
                    <input type="checkbox" id="shuffleOptions" name="shuffleOptions" class="quiz-form-check-input">
                    <label for="shuffleOptions" class="quiz-form-check-label">
                      Shuffle Answer Options
                    </label>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="quiz-form-check">
                    <input type="checkbox" id="showCorrectAnswers" name="showCorrectAnswers" class="quiz-form-check-input" checked>
                    <label for="showCorrectAnswers" class="quiz-form-check-label">
                      Show Correct Answers
                    </label>
                  </div>
                  <div class="quiz-form-check">
                    <input type="checkbox" id="showResults" name="showResults" class="quiz-form-check-input" checked>
                    <label for="showResults" class="quiz-form-check-label">
                      Show Results Immediately
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="quiz-step-card-footer">
            <button type="button" class="btn btn-primary" onclick="nextStep(2)">
              Next: Select Question Bank
              <i class="fas fa-arrow-right"></i>
            </button>
          </div>
        </div>

        <!-- Step 2: Enhanced Question Bank Selection Card -->
        <div class="quiz-step-card" id="step2">
          <div class="quiz-step-card-header">
            <div class="quiz-step-card-title">
              <i class="fas fa-database"></i>
              Step 2: Select Question Bank
            </div>
            <div class="quiz-step-card-subtitle">
              Choose the question bank to select questions from
            </div>
          </div>
          
          <div class="quiz-step-card-body">
            <div class="quiz-form-group">
              <label for="questionBank" class="quiz-form-label">
                <i class="fas fa-database"></i>
                Question Bank *
              </label>
              <select id="questionBank" name="questionBank" class="quiz-form-control quiz-form-select">
                <option value="">Select a question bank</option>
                <% if (questionBanks && questionBanks.length > 0) { %>
                  <% questionBanks.forEach(bank => { %>
                    <option value="<%= bank._id %>" data-questions="<%= bank.totalQuestions || 0 %>" data-title="<%= bank.name %>" data-code="<%= bank.bankCode %>" data-description="<%= bank.description || '' %>">
                      <%= bank.name %> (<%= bank.bankCode %>) - <%= bank.totalQuestions || 0 %> questions
                    </option>
                  <% }) %>
                <% } else { %>
                  <option value="" disabled>No question banks available - Please create a question bank first</option>
                <% } %>
              </select>
            </div>

            <% if (questionBanks && questionBanks.length > 0) { %>
              <!-- Enhanced Question Bank Preview -->
              <div class="enhanced-question-bank-preview" id="questionBankPreview" style="display: none;">
                <div class="enhanced-preview-header">
                  <div class="enhanced-preview-icon">
                    <i class="fas fa-database"></i>
                  </div>
                  <div class="enhanced-preview-title">
                  <h4>Selected Question Bank</h4>
                    <p>Ready to select questions from this bank</p>
                </div>
                </div>
                <div class="enhanced-preview-content">
                  <div class="enhanced-preview-main">
                    <div class="enhanced-preview-name" id="previewTitle"></div>
                    <div class="enhanced-preview-code" id="previewCode"></div>
                    <div class="enhanced-preview-description" id="previewDescription"></div>
                  </div>
                  <div class="enhanced-preview-stats">
                    <div class="enhanced-stat-card">
                      <div class="enhanced-stat-icon">
                      <i class="fas fa-question-circle"></i>
                    </div>
                      <div class="enhanced-stat-content">
                        <div class="enhanced-stat-number" id="previewQuestions">0</div>
                        <div class="enhanced-stat-label">Questions</div>
                      </div>
                    </div>
                    <div class="enhanced-stat-card">
                      <div class="enhanced-stat-icon">
                        <i class="fas fa-tags"></i>
                      </div>
                      <div class="enhanced-stat-content">
                        <div class="enhanced-stat-number" id="previewCategories">-</div>
                        <div class="enhanced-stat-label">Categories</div>
                      </div>
                    </div>
                    <div class="enhanced-stat-card">
                      <div class="enhanced-stat-icon">
                        <i class="fas fa-signal"></i>
                      </div>
                      <div class="enhanced-stat-content">
                        <div class="enhanced-stat-number" id="previewDifficulty">-</div>
                        <div class="enhanced-stat-label">Avg Difficulty</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            <% } else { %>
              <div class="enhanced-no-banks-alert">
                <div class="enhanced-alert-icon">
                <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="enhanced-alert-content">
                  <h4>No Question Banks Available</h4>
                  <p>You need to create a question bank first before creating a quiz.</p>
                  <a href="/admin/question-banks" class="btn btn-primary">
                    <i class="fas fa-plus"></i>
                    Create Question Bank
                  </a>
                </div>
              </div>
            <% } %>
          </div>
          
          <div class="quiz-step-card-footer">
            <button type="button" class="btn btn-outline-secondary" onclick="prevStep(1)">
              <i class="fas fa-arrow-left"></i>
              Previous
            </button>
            <button type="button" class="btn btn-primary" onclick="nextStep(3)" id="step2NextBtn" disabled>
              Next: Select Questions
              <i class="fas fa-arrow-right"></i>
            </button>
          </div>
        </div>

        <!-- Step 3: Enhanced Question Selection Card -->
        <div class="quiz-step-card" id="step3">
          <div class="quiz-step-card-header">
            <div class="quiz-step-card-title">
              <i class="fas fa-list-check"></i>
              Step 3: Select Questions
            </div>
            <div class="quiz-step-card-subtitle">
              Choose the questions for your quiz
            </div>
          </div>
          
          <div class="quiz-step-card-body">
            <!-- Enhanced Question Filters -->
            <div class="enhanced-question-filters-section">
              <div class="enhanced-filters-header">
                <h5>
                  <i class="fas fa-filter"></i>
                  Filter & Search Questions
                </h5>
                <p>Use filters to find the questions you want to include in your quiz</p>
              </div>
              
              <div class="enhanced-filters-grid">
                <div class="enhanced-filter-group">
                  <label class="enhanced-filter-label">
                    <i class="fas fa-signal"></i>
                    Difficulty Level
                  </label>
                  <select class="enhanced-filter-select" id="difficultyFilter" onchange="filterQuestions()">
                    <option value="">All Difficulties</option>
                      <option value="easy">Easy</option>
                      <option value="medium">Medium</option>
                      <option value="hard">Hard</option>
                    </select>
                  </div>
                
                <div class="enhanced-filter-group">
                  <label class="enhanced-filter-label">
                    <i class="fas fa-tag"></i>
                    Question Type
                  </label>
                  <select class="enhanced-filter-select" id="typeFilter" onchange="filterQuestions()">
                    <option value="">All Types</option>
                    <option value="MCQ">Multiple Choice</option>
                    <option value="True/False">True/False</option>
                    <option value="Written">Written</option>
                  </select>
                  </div>
                
                <div class="enhanced-filter-group enhanced-search-group">
                  <label class="enhanced-filter-label">
                    <i class="fas fa-search"></i>
                    Search Questions
                  </label>
                  <div class="enhanced-search-input-wrapper">
                    <input type="text" class="enhanced-search-input" id="searchFilter" 
                           placeholder="Search by question text..." onkeyup="filterQuestions()">
                    <i class="fas fa-search enhanced-search-icon"></i>
                </div>
                  </div>
                </div>
              
              <!-- Enhanced Quick Actions -->
              <div class="enhanced-quick-actions">
                <div class="quick-actions-header">
                  <h6>
                    <i class="fas fa-bolt"></i>
                    Quick Actions
                  </h6>
                </div>
                <div class="quick-actions-buttons">
                  <button type="button" class="btn btn-sm btn-success" onclick="selectAllQuestions()" title="Select All Visible Questions">
                        <i class="fas fa-check-double"></i>
                    Select All
                      </button>
                  <button type="button" class="btn btn-sm btn-warning" onclick="clearSelection()" title="Clear All Selections">
                        <i class="fas fa-times"></i>
                    Clear All
                  </button>
                  <button type="button" class="btn btn-sm btn-info" onclick="selectEvenQuestions()" title="Select Even Numbered Questions">
                    <i class="fas fa-sort-numeric-up"></i>
                    Even
                  </button>
                  <button type="button" class="btn btn-sm btn-info" onclick="selectOddQuestions()" title="Select Odd Numbered Questions">
                    <i class="fas fa-sort-numeric-down"></i>
                    Odd
                  </button>

                </div>
              </div>
              
              <!-- Range Selection -->
              <div class="row mt-3">
                <div class="col-md-6">
                  <div class="question-filter-group">
                    <label class="question-filter-label">Range Selection</label>
                    <div class="range-selection-container">
                      <input type="text" class="question-filter-select" id="rangeInput" 
                             placeholder="e.g., 1-5, 3, 7-10" style="flex: 1; margin-right: 0.5rem;"
                             onkeypress="if(event.key==='Enter') selectRange()">
                      <button type="button" class="btn btn-sm btn-primary" onclick="selectRange()" title="Select Range">
                        <i class="fas fa-check"></i> OK
                      </button>
                    </div>
                    <small class="text-muted">Enter question numbers or ranges (e.g., 1-5, 3, 7-10)</small>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="question-filter-group">
                    <label class="question-filter-label">Quick Actions</label>
                    <div class="question-filter-actions">
                      <button type="button" class="btn btn-sm btn-info" onclick="selectEvenQuestions()" title="Select Even Numbers">
                        <i class="fas fa-sort-numeric-up"></i> Even
                      </button>
                      <button type="button" class="btn btn-sm btn-info" onclick="selectOddQuestions()" title="Select Odd Numbers">
                        <i class="fas fa-sort-numeric-down"></i> Odd
                      </button>
                      <button type="button" class="btn btn-sm btn-secondary" onclick="selectRandomQuestions()" title="Select Random Questions">
                        <i class="fas fa-random"></i> Random
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Enhanced Questions Grid -->
            <div class="enhanced-questions-container">
              <div class="enhanced-questions-header">
                <div class="enhanced-questions-title">
                  <h5>
                    <i class="fas fa-list-check"></i>
                    Available Questions
                  </h5>
                  <span class="enhanced-questions-count" id="questionsCount">(0 questions)</span>
              </div>
                <div class="enhanced-questions-actions">
                  <button type="button" class="btn btn-sm btn-outline-primary" onclick="toggleViewMode()" id="viewModeBtn">
                    <i class="fas fa-th" id="viewModeIcon"></i>
                    <span id="viewModeText">Grid View</span>
                  </button>
              </div>
              </div>
              
              <!-- Grid View -->
              <div id="questionsGrid" class="enhanced-questions-grid">
                <!-- Questions will be loaded here as enhanced cards -->
              </div>
              
              <!-- List View -->
              <div id="questionsList" class="enhanced-questions-list" style="display: none;">
                <!-- Questions will be loaded here as list items -->
              </div>
              
              <div id="noQuestionsMessage" class="enhanced-no-questions-message" style="display: none;">
                <div class="enhanced-no-questions-content">
                  <div class="enhanced-no-questions-icon">
                  <i class="fas fa-exclamation-triangle"></i>
                  </div>
                  <div class="enhanced-no-questions-text">
                  <h4>No Questions Available</h4>
                  <p>Please go back to Step 2 and select a question bank first.</p>
                  <button type="button" class="btn btn-primary" onclick="prevStep(2)">
                    <i class="fas fa-arrow-left"></i>
                    Go Back to Select Question Bank
                  </button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Selection Summary -->
            <div class="question-selection-summary">
              <div class="question-selection-summary-header">
                <h5>
                  <i class="fas fa-chart-bar"></i>
                  Selection Summary
                </h5>
              </div>
              <div class="question-selection-stats">
                <div class="question-selection-stat">
                  <span class="question-selection-stat-number" id="selectedCount">0</span>
                  <span class="question-selection-stat-label">Selected</span>
                </div>
                <div class="question-selection-stat">
                  <span class="question-selection-stat-number" id="totalPoints">0</span>
                  <span class="question-selection-stat-label">Total Points</span>
                </div>
                <div class="question-selection-stat">
                  <span class="question-selection-stat-number" id="avgDifficulty">-</span>
                  <span class="question-selection-stat-label">Avg Difficulty</span>
                </div>
                <div class="question-selection-stat">
                  <span class="question-selection-stat-number" id="estimatedTime">-</span>
                  <span class="question-selection-stat-label">Est. Time (min)</span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="quiz-step-card-footer">
            <button type="button" class="btn btn-outline-secondary" onclick="prevStep(2)">
              <i class="fas fa-arrow-left"></i>
              Previous
            </button>
            <button type="submit" class="btn btn-success" id="createQuizBtn" disabled>
              <i class="fas fa-save" id="createQuizIcon"></i>
              <span id="createQuizText">Create Quiz</span>
              <span id="createQuizLoading" style="display: none;">
                <i class="fas fa-spinner fa-spin"></i>
                Creating...
              </span>
            </button>
          </div>
        </div>

      </form>
    </div>

<!-- Enhanced Question Preview Modal -->
<div class="modal fade question-preview-modal" id="questionPreviewModal" tabindex="-1" aria-labelledby="questionPreviewModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content admin-modal-content">
      <div class="modal-header admin-modal-header">
        <h5 class="modal-title" id="questionPreviewModalLabel">
          <i class="fas fa-eye"></i>
          Question Preview
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body admin-modal-body">
        <div id="questionPreviewContent" class="enhanced-question-preview-content">
          <!-- Enhanced question preview will be loaded here -->
        </div>
      </div>
    </div>
  </div>
</div>

<script>
let currentStep = 1;
let selectedBankId = null;
let selectedQuestions = [];
let allQuestions = [];
let thumbnailData = null;

// Step Navigation Functions
function nextStep(step) {
  if (validateCurrentStep()) {
    hideStep(currentStep);
    currentStep = step;
    showStep(currentStep);
    updateProgress();
    
    // If moving to step 3, ensure we have a question bank selected
    if (step === 3 && selectedBankId) {
      loadQuestions(selectedBankId);
    }
  }
}

function prevStep(step) {
  hideStep(currentStep);
  currentStep = step;
  showStep(currentStep);
  updateProgress();
}

function showStep(step) {
  document.getElementById(`step${step}`).classList.add('active');
}

function hideStep(step) {
  document.getElementById(`step${step}`).classList.remove('active');
}

function updateProgress() {
  document.querySelectorAll('.progress-step').forEach((step, index) => {
    step.classList.remove('active', 'completed');
    if (index + 1 < currentStep) {
      step.classList.add('completed');
    } else if (index + 1 === currentStep) {
      step.classList.add('active');
    }
  });
}

// Step Validation
function validateCurrentStep() {
  switch (currentStep) {
    case 1:
      return validateStep1();
    case 2:
      return validateStep2();
    case 3:
      return validateStep3();
    default:
      return true;
  }
}

function validateStep1() {
  const title = document.getElementById('title').value.trim();
  const code = document.getElementById('code').value.trim();
  const description = document.getElementById('description').value.trim();
  const duration = document.getElementById('duration').value;
  const difficulty = document.getElementById('difficulty').value;
  
  if (!title) {
    showNotification('Quiz title is required', 'error');
    return false;
  }
  if (!code) {
    showNotification('Quiz code is required', 'error');
    return false;
  }
  if (!/^[A-Z0-9\-]+$/.test(code)) {
    showNotification('Quiz code can only contain uppercase letters, numbers, and hyphens', 'error');
    return false;
  }
  if (!description) {
    showNotification('Quiz description is required', 'error');
    return false;
  }
  if (duration === '' || duration === null || duration === undefined) {
    showNotification('Quiz duration is required', 'error');
    return false;
  }
  
  const durationNum = parseInt(duration);
  if (isNaN(durationNum) || durationNum < 0) {
    showNotification('Quiz duration must be 0 or greater', 'error');
    return false;
  }
  if (!difficulty) {
    showNotification('Quiz difficulty is required', 'error');
    return false;
  }
  
  // Validate passing score
  const passingScore = parseInt(document.getElementById('passingScore').value);
  if (isNaN(passingScore) || passingScore < 0 || passingScore > 100) {
    showNotification('Passing score must be between 0 and 100', 'error');
    return false;
  }
  
  // Validate max attempts
  const maxAttempts = parseInt(document.getElementById('maxAttempts').value);
  if (isNaN(maxAttempts) || maxAttempts < 1 || maxAttempts > 10) {
    showNotification('Max attempts must be between 1 and 10', 'error');
    return false;
  }
  
  return true;
}

function validateStep2() {
  const questionBank = document.getElementById('questionBank').value;
  if (!questionBank || questionBank === '') {
    showNotification('Please select a question bank', 'error');
    return false;
  }
  return true;
}

function validateStep3() {
  if (selectedQuestions.length === 0) {
    showNotification('Please select at least one question', 'error');
    return false;
  }
  return true;
}

// Question Bank Selection
document.getElementById('questionBank').addEventListener('change', function() {
  const bankId = this.value;
  const selectedOption = this.options[this.selectedIndex];
  
  console.log('Question bank changed:', {
    bankId: bankId,
    selectedIndex: this.selectedIndex,
    optionText: selectedOption.textContent,
    optionValue: selectedOption.value,
    optionTitle: selectedOption.dataset.title,
    optionCode: selectedOption.dataset.code,
    optionQuestions: selectedOption.dataset.questions
  });
  
  if (bankId && bankId !== '') {
    // Clear all previous selections when changing question bank
    if (selectedBankId && selectedBankId !== bankId) {
      selectedQuestions = [];
      updateSelectionSummary();
      updateCreateButton();
      showNotification('Question selections cleared due to question bank change', 'info');
    }
    
    selectedBankId = bankId;
    showQuestionBankPreview(selectedOption);
    loadQuestions(bankId);
    document.getElementById('step2NextBtn').disabled = false;
    console.log('Next button enabled');
  } else {
    selectedBankId = null;
    document.getElementById('questionBankPreview').style.display = 'none';
    document.getElementById('step2NextBtn').disabled = true;
    console.log('Next button disabled');
  }
});

function showQuestionBankPreview(option) {
  const preview = document.getElementById('questionBankPreview');
  const title = option.dataset.title || option.textContent.split(' (')[0];
  const code = option.dataset.code || option.textContent.match(/\(([^)]+)\)/)?.[1] || '';
  const questions = option.dataset.questions || '0';
  const description = option.dataset.description || 'No description available';
  
  document.getElementById('previewTitle').textContent = title;
  document.getElementById('previewCode').textContent = code;
  document.getElementById('previewQuestions').textContent = questions;
  document.getElementById('previewDescription').textContent = description;
  
  // Set additional stats (these would come from the API in a real implementation)
  document.getElementById('previewCategories').textContent = '3'; // Example
  document.getElementById('previewDifficulty').textContent = 'Medium'; // Example
  
  preview.style.display = 'block';
}

// Load Questions from Bank
async function loadQuestions(bankId) {
  try {
    const response = await fetch(`/admin/quizzes/api/banks/${bankId}/questions`);
    const data = await response.json();
    
    if (data.success) {
      allQuestions = data.questions;
      
      // Clear any previously selected questions that don't belong to this bank
      clearInvalidSelections(bankId);
      
      displayQuestions(data.questions);
    } else {
      showNotification('Failed to load questions', 'error');
    }
  } catch (error) {
    console.error('Error loading questions:', error);
    showNotification('Error loading questions', 'error');
  }
}

// Clear selections that don't belong to the current question bank
function clearInvalidSelections(bankId) {
  if (selectedQuestions.length > 0) {
    // Get all question IDs from the current bank
    const validQuestionIds = allQuestions.map(q => q._id);
    
    // Filter out invalid selections
    const validSelections = selectedQuestions.filter(selection => 
      validQuestionIds.includes(selection.question)
    );
    
    // If some selections were removed, notify the user
    if (validSelections.length !== selectedQuestions.length) {
      const removedCount = selectedQuestions.length - validSelections.length;
      selectedQuestions = validSelections;
      
      showNotification(
        `Cleared ${removedCount} question selection(s) that don't belong to the selected question bank`, 
        'warning'
      );
      
      // Update the UI to reflect the cleared selections
      updateSelectionSummary();
      updateCreateButton();
    }
  }
}

// Enhanced Display Questions with Grid and List Views
let currentViewMode = 'grid'; // 'grid' or 'list'

function displayQuestions(questions) {
  const questionsGrid = document.getElementById('questionsGrid');
  const questionsList = document.getElementById('questionsList');
  const noQuestionsMessage = document.getElementById('noQuestionsMessage');
  
  questionsGrid.innerHTML = '';
  questionsList.innerHTML = '';
  document.getElementById('questionsCount').textContent = `(${questions.length} questions)`;
  
  if (!questions || questions.length === 0) {
    noQuestionsMessage.style.display = 'block';
    questionsGrid.style.display = 'none';
    questionsList.style.display = 'none';
    return;
  }
  
  noQuestionsMessage.style.display = 'none';
  
  questions.forEach((question, index) => {
    // Create enhanced question card for grid view
    const questionCard = createEnhancedQuestionCard(question, index);
    questionsGrid.appendChild(questionCard);
    
    // Create enhanced question item for list view
    const questionItem = createEnhancedQuestionItem(question, index);
    questionsList.appendChild(questionItem);
  });
  
  // Show appropriate view
  if (currentViewMode === 'grid') {
    questionsGrid.style.display = 'grid';
    questionsList.style.display = 'none';
  } else {
    questionsGrid.style.display = 'none';
    questionsList.style.display = 'block';
  }
  
  updateSelectionSummary();
}

function createEnhancedQuestionCard(question, index) {
  const questionCard = document.createElement('div');
  questionCard.className = 'enhanced-question-card';
  questionCard.dataset.questionId = question._id;
  questionCard.dataset.questionIndex = index;
  
  // Get question type display info
  const typeInfo = getQuestionTypeInfo(question.questionType);
  
  // Get difficulty color
  const difficultyColor = getDifficultyColor(question.difficulty);
  
  // Get answer count for written questions
  let answerCount = '';
  if (question.questionType === 'Written' && question.correctAnswers) {
    answerCount = `${question.correctAnswers.length} answer${question.correctAnswers.length !== 1 ? 's' : ''}`;
  } else if (question.options) {
    answerCount = `${question.options.length} option${question.options.length !== 1 ? 's' : ''}`;
  }
  
  questionCard.innerHTML = `
    <div class="enhanced-question-card-header">
      <div class="enhanced-question-number">${index + 1}</div>
      <div class="enhanced-question-actions">
        <button type="button" class="btn btn-sm btn-outline-primary" onclick="event.stopPropagation(); previewQuestion('${question._id}')" title="Preview Question">
        <i class="fas fa-eye"></i>
        </button>
      </div>
    </div>
    
    <div class="enhanced-question-card-body">
      <div class="enhanced-question-content">
        <div class="enhanced-question-text">${truncateText(question.questionText, 100)}</div>
        <div class="enhanced-question-meta">
          <div class="enhanced-question-type" style="background: ${typeInfo.color}">
            <i class="${typeInfo.icon}"></i>
            <span>${typeInfo.label}</span>
          </div>
          <div class="enhanced-question-difficulty" style="background: ${difficultyColor}">
            <i class="fas fa-signal"></i>
            <span>${question.difficulty}</span>
          </div>
        </div>
        <div class="enhanced-question-stats">
          <div class="enhanced-question-stat">
            <i class="fas fa-star"></i>
            <span>${question.points} pts</span>
          </div>
          <div class="enhanced-question-stat">
            <i class="fas fa-list"></i>
            <span>${answerCount}</span>
          </div>
        </div>
      </div>
    </div>
    
    <div class="enhanced-question-card-footer">
      <div class="enhanced-question-selection">
        <div class="enhanced-selection-indicator">
        <i class="fas fa-check"></i>
        </div>
        <span class="enhanced-selection-text">Click to select</span>
      </div>
      </div>
    `;
    
  questionCard.addEventListener('click', (e) => {
      e.preventDefault();
    toggleQuestionSelection(question._id, questionCard);
  });
  
  return questionCard;
}

function createEnhancedQuestionItem(question, index) {
  const questionItem = document.createElement('div');
  questionItem.className = 'enhanced-question-item';
  questionItem.dataset.questionId = question._id;
  questionItem.dataset.questionIndex = index;
  
  // Get question type display info
  const typeInfo = getQuestionTypeInfo(question.questionType);
  
  // Get answer count for written questions
  let answerCount = '';
  if (question.questionType === 'Written' && question.correctAnswers) {
    answerCount = `${question.correctAnswers.length} answer${question.correctAnswers.length !== 1 ? 's' : ''}`;
  } else if (question.options) {
    answerCount = `${question.options.length} option${question.options.length !== 1 ? 's' : ''}`;
  }
  
  questionItem.innerHTML = `
    <div class="enhanced-question-item-header">
      <div class="enhanced-question-item-number">${index + 1}</div>
      <div class="enhanced-question-item-actions">
        <button type="button" class="btn btn-sm btn-outline-primary" onclick="event.stopPropagation(); previewQuestion('${question._id}')" title="Preview Question">
          <i class="fas fa-eye"></i>
        </button>
      </div>
    </div>
    
    <div class="enhanced-question-item-body">
      <div class="enhanced-question-item-content">
        <div class="enhanced-question-item-text">${question.questionText}</div>
        <div class="enhanced-question-item-meta">
          <div class="enhanced-question-item-type" style="background: ${typeInfo.color}">
            <i class="${typeInfo.icon}"></i>
            <span>${typeInfo.label}</span>
          </div>
          <div class="enhanced-question-item-difficulty difficulty-${question.difficulty.toLowerCase()}">
            <i class="fas fa-signal"></i>
            <span>${question.difficulty}</span>
          </div>
          <div class="enhanced-question-item-points">
            <i class="fas fa-star"></i>
            <span>${question.points} points</span>
          </div>
          <div class="enhanced-question-item-answers">
            <i class="fas fa-list"></i>
            <span>${answerCount}</span>
          </div>
        </div>
      </div>
    </div>
    
    <div class="enhanced-question-item-footer">
      <div class="enhanced-question-item-selection">
        <div class="enhanced-selection-indicator">
          <i class="fas fa-check"></i>
        </div>
        <span class="enhanced-selection-text">Click to select</span>
      </div>
    </div>
  `;
  
  questionItem.addEventListener('click', (e) => {
    e.preventDefault();
    toggleQuestionSelection(question._id, questionItem);
  });
  
  return questionItem;
}

function getQuestionTypeInfo(questionType) {
  const typeMap = {
    'MCQ': { label: 'Multiple Choice', icon: 'fas fa-list-ul', color: '#3b82f6' },
    'True/False': { label: 'True/False', icon: 'fas fa-check-circle', color: '#10b981' },
    'Written': { label: 'Written', icon: 'fas fa-edit', color: '#f59e0b' }
  };
  return typeMap[questionType] || { label: questionType, icon: 'fas fa-question', color: '#6b7280' };
}

function getDifficultyColor(difficulty) {
  const colorMap = {
    'Easy': '#10b981',
    'Medium': '#f59e0b',
    'Hard': '#ef4444'
  };
  return colorMap[difficulty] || '#6b7280';
}

function truncateText(text, maxLength) {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
}

function toggleViewMode() {
  const questionsGrid = document.getElementById('questionsGrid');
  const questionsList = document.getElementById('questionsList');
  const viewModeIcon = document.getElementById('viewModeIcon');
  const viewModeText = document.getElementById('viewModeText');
  
  if (currentViewMode === 'grid') {
    currentViewMode = 'list';
    questionsGrid.style.display = 'none';
    questionsList.style.display = 'block';
    viewModeIcon.className = 'fas fa-list';
    viewModeText.textContent = 'List View';
  } else {
    currentViewMode = 'grid';
    questionsGrid.style.display = 'grid';
    questionsList.style.display = 'none';
    viewModeIcon.className = 'fas fa-th';
    viewModeText.textContent = 'Grid View';
  }
}

// Toggle Question Selection
function toggleQuestionSelection(questionId, element) {
  const existingIndex = selectedQuestions.findIndex(sq => sq.question === questionId);
  
  if (existingIndex > -1) {
    // Remove from selection
    selectedQuestions.splice(existingIndex, 1);
    element.classList.remove('selected');
    
    // Update selection indicator
    const selectionIndicator = element.querySelector('.enhanced-selection-indicator');
    const selectionText = element.querySelector('.enhanced-selection-text');
    if (selectionIndicator && selectionText) {
      selectionIndicator.style.display = 'none';
      selectionText.textContent = 'Click to select';
    }
  } else {
    // Add to selection
    const question = allQuestions.find(q => q._id === questionId);
    selectedQuestions.push({
      question: questionId,
      order: selectedQuestions.length + 1,
      points: question.points || 1
    });
    element.classList.add('selected');
    
    // Update selection indicator
    const selectionIndicator = element.querySelector('.enhanced-selection-indicator');
    const selectionText = element.querySelector('.enhanced-selection-text');
    if (selectionIndicator && selectionText) {
      selectionIndicator.style.display = 'flex';
      selectionText.textContent = 'Selected';
    }
  }
  
  updateSelectionSummary();
  updateCreateButton();
}

// Select All Questions
function selectAllQuestions() {
  const visibleElements = Array.from(document.querySelectorAll('.enhanced-question-card:not([style*="display: none"]), .enhanced-question-item:not([style*="display: none"])'));
  let selectedCount = 0;
  
  visibleElements.forEach(element => {
    const questionId = element.dataset.questionId;
    if (!selectedQuestions.some(sq => sq.question === questionId)) {
      const question = allQuestions.find(q => q._id === questionId);
      selectedQuestions.push({
        question: questionId,
        order: selectedQuestions.length + 1,
        points: question.points || 1
      });
      element.classList.add('selected');
      
      // Update selection indicator
      const selectionIndicator = element.querySelector('.enhanced-selection-indicator');
      const selectionText = element.querySelector('.enhanced-selection-text');
      if (selectionIndicator && selectionText) {
        selectionIndicator.style.display = 'flex';
        selectionText.textContent = 'Selected';
      }
      
      selectedCount++;
    }
  });
  
  updateSelectionSummary();
  updateCreateButton();
  showNotification(`Selected ${selectedCount} questions`, 'success');
}

// Clear Selection
function clearSelection() {
  selectedQuestions = [];
  document.querySelectorAll('.enhanced-question-card, .enhanced-question-item').forEach(element => {
    element.classList.remove('selected');
    
    // Update selection indicator
    const selectionIndicator = element.querySelector('.enhanced-selection-indicator');
    const selectionText = element.querySelector('.enhanced-selection-text');
    if (selectionIndicator && selectionText) {
      selectionIndicator.style.display = 'none';
      selectionText.textContent = 'Click to select';
    }
  });
  updateSelectionSummary();
  updateCreateButton();
  showNotification('Cleared all selections', 'info');
}

// Range Selection
function selectRange() {
  const rangeInput = document.getElementById('rangeInput').value.trim();
  if (!rangeInput) {
    showNotification('Please enter a range (e.g., 1-5, 3, 7-10)', 'error');
    return;
  }

  const questionNumbers = parseRangeInput(rangeInput);
  if (questionNumbers.length === 0) {
    showNotification('Invalid range format. Use: 1-5, 3, 7-10', 'error');
    return;
  }

  // Get all visible question elements (not filtered out)
  const allElements = Array.from(document.querySelectorAll('.enhanced-question-card, .enhanced-question-item'));
  const visibleElements = allElements.filter(element => {
    const style = window.getComputedStyle(element);
    return style.display !== 'none';
  });
  
  let selectedCount = 0;

  questionNumbers.forEach(num => {
    if (num >= 1 && num <= visibleElements.length) {
      const element = visibleElements[num - 1];
      const questionId = element.dataset.questionId;
      
      if (!selectedQuestions.some(sq => sq.question === questionId)) {
        const question = allQuestions.find(q => q._id === questionId);
        if (question) {
          selectedQuestions.push({
            question: questionId,
            order: selectedQuestions.length + 1,
            points: question.points || 1
          });
          element.classList.add('selected');
          
          // Update selection indicator
          const selectionIndicator = element.querySelector('.enhanced-selection-indicator');
          const selectionText = element.querySelector('.enhanced-selection-text');
          if (selectionIndicator && selectionText) {
            selectionIndicator.style.display = 'flex';
            selectionText.textContent = 'Selected';
          }
          
          selectedCount++;
        }
      }
    }
  });

  updateSelectionSummary();
  updateCreateButton();
  
  if (selectedCount > 0) {
    showNotification(`Selected ${selectedCount} questions from range`, 'success');
  } else {
    showNotification('No valid questions found in the specified range', 'warning');
  }
  
  // Clear the input
  document.getElementById('rangeInput').value = '';
}

// Parse range input (e.g., "1-5, 3, 7-10")
function parseRangeInput(input) {
  const numbers = new Set();
  const parts = input.split(',').map(part => part.trim());
  
  parts.forEach(part => {
    if (part.includes('-')) {
      // Range (e.g., "1-5")
      const [start, end] = part.split('-').map(n => parseInt(n.trim()));
      if (!isNaN(start) && !isNaN(end) && start <= end) {
        for (let i = start; i <= end; i++) {
          numbers.add(i);
        }
      }
    } else {
      // Single number (e.g., "3")
      const num = parseInt(part);
      if (!isNaN(num)) {
        numbers.add(num);
      }
    }
  });
  
  return Array.from(numbers).sort((a, b) => a - b);
}

// Select Even Questions
function selectEvenQuestions() {
  const visibleElements = Array.from(document.querySelectorAll('.enhanced-question-card:not([style*="display: none"]), .enhanced-question-item:not([style*="display: none"])'));
  let selectedCount = 0;

  visibleElements.forEach((element, index) => {
    if ((index + 1) % 2 === 0) { // Even numbers (2, 4, 6, ...)
      const questionId = element.dataset.questionId;
      if (!selectedQuestions.some(sq => sq.question === questionId)) {
        const question = allQuestions.find(q => q._id === questionId);
        selectedQuestions.push({
          question: questionId,
          order: selectedQuestions.length + 1,
          points: question.points || 1
        });
        element.classList.add('selected');
        
        // Update selection indicator
        const selectionIndicator = element.querySelector('.enhanced-selection-indicator');
        const selectionText = element.querySelector('.enhanced-selection-text');
        if (selectionIndicator && selectionText) {
          selectionIndicator.style.display = 'flex';
          selectionText.textContent = 'Selected';
        }
        
        selectedCount++;
      }
    }
  });

  updateSelectionSummary();
  updateCreateButton();
  showNotification(`Selected ${selectedCount} even-numbered questions`, 'success');
}

// Select Odd Questions
function selectOddQuestions() {
  const visibleElements = Array.from(document.querySelectorAll('.enhanced-question-card:not([style*="display: none"]), .enhanced-question-item:not([style*="display: none"])'));
  let selectedCount = 0;

  visibleElements.forEach((element, index) => {
    if ((index + 1) % 2 === 1) { // Odd numbers (1, 3, 5, ...)
      const questionId = element.dataset.questionId;
      if (!selectedQuestions.some(sq => sq.question === questionId)) {
        const question = allQuestions.find(q => q._id === questionId);
        selectedQuestions.push({
          question: questionId,
          order: selectedQuestions.length + 1,
          points: question.points || 1
        });
        element.classList.add('selected');
        
        // Update selection indicator
        const selectionIndicator = element.querySelector('.enhanced-selection-indicator');
        const selectionText = element.querySelector('.enhanced-selection-text');
        if (selectionIndicator && selectionText) {
          selectionIndicator.style.display = 'flex';
          selectionText.textContent = 'Selected';
        }
        
        selectedCount++;
      }
    }
  });

  updateSelectionSummary();
  updateCreateButton();
  showNotification(`Selected ${selectedCount} odd-numbered questions`, 'success');
}

// Select Random Questions
function selectRandomQuestions() {
  const visibleElements = Array.from(document.querySelectorAll('.enhanced-question-card:not([style*="display: none"]), .enhanced-question-item:not([style*="display: none"])'));
  const availableQuestions = visibleElements.filter(element => 
    !selectedQuestions.some(sq => sq.question === element.dataset.questionId)
  );
  
  if (availableQuestions.length === 0) {
    showNotification('All visible questions are already selected', 'info');
    return;
  }

  // Select 30% of available questions randomly
  const count = Math.max(1, Math.floor(availableQuestions.length * 0.3));
  const shuffled = availableQuestions.sort(() => 0.5 - Math.random());
  const selected = shuffled.slice(0, count);
  
  selected.forEach(element => {
    const questionId = element.dataset.questionId;
    const question = allQuestions.find(q => q._id === questionId);
    selectedQuestions.push({
      question: questionId,
      order: selectedQuestions.length + 1,
      points: question.points || 1
    });
    element.classList.add('selected');
    
    // Update selection indicator
    const selectionIndicator = element.querySelector('.enhanced-selection-indicator');
    const selectionText = element.querySelector('.enhanced-selection-text');
    if (selectionIndicator && selectionText) {
      selectionIndicator.style.display = 'flex';
      selectionText.textContent = 'Selected';
    }
  });

  updateSelectionSummary();
  updateCreateButton();
  showNotification(`Randomly selected ${count} questions`, 'success');
}

// Filter Questions
function filterQuestions() {
  const difficultyFilter = document.getElementById('difficultyFilter').value;
  const typeFilter = document.getElementById('typeFilter').value;
  const searchFilter = document.getElementById('searchFilter').value.toLowerCase();
  
  // Filter both grid and list view elements
  const questionElements = document.querySelectorAll('.enhanced-question-card, .enhanced-question-item');
  
  questionElements.forEach(element => {
    const questionId = element.dataset.questionId;
    const question = allQuestions.find(q => q._id === questionId);
    
    if (!question) return;
    
    let show = true;
    
    // Check difficulty filter
    if (difficultyFilter && question.difficulty.toLowerCase() !== difficultyFilter.toLowerCase()) {
      show = false;
    }
    
    // Check type filter
    if (typeFilter && question.questionType !== typeFilter) {
      show = false;
    }
    
    // Check search filter
    if (searchFilter && !question.questionText.toLowerCase().includes(searchFilter)) {
      show = false;
    }
    
    // Show/hide the element
    element.style.display = show ? '' : 'none';
  });
  
  // Update visible question count
  updateVisibleQuestionCount();
}

// Update visible question count after filtering
function updateVisibleQuestionCount() {
  const visibleQuestions = document.querySelectorAll('.enhanced-question-card:not([style*="display: none"]), .enhanced-question-item:not([style*="display: none"])');
  const totalQuestions = allQuestions.length;
  const visibleCount = visibleQuestions.length;
  
  const countElement = document.getElementById('questionsCount');
  if (countElement) {
    if (visibleCount === totalQuestions) {
      countElement.textContent = `(${totalQuestions} questions)`;
    } else {
      countElement.textContent = `(${visibleCount} of ${totalQuestions} questions)`;
    }
  }
}

// Update Selection Summary
function updateSelectionSummary() {
  document.getElementById('selectedCount').textContent = selectedQuestions.length;
  
  const totalPoints = selectedQuestions.reduce((sum, sq) => {
    const question = allQuestions.find(q => q._id === sq.question);
    return sum + (question ? question.points : 1);
  }, 0);
  document.getElementById('totalPoints').textContent = totalPoints;
  
  // Calculate average difficulty
  if (selectedQuestions.length > 0) {
    const difficulties = selectedQuestions.map(sq => {
      const question = allQuestions.find(q => q._id === sq.question);
      return question ? question.difficulty : 'medium';
    });
    
    const difficultyCounts = difficulties.reduce((acc, diff) => {
      acc[diff] = (acc[diff] || 0) + 1;
      return acc;
    }, {});
    
    const total = difficulties.length;
    const easyRatio = (difficultyCounts.easy || 0) / total;
    const hardRatio = (difficultyCounts.hard || 0) / total;
    
    let avgDifficulty = 'medium';
    if (hardRatio > 0.4) avgDifficulty = 'hard';
    else if (easyRatio > 0.6) avgDifficulty = 'easy';
    
    document.getElementById('avgDifficulty').textContent = avgDifficulty;
    
    // Calculate estimated time (2 minutes per question average)
    const estimatedTime = Math.ceil(selectedQuestions.length * 2);
    document.getElementById('estimatedTime').textContent = estimatedTime;
  } else {
    document.getElementById('avgDifficulty').textContent = '-';
    document.getElementById('estimatedTime').textContent = '-';
  }
  
  // Update selected questions array (no hidden field needed for JSON submission)
}

// Update Create Button State
function updateCreateButton() {
  const createBtn = document.getElementById('createQuizBtn');
  createBtn.disabled = selectedQuestions.length === 0;
}

// Preview Question
async function previewQuestion(questionId) {
  try {
    const response = await fetch(`/admin/quizzes/api/questions/${questionId}/preview`);
    const data = await response.json();
    
    if (data.success) {
      displayQuestionPreview(data.question);
      const modal = new bootstrap.Modal(document.getElementById('questionPreviewModal'));
      modal.show();
    } else {
      showNotification('Failed to load question preview', 'error');
    }
  } catch (error) {
    console.error('Error loading question preview:', error);
    showNotification('Error loading question preview', 'error');
  }
}

// Enhanced Display Question Preview with MathLive Support and Written Question Answers
function displayQuestionPreview(question) {
  const content = document.getElementById('questionPreviewContent');
  
  // Enhanced question header with better styling
  const questionHeader = `
    <div class="enhanced-question-preview-header">
      <div class="question-meta-badges">
        <div class="meta-badge difficulty-${question.difficulty.toLowerCase()}">
          <i class="fas fa-signal"></i>
          ${question.difficulty.charAt(0).toUpperCase() + question.difficulty.slice(1)}
        </div>
        <div class="meta-badge type-${question.questionType.toLowerCase().replace('/', '-')}">
          <i class="fas fa-tag"></i>
          ${question.questionType.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
        </div>
        <div class="meta-badge points">
          <i class="fas fa-star"></i>
          ${question.points} points
        </div>
      </div>
    </div>
  `;
  
  // Enhanced question text with MathLive support
  let questionTextHtml = '';
  if (question.questionText && question.questionText.includes('\\')) {
    // If it contains LaTeX, render it with MathLive
    questionTextHtml = `
      <div class="enhanced-question-preview-text">
        <math-field readonly 
          style="width: 100%; min-height: 40px; font-size: 16px; border: none; background: transparent; padding: 8px;"
          class="preview-math-field">
          ${question.questionText}
        </math-field>
      </div>
    `;
  } else {
    questionTextHtml = `
      <div class="enhanced-question-preview-text">
        ${question.questionText}
      </div>
    `;
  }
  
  // Enhanced options/answers with MathLive support
  let answersHtml = '';
  
  if (question.questionType === 'Written') {
    // For written questions, show correct answers with mandatory/optional status
    const correctAnswers = question.correctAnswers || [];
    if (correctAnswers.length > 0) {
      const answersList = correctAnswers.map((answer, index) => {
        // Handle both old string format and new object format
        let answerText = '';
        let isMandatory = true;
        
        if (typeof answer === 'string') {
          answerText = answer;
        } else if (typeof answer === 'object' && answer.text) {
          answerText = answer.text;
          isMandatory = answer.isMandatory !== false; // Default to true if not specified
        }
        
        // Check if answer contains LaTeX
        let answerTextHtml = '';
        if (answerText && answerText.includes('\\')) {
          // Render math for answer text
          answerTextHtml = `
            <math-field readonly 
              style="width: 100%; min-height: 30px; font-size: 14px; border: none; background: transparent; padding: 4px;"
              class="preview-math-field answer-math-field">
              ${answerText}
            </math-field>
          `;
        } else {
          answerTextHtml = answerText;
        }
        
        const mandatoryClass = isMandatory ? 'mandatory' : 'optional';
        const mandatoryIcon = isMandatory ? 'fas fa-lock' : 'fas fa-unlock';
        const mandatoryText = isMandatory ? 'Mandatory' : 'Optional';
        
        return `
          <div class="enhanced-written-answer-item ${mandatoryClass}">
            <div class="written-answer-header">
              <div class="written-answer-number">${index + 1}</div>
              <div class="written-answer-mandatory ${mandatoryClass}">
                <i class="${mandatoryIcon}"></i>
                <span>${mandatoryText}</span>
              </div>
            </div>
            <div class="written-answer-content">${answerTextHtml}</div>
          </div>
        `;
      }).join('');
      
      answersHtml = `
        <div class="enhanced-question-preview-answers">
          <div class="answers-title">
            <i class="fas fa-edit"></i>
            Correct Answers
            <span class="answers-count">(${correctAnswers.length} answer${correctAnswers.length !== 1 ? 's' : ''})</span>
          </div>
          <div class="written-answers-list">
            ${answersList}
          </div>
        </div>
      `;
    } else {
      answersHtml = `
        <div class="enhanced-question-preview-answers">
          <div class="answers-title">
            <i class="fas fa-edit"></i>
            Correct Answers
          </div>
          <div class="no-answers-message">
            <i class="fas fa-exclamation-triangle"></i>
            <span>No correct answers defined for this written question.</span>
          </div>
        </div>
      `;
    }
  } else if (question.options && question.options.length > 0) {
    // For MCQ and True/False questions, show options
    answersHtml = `
      <div class="enhanced-question-preview-options">
        <div class="options-title">
          <i class="fas fa-list"></i>
          Answer Options
          <span class="options-count">(${question.options.length} option${question.options.length !== 1 ? 's' : ''})</span>
        </div>
        <div class="options-list">
          ${question.options.map((option, index) => {
            const optionLetter = String.fromCharCode(65 + index);
            let optionTextHtml = '';
            
            if (option.text && option.text.includes('\\')) {
              // If option contains LaTeX, render it with MathLive
              optionTextHtml = `
                <math-field readonly 
                  style="width: 100%; min-height: 30px; font-size: 14px; border: none; background: transparent; padding: 4px;"
                  class="option-math-field">
            ${option.text}
                </math-field>
              `;
            } else {
              optionTextHtml = option.text;
            }
            
            return `
              <div class="enhanced-option-item ${option.isCorrect ? 'correct' : ''}">
                <div class="option-letter ${option.isCorrect ? 'correct' : 'default'}">${optionLetter}</div>
                <div class="option-content">${optionTextHtml}</div>
                ${option.isCorrect ? '<div class="correct-indicator"><i class="fas fa-check"></i></div>' : ''}
          </div>
            `;
          }).join('')}
        </div>
      </div>
    `;
  }
  
  // Enhanced explanation with MathLive support
  let explanationHtml = '';
  if (question.explanation) {
    let explanationTextHtml = '';
    if (question.explanation.includes('\\')) {
      // If explanation contains LaTeX, render it with MathLive
      explanationTextHtml = `
        <math-field readonly 
          style="width: 100%; min-height: 30px; font-size: 14px; border: none; background: transparent; padding: 4px;"
          class="explanation-math-field">
          ${question.explanation}
        </math-field>
      `;
    } else {
      explanationTextHtml = question.explanation;
    }
    
    explanationHtml = `
      <div class="enhanced-question-preview-explanation">
        <div class="explanation-title">
          <i class="fas fa-lightbulb"></i>
          Explanation
        </div>
        <div class="explanation-content">${explanationTextHtml}</div>
      </div>
    `;
  }
  
  content.innerHTML = `
    ${questionHeader}
    ${questionTextHtml}
    ${answersHtml}
    ${explanationHtml}
  `;
  
  // Initialize MathLive fields after content is loaded
  setTimeout(() => {
    initializeMathLiveFields();
  }, 100);
}

// Form Validation and Submission
document.getElementById('quizCreationForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  // Validate all steps
  if (!validateStep1() || !validateStep2() || !validateStep3()) {
    showNotification('Please complete all required fields', 'error');
    return;
  }
  
  // Show loading state
  setCreateButtonLoading(true);
  
  try {
    // Validate that all selected questions belong to the current question bank
    const currentQuestionBank = document.getElementById('questionBank').value;
    if (selectedQuestions.length > 0 && currentQuestionBank) {
      const validQuestionIds = allQuestions.map(q => q._id);
      const invalidSelections = selectedQuestions.filter(selection => 
        !validQuestionIds.includes(selection.question)
      );
      
      if (invalidSelections.length > 0) {
        showNotification(
          `Found ${invalidSelections.length} invalid question selection(s). Please refresh the page and select questions again.`, 
          'error'
        );
        setCreateButtonLoading(false);
        return;
      }
    }
    
    // Prepare form data as JSON
    const formData = {
      title: document.getElementById('title').value.trim(),
      description: document.getElementById('description').value.trim(),
      code: document.getElementById('code').value.trim(),
      questionBank: document.getElementById('questionBank').value,
      duration: parseInt(document.getElementById('duration').value),
      difficulty: document.getElementById('difficulty').value,
      instructions: document.getElementById('instructions').value.trim(),
      passingScore: parseInt(document.getElementById('passingScore').value) || 60,
      maxAttempts: parseInt(document.getElementById('maxAttempts').value) || 3,
      tags: document.getElementById('tags').value.trim(),
      shuffleQuestions: document.getElementById('shuffleQuestions').checked,
      shuffleOptions: document.getElementById('shuffleOptions').checked,
      showCorrectAnswers: document.getElementById('showCorrectAnswers').checked,
      showResults: document.getElementById('showResults').checked,
      selectedQuestions: selectedQuestions,
      thumbnail: thumbnailData
    };
    
    console.log('Submitting form data:', formData);
    
    // Submit via fetch
    const response = await fetch('/admin/quizzes/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify(formData)
    });
    
    const result = await response.json();
    
    if (response.ok && result.success) {
      // Success - show success message and redirect
      showNotification(result.message || 'Quiz created successfully!', 'success');
      
      // Redirect to quizzes page after a short delay
      setTimeout(() => {
        if (result.redirect) {
          window.location.href = result.redirect;
        } else {
          window.location.href = '/admin/quizzes';
        }
      }, 1500);
      
    } else {
      // Handle error response
      console.error('Quiz creation failed:', result);
      showNotification(result.message || 'Failed to create quiz. Please try again.', 'error');
    }
    
  } catch (error) {
    console.error('Error creating quiz:', error);
    showNotification('An unexpected error occurred. Please try again.', 'error');
  } finally {
    // Hide loading state
    setCreateButtonLoading(false);
  }
});

// Set loading state for create button
function setCreateButtonLoading(loading) {
  const createBtn = document.getElementById('createQuizBtn');
  const createIcon = document.getElementById('createQuizIcon');
  const createText = document.getElementById('createQuizText');
  const createLoading = document.getElementById('createQuizLoading');
  
  if (loading) {
    createBtn.disabled = true;
    createIcon.style.display = 'none';
    createText.style.display = 'none';
    createLoading.style.display = 'inline';
  } else {
    createBtn.disabled = selectedQuestions.length === 0;
    createIcon.style.display = 'inline';
    createText.style.display = 'inline';
    createLoading.style.display = 'none';
  }
}

// Reset form to initial state
function resetForm() {
  // Reset form fields but keep the generated code
  const form = document.getElementById('quizCreationForm');
  const generatedCode = document.getElementById('code').value;
  form.reset();
  document.getElementById('code').value = generatedCode;
  
  // Reset steps
  currentStep = 1;
  selectedBankId = null;
  selectedQuestions = [];
  allQuestions = [];
  
  // Reset UI
  showStep(1);
  updateProgress();
  updateSelectionSummary();
  updateCreateButton();
  
  // Hide question bank preview
  const preview = document.getElementById('questionBankPreview');
  if (preview) {
    preview.style.display = 'none';
  }
  
  // Clear questions grid
  const questionsGrid = document.getElementById('questionsGrid');
  if (questionsGrid) {
    questionsGrid.innerHTML = '';
  }
  
  // Reset question count
  document.getElementById('questionsCount').textContent = '(0 questions)';
  
  // Reset filters
  document.getElementById('difficultyFilter').value = '';
  document.getElementById('typeFilter').value = '';
  document.getElementById('searchFilter').value = '';
  document.getElementById('rangeInput').value = '';
  
  showNotification('Form reset. You can now create a new quiz.', 'info');
}

// Quiz code is now generated on the server side

// Notification function
function showNotification(message, type = 'info') {
  // Create notification element
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.innerHTML = `
    <div class="notification-content">
      <i class="fas fa-${type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
      <span>${message}</span>
    </div>
    <button class="notification-close" onclick="this.parentElement.remove()">
      <i class="fas fa-times"></i>
    </button>
  `;
  
  // Add to page
  document.body.appendChild(notification);
  
  // Auto remove after 5 seconds
  setTimeout(() => {
    if (notification.parentElement) {
      notification.remove();
    }
  }, 5000);
}

// Thumbnail Upload Functions
function initializeThumbnailUpload() {
  const uploadArea = document.getElementById('thumbnailUploadArea');
  const fileInput = document.getElementById('thumbnailInput');
  const preview = document.getElementById('thumbnailPreview');
  const progressContainer = document.getElementById('thumbnailProgress');

  // Click to upload
  uploadArea.addEventListener('click', () => {
    fileInput.click();
  });

  // Drag and drop functionality
  uploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    uploadArea.classList.add('drag-over');
  });

  uploadArea.addEventListener('dragleave', () => {
    uploadArea.classList.remove('drag-over');
  });

  uploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    uploadArea.classList.remove('drag-over');
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleThumbnailUpload(files[0]);
    }
  });

  // File input change
  fileInput.addEventListener('change', (e) => {
    if (e.target.files.length > 0) {
      handleThumbnailUpload(e.target.files[0]);
    }
  });
}

async function handleThumbnailUpload(file) {
  // Validate file
  if (!file.type.startsWith('image/')) {
    showNotification('Please select a valid image file', 'error');
    return;
  }

  if (file.size > 5 * 1024 * 1024) { // 5MB limit
    showNotification('Image size must be less than 5MB', 'error');
    return;
  }

  // Show progress
  showThumbnailProgress();

  try {
    // Create FormData for upload
    const formData = new FormData();
    formData.append('thumbnail', file);

    // Upload with progress tracking
    const response = await fetch('/admin/quizzes/upload-thumbnail', {
      method: 'POST',
      body: formData
    });

    if (!response.ok) {
      throw new Error('Upload failed');
    }

    const result = await response.json();
    
    if (result.success) {
      thumbnailData = result.thumbnail;
      showThumbnailPreview(result.thumbnail.url);
      hideThumbnailProgress();
      showNotification('Thumbnail uploaded successfully!', 'success');
    } else {
      throw new Error(result.message || 'Upload failed');
    }
  } catch (error) {
    console.error('Thumbnail upload error:', error);
    hideThumbnailProgress();
    showNotification('Failed to upload thumbnail: ' + error.message, 'error');
  }
}

function showThumbnailProgress() {
  const progressContainer = document.getElementById('thumbnailProgress');
  const progressBar = document.getElementById('thumbnailProgressBar');
  const progressText = document.getElementById('thumbnailProgressText');
  
  progressContainer.style.display = 'block';
  progressBar.style.width = '0%';
  progressText.textContent = 'Preparing upload...';
  
  // Simulate progress for better UX
  let progress = 0;
  const interval = setInterval(() => {
    progress += Math.random() * 15;
    if (progress > 90) progress = 90;
    progressBar.style.width = progress + '%';
    progressText.textContent = `Uploading... ${Math.round(progress)}%`;
  }, 200);

  // Store interval to clear it later
  progressContainer.dataset.interval = interval;
}

function hideThumbnailProgress() {
  const progressContainer = document.getElementById('thumbnailProgress');
  const progressBar = document.getElementById('thumbnailProgressBar');
  
  // Clear progress simulation
  if (progressContainer.dataset.interval) {
    clearInterval(progressContainer.dataset.interval);
  }
  
  progressBar.style.width = '100%';
  
  setTimeout(() => {
    progressContainer.style.display = 'none';
  }, 500);
}

function showThumbnailPreview(url) {
  const preview = document.getElementById('thumbnailPreview');
  const image = document.getElementById('thumbnailImage');
  const uploadArea = document.getElementById('thumbnailUploadArea');
  
  image.src = url;
  preview.style.display = 'block';
  uploadArea.style.display = 'none';
}

function removeThumbnail() {
  const preview = document.getElementById('thumbnailPreview');
  const uploadArea = document.getElementById('thumbnailUploadArea');
  const fileInput = document.getElementById('thumbnailInput');
  
  thumbnailData = null;
  preview.style.display = 'none';
  uploadArea.style.display = 'block';
  fileInput.value = '';
  
  showNotification('Thumbnail removed', 'info');
}

// MathLive Functions
function initializeMathLiveFields() {
  // Initialize all math-field elements in the preview
  const mathFields = document.querySelectorAll('math-field');
  mathFields.forEach(field => {
    if (field && !field.hasAttribute('data-initialized')) {
      field.setAttribute('data-initialized', 'true');
      // MathLive will automatically initialize math-field elements
    }
  });
}

// Setup MathLive virtual keyboard z-index fix
function setupMathLiveKeyboardFix() {
  // Monitor for virtual keyboard appearance
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            // Check if it's a MathLive virtual keyboard
            if (node.classList && node.classList.contains('ML__keyboard')) {
              node.style.zIndex = '9999';
            }
            // Also check child elements
            const keyboards = node.querySelectorAll && node.querySelectorAll('.ML__keyboard');
            if (keyboards) {
              keyboards.forEach(keyboard => {
                keyboard.style.zIndex = '9999';
              });
            }
          }
        });
      }
    });
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
}

// Enhanced thumbnail functions
function changeThumbnail() {
  document.getElementById('thumbnailInput').click();
}

function showThumbnailPreview(url) {
  const preview = document.getElementById('thumbnailPreview');
  const image = document.getElementById('thumbnailImage');
  const uploadArea = document.getElementById('thumbnailUploadArea');
  const fileInput = document.getElementById('thumbnailInput');
  
  image.src = url;
  preview.style.display = 'block';
  uploadArea.style.display = 'none';
  
  // Show file info if available
  if (fileInput.files && fileInput.files[0]) {
    const file = fileInput.files[0];
    document.getElementById('thumbnailFilename').textContent = file.name;
    document.getElementById('thumbnailSize').textContent = formatFileSize(file.size);
  }
}

function formatFileSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
  updateProgress();
  initializeThumbnailUpload();
  setupMathLiveKeyboardFix();
  
  // Debug: Check if question banks are loaded
  const questionBankSelect = document.getElementById('questionBank');
  console.log('Question banks loaded:', questionBankSelect.options.length - 1); // -1 for the default option
  
  // Debug: Log each option
  for (let i = 1; i < questionBankSelect.options.length; i++) {
    const option = questionBankSelect.options[i];
    console.log(`Option ${i}:`, {
      value: option.value,
      text: option.textContent,
      title: option.dataset.title,
      code: option.dataset.code,
      questions: option.dataset.questions
    });
  }
  
  // If we're on step 3 and no question bank is selected, show the no questions message
  if (currentStep === 3 && !selectedBankId) {
    displayQuestions([]);
  }
});
</script>

    </div>
    
  </main>
</div>

<%- include('./partials/admin-footer') %>

