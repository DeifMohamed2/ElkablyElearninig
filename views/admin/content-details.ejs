<%- include('./partials/admin-header') %>

<!-- Admin Layout -->
<div class="admin-layout">

  <!-- Sidebar -->
  <%- include('./partials/admin-sidebar', { currentPage: 'courses' }) %>

  <!-- Main Content -->
  <main class="admin-main">

    <!-- Top Bar -->
    <%- include('./partials/admin-topbar', { 
        breadcrumb: `Courses / ${course.title} / ${topic.title} / ${contentItem.title}`,
        breadcrumbSubtitle: 'Content Details and Student Analytics',
        showSearch: false
    }) %>

    <!-- Content Area -->
    <div class="admin-content">
      <div class="admin-dashboard admin-fade-in">

        <!-- Content Header -->
        <div class="content-header-card">
          <div class="content-header-content">
            <div class="content-header-top">
              <div class="content-badges">
                <span class="content-type-badge content-type-<%= contentItem.type %>">
                  <i class="fas fa-<%= getContentIcon(contentItem.type) %>"></i>
                  <%= contentItem.type.charAt(0).toUpperCase() + contentItem.type.slice(1) %>
                </span>
                <span class="difficulty-badge difficulty-<%= contentItem.difficulty || 'beginner' %>">
                  <%= (contentItem.difficulty || 'beginner').charAt(0).toUpperCase() + (contentItem.difficulty || 'beginner').slice(1) %>
                </span>
                <% if (contentItem.isRequired) { %>
                <span class="required-badge">
                  <i class="fas fa-star"></i>
                  Required
                </span>
                <% } %>
                <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
                <span class="attempts-badge">
                  <i class="fas fa-redo"></i>
                  Max <%= contentItem.type === 'quiz' ? (contentItem.quizSettings?.maxAttempts || 3) : (contentItem.homeworkSettings?.maxAttempts || 1) %> attempts
                </span>
                <% } %>
              </div>
              <div class="content-header-actions">
                <button class="btn btn-outline-secondary btn-sm" onclick="exportData()">
                  <i class="fas fa-download"></i>
                  Export Data
                </button>
              </div>
            </div>

            <div class="content-title-section">
              <h1 class="content-title"><%= contentItem.title %></h1>
              <% if (contentItem.description) { %>
              <p class="content-description"><%= contentItem.description %></p>
              <% } %>
            </div>

            <div class="content-stats-grid">
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-users"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.totalStudents %></div>
                  <div class="stat-label">Total Students</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-eye"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.viewedStudents %></div>
                  <div class="stat-label">Viewed</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.completedStudents %></div>
                  <div class="stat-label">Completed</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-percentage"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.completionRate %>%</div>
                  <div class="stat-label">Completion Rate</div>
                </div>
              </div>
              <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-chart-line"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.averageGrade || analytics.averageScore || 0 %>%</div>
                  <div class="stat-label">Average Score</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-trophy"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.passRate || 0 %>%</div>
                  <div class="stat-label">Pass Rate</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-medal"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.highestScore || 0 %>%</div>
                  <div class="stat-label">Highest Score</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-redo"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.totalAttempts %></div>
                  <div class="stat-label">Total Attempts</div>
                </div>
              </div>
              <% } %>
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-clock"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.averageTimeSpent %>m</div>
                  <div class="stat-label">Avg Time</div>
                </div>
              </div>
              <% if (analytics.totalPoints > 0) { %>
              <div class="stat-card">
                <div class="stat-icon">
                  <i class="fas fa-star"></i>
                </div>
                <div class="stat-content">
                  <div class="stat-number"><%= analytics.totalPoints %></div>
                  <div class="stat-label">Total Points</div>
                </div>
              </div>
              <% } %>
            </div>
          </div>
        </div>

        <!-- Content Information -->
        <div class="content-info-section">
          <div class="row">
            <div class="col-md-8">
              <div class="content-details-card">
                <div class="card-header">
                  <h5><i class="fas fa-info-circle me-2"></i>Content Information</h5>
                </div>
                <div class="card-body">
                  <div class="content-meta-grid">
                    <div class="meta-item">
                      <label>Content Type:</label>
                      <span class="content-type-badge content-type-<%= contentItem.type %>">
                        <i class="fas fa-<%= getContentIcon(contentItem.type) %>"></i>
                        <%= contentItem.type.charAt(0).toUpperCase() + contentItem.type.slice(1) %>
                      </span>
                    </div>
                    <div class="meta-item">
                      <label>Duration:</label>
                      <span><%= contentItem.duration || 0 %> minutes</span>
                    </div>
                    <div class="meta-item">
                      <label>Difficulty:</label>
                      <span class="difficulty-badge difficulty-<%= contentItem.difficulty || 'beginner' %>">
                        <%= (contentItem.difficulty || 'beginner').charAt(0).toUpperCase() + (contentItem.difficulty || 'beginner').slice(1) %>
                      </span>
                    </div>
                    <div class="meta-item">
                      <label>Required:</label>
                      <span class="<%= contentItem.isRequired ? 'text-success' : 'text-muted' %>">
                        <i class="fas fa-<%= contentItem.isRequired ? 'check' : 'times' %>"></i>
                        <%= contentItem.isRequired ? 'Yes' : 'No' %>
                      </span>
                    </div>
                    <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
                    <div class="meta-item">
                      <label>Questions:</label>
                      <span><%= contentItem.selectedQuestions ? contentItem.selectedQuestions.length : 0 %> questions</span>
                    </div>
                    <div class="meta-item">
                      <label>Total Points:</label>
                      <span><%= contentItem.selectedQuestions ? contentItem.selectedQuestions.reduce((total, q) => total + (q.points || 1), 0) : 0 %> points</span>
                    </div>
                    <div class="meta-item">
                      <label>Max Attempts:</label>
                      <span><%= contentItem.type === 'quiz' ? (contentItem.quizSettings?.maxAttempts || 3) : (contentItem.homeworkSettings?.maxAttempts || 1) %></span>
                    </div>
                    <div class="meta-item">
                      <label>Passing Score:</label>
                      <span><%= contentItem.type === 'quiz' ? (contentItem.quizSettings?.passingScore || 60) : (contentItem.homeworkSettings?.passingScore || 60) %>%</span>
                    </div>
                    <% if (contentItem.type === 'quiz' && contentItem.quizSettings?.duration) { %>
                    <div class="meta-item">
                      <label>Time Limit:</label>
                      <span><%= contentItem.quizSettings.duration %> minutes</span>
                    </div>
                    <% } %>
                    <% } else { %>
                    <div class="meta-item">
                      <label>Content URL:</label>
                      <a href="<%= contentItem.content %>" target="_blank" class="content-url">
                        <i class="fas fa-external-link-alt"></i>
                        View Content
                      </a>
                    </div>
                    <% } %>
                    <% if (contentItem.tags && contentItem.tags.length > 0) { %>
                    <div class="meta-item">
                      <label>Tags:</label>
                      <div class="tags-container">
                        <% contentItem.tags.forEach(tag => { %>
                        <span class="tag"><%= tag %></span>
                        <% }); %>
                      </div>
                    </div>
                    <% } %>
                    <% if (contentItem.learningObjectives && contentItem.learningObjectives.length > 0) { %>
                    <div class="meta-item full-width">
                      <label>Learning Objectives:</label>
                      <ul class="learning-objectives">
                        <% contentItem.learningObjectives.forEach(objective => { %>
                        <li><%= objective %></li>
                        <% }); %>
                      </ul>
                    </div>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>

            <div class="col-md-4">
              <div class="prerequisite-card">
                <div class="card-header">
                  <h5><i class="fas fa-link me-2"></i>Prerequisites</h5>
                </div>
                <div class="card-body">
                  <% if (prerequisiteContent) { %>
                  <div class="prerequisite-item">
                    <div class="prerequisite-info">
                      <h6><%= prerequisiteContent.title %></h6>
                      <p class="prerequisite-meta">
                        Topic <%= prerequisiteContent.topicOrder %>: <%= prerequisiteContent.topicTitle %>
                      </p>
                      <span class="content-type-badge content-type-<%= prerequisiteContent.type %>">
                        <i class="fas fa-<%= getContentIcon(prerequisiteContent.type) %>"></i>
                        <%= prerequisiteContent.type.charAt(0).toUpperCase() + prerequisiteContent.type.slice(1) %>
                      </span>
                    </div>
                  </div>
                  <% } else { %>
                  <div class="no-prerequisites">
                    <i class="fas fa-unlock"></i>
                    <p>No prerequisites required</p>
                    <small>This content is available immediately</small>
                  </div>
                  <% } %>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Zoom Meeting Details Section -->
        <% if (contentItem.type === 'zoom' && zoomMeetingData) { %>
        <div class="zoom-meeting-analytics">
          <!-- Meeting Overview Cards -->
          <div class="meeting-overview-section">
            <div class="row">
              <div class="col-12">
                <div class="content-details-card">
                  <div class="card-header">
                    <h5><i class="fas fa-video me-2"></i>Zoom Meeting Overview</h5>
                    <div class="header-actions">
                      <span class="meeting-status-indicator status-<%= zoomMeetingData.status %>">
                        <i class="fas fa-<%= zoomMeetingData.status === 'active' ? 'play-circle' : zoomMeetingData.status === 'ended' ? 'stop-circle' : 'clock' %>"></i>
                        <%= zoomMeetingData.status.charAt(0).toUpperCase() + zoomMeetingData.status.slice(1) %>
                      </span>
                    </div>
                  </div>
                  <div class="card-body">
                    <!-- Meeting Info Grid -->
                    <div class="meeting-info-grid">
                      <div class="info-card">
                        <div class="info-icon">
                          <i class="fas fa-id-card"></i>
                        </div>
                        <div class="info-content">
                          <span class="info-label">Meeting ID</span>
                          <span class="info-value meeting-id-value"><%= zoomMeetingData.meetingId %></span>
                        </div>
                      </div>

                      <div class="info-card">
                        <div class="info-icon">
                          <i class="fas fa-calendar-alt"></i>
                        </div>
                        <div class="info-content">
                          <span class="info-label">Scheduled</span>
                          <span class="info-value"><%= new Date(zoomMeetingData.scheduledStartTime).toLocaleString() %></span>
                        </div>
                      </div>

                      <% if (zoomMeetingData.actualStartTime) { %>
                      <div class="info-card">
                        <div class="info-icon">
                          <i class="fas fa-play"></i>
                        </div>
                        <div class="info-content">
                          <span class="info-label">Started</span>
                          <span class="info-value"><%= new Date(zoomMeetingData.actualStartTime).toLocaleString() %></span>
                        </div>
                      </div>
                      <% } %>

                      <% if (zoomMeetingData.actualEndTime) { %>
                      <div class="info-card">
                        <div class="info-icon">
                          <i class="fas fa-stop"></i>
                        </div>
                        <div class="info-content">
                          <span class="info-label">Ended</span>
                          <span class="info-value"><%= new Date(zoomMeetingData.actualEndTime).toLocaleString() %></span>
                        </div>
                      </div>
                      <% } %>

                      <div class="info-card">
                        <div class="info-icon">
                          <i class="fas fa-clock"></i>
                        </div>
                        <div class="info-content">
                          <span class="info-label">Duration</span>
                          <span class="info-value"><%= zoomMeetingData.actualDuration || zoomMeetingData.duration %> minutes</span>
                        </div>
                      </div>

                      <div class="info-card">
                        <div class="info-icon">
                          <i class="fas fa-users"></i>
                        </div>
                        <div class="info-content">
                          <span class="info-label">Participants</span>
                          <span class="info-value"><%= zoomMeetingData.totalParticipants %></span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Meeting Statistics -->
          <div class="meeting-stats-section">
            <div class="row">
              <div class="col-md-8">
                <div class="content-details-card">
                  <div class="card-header">
                    <h6><i class="fas fa-chart-bar me-2"></i>Meeting Analytics</h6>
                  </div>
                  <div class="card-body">
                    <div class="stats-grid">
                      <div class="stat-item">
                        <div class="stat-icon bg-primary">
                          <i class="fas fa-users"></i>
                        </div>
                        <div class="stat-content">
                          <div class="stat-number"><%= zoomMeetingData.maxConcurrentParticipants %></div>
                          <div class="stat-label">Peak Attendance</div>
                        </div>
                      </div>

                      <div class="stat-item">
                        <div class="stat-icon bg-success">
                          <i class="fas fa-percentage"></i>
                        </div>
                        <div class="stat-content">
                          <div class="stat-number"><%= zoomMeetingData.averageAttendancePercentage %>%</div>
                          <div class="stat-label">Avg Attendance</div>
                        </div>
                      </div>

                      <% if (zoomMeetingData.meetingStats) { %>
                      <div class="stat-item">
                        <div class="stat-icon bg-info">
                          <i class="fas fa-clock"></i>
                        </div>
                        <div class="stat-content">
                          <div class="stat-number"><%= zoomMeetingData.meetingStats.averageSessionDuration %>m</div>
                          <div class="stat-label">Avg Session</div>
                        </div>
                      </div>

                      <div class="stat-item">
                        <div class="stat-icon bg-warning">
                          <i class="fas fa-video"></i>
                        </div>
                        <div class="stat-content">
                          <div class="stat-number"><%= zoomMeetingData.meetingStats.cameraOnPercentage %>%</div>
                          <div class="stat-label">Camera Usage</div>
                        </div>
                      </div>

                      <div class="stat-item">
                        <div class="stat-icon bg-secondary">
                          <i class="fas fa-microphone"></i>
                        </div>
                        <div class="stat-content">
                          <div class="stat-number"><%= zoomMeetingData.meetingStats.micOnPercentage %>%</div>
                          <div class="stat-label">Mic Usage</div>
                        </div>
                      </div>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>

              <div class="col-md-4">
                <% if (zoomMeetingData.meetingStats) { %>
                <div class="content-details-card">
                  <div class="card-header">
                    <h6><i class="fas fa-chart-pie me-2"></i>Attendance Distribution</h6>
                  </div>
                  <div class="card-body">
                    <div class="attendance-distribution">
                      <div class="distribution-item excellent">
                        <div class="distribution-info">
                          <span class="distribution-label">Excellent (80%+)</span>
                          <span class="distribution-count"><%= zoomMeetingData.meetingStats.attendanceDistribution.excellent %></span>
                        </div>
                        <div class="distribution-bar">
                          <div class="bar-fill" style="width: <%= zoomMeetingData.totalParticipants > 0 ? (zoomMeetingData.meetingStats.attendanceDistribution.excellent / zoomMeetingData.totalParticipants) * 100 : 0 %>%"></div>
                        </div>
                      </div>

                      <div class="distribution-item good">
                        <div class="distribution-info">
                          <span class="distribution-label">Good (60-80%)</span>
                          <span class="distribution-count"><%= zoomMeetingData.meetingStats.attendanceDistribution.good %></span>
                        </div>
                        <div class="distribution-bar">
                          <div class="bar-fill" style="width: <%= zoomMeetingData.totalParticipants > 0 ? (zoomMeetingData.meetingStats.attendanceDistribution.good / zoomMeetingData.totalParticipants) * 100 : 0 %>%"></div>
                        </div>
                      </div>

                      <div class="distribution-item fair">
                        <div class="distribution-info">
                          <span class="distribution-label">Fair (40-60%)</span>
                          <span class="distribution-count"><%= zoomMeetingData.meetingStats.attendanceDistribution.fair %></span>
                        </div>
                        <div class="distribution-bar">
                          <div class="bar-fill" style="width: <%= zoomMeetingData.totalParticipants > 0 ? (zoomMeetingData.meetingStats.attendanceDistribution.fair / zoomMeetingData.totalParticipants) * 100 : 0 %>%"></div>
                        </div>
                      </div>

                      <div class="distribution-item poor">
                        <div class="distribution-info">
                          <span class="distribution-label">Poor (<40%)< /span>
                              <span class="distribution-count"><%= zoomMeetingData.meetingStats.attendanceDistribution.poor %></span>
                        </div>
                        <div class="distribution-bar">
                          <div class="bar-fill" style="width: <%= zoomMeetingData.totalParticipants > 0 ? (zoomMeetingData.meetingStats.attendanceDistribution.poor / zoomMeetingData.totalParticipants) * 100 : 0 %>%"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <% } %>
              </div>
            </div>
          </div>

          <!-- Student Attendance Table -->
          <div class="meeting-attendance-section">
            <div class="content-details-card">
              <div class="card-header">
                <h6><i class="fas fa-list-ul me-2"></i>Student Attendance Details</h6>
                <div class="header-actions">
                  <button class="btn btn-outline-primary btn-sm" onclick="exportZoomAttendance()">
                    <i class="fas fa-download me-1"></i>Export Attendance
                  </button>
                </div>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-hover attendance-table" id="zoomAttendanceTable">
                    <thead>
                      <tr>
                        <th width="5%">#</th>
                        <th width="25%">Student</th>
                        <th width="15%">Entry Time</th>
                        <th width="15%">Exit Time</th>
                        <th width="10%">Duration</th>
                        <th width="10%">Attendance</th>
                        <th width="10%">Sessions</th>
                        <th width="10%">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% zoomMeetingData.studentsAttended.forEach((attendance, index) => { %>
                      <tr class="attendance-row <%= attendance.attendancePercentage >= 80 ? 'excellent-attendance' : attendance.attendancePercentage >= 60 ? 'good-attendance' : attendance.attendancePercentage >= 40 ? 'fair-attendance' : 'poor-attendance' %>">
                        <td>
                          <div class="rank-badge rank-<%= index + 1 <= 3 ? 'top' : 'normal' %>">
                            <%= index + 1 %>
                          </div>
                        </td>
                        <td>
                          <div class="student-profile">
                            <div class="student-avatar">
                              <i class="fas fa-user"></i>
                            </div>
                            <div class="student-details">
                              <div class="student-name"><%= attendance.student.firstName %> <%= attendance.student.lastName %></div>
                              <div class="student-email"><%= attendance.student.studentEmail %></div>
                              <div class="student-code">ID: <%= attendance.student.studentCode || 'N/A' %></div>
                            </div>
                          </div>
                        </td>
                        <td>
                          <div class="time-info">
                            <% if (attendance.firstJoinTime) { %>
                            <div class="time-value"><%= new Date(attendance.firstJoinTime).toLocaleTimeString('en-US', {hour12: false}) %></div>
                            <div class="time-date"><%= new Date(attendance.firstJoinTime).toLocaleDateString() %></div>
                            <% } else { %>
                            <span class="text-muted">-</span>
                            <% } %>
                          </div>
                        </td>
                        <td>
                          <div class="time-info">
                            <% if (attendance.lastLeaveTime) { %>
                            <div class="time-value"><%= new Date(attendance.lastLeaveTime).toLocaleTimeString('en-US', {hour12: false}) %></div>
                            <div class="time-date"><%= new Date(attendance.lastLeaveTime).toLocaleDateString() %></div>
                            <% } else if (attendance.isCurrentlyInMeeting) { %>
                            <span class="badge badge-success">In Meeting</span>
                            <% } else { %>
                            <span class="text-muted">-</span>
                            <% } %>
                          </div>
                        </td>
                        <td>
                          <div class="duration-badge">
                            <i class="fas fa-clock me-1"></i>
                            <%
                              let calculatedDuration = 0;
                              // Calculate duration from first join to last leave time
                              if (attendance.firstJoinTime && attendance.lastLeaveTime) {
                                const firstJoin = new Date(attendance.firstJoinTime);
                                const lastLeave = new Date(attendance.lastLeaveTime);
                                const durationMs = lastLeave - firstJoin;
                                calculatedDuration = Math.max(0, Math.round(durationMs / (1000 * 60)));
                              } else if (attendance.totalTimeSpent) {
                                // Fallback to totalTimeSpent if available
                                calculatedDuration = attendance.totalTimeSpent;
                              }
                            %>
                            <%= calculatedDuration %> min
                          </div>
                        </td>
                        <td>
                          <div class="attendance-indicator">
                            <div class="circular-progress" data-percentage="<%= attendance.attendancePercentage %>">
                              <svg width="50" height="50" viewBox="0 0 50 50">
                                <circle cx="25" cy="25" r="20" fill="none" stroke="#e9ecef" stroke-width="4" />
                                <circle cx="25" cy="25" r="20" fill="none" stroke="<%= attendance.attendancePercentage >= 80 ? '#28a745' : attendance.attendancePercentage >= 60 ? '#ffc107' : attendance.attendancePercentage >= 40 ? '#fd7e14' : '#dc3545' %>" stroke-width="4" stroke-dasharray="<%= (attendance.attendancePercentage / 100) * 125.6 %>, 125.6" transform="rotate(-90 25 25)" />
                              </svg>
                              <div class="percentage-text"><%= attendance.attendancePercentage %>%</div>
                            </div>
                          </div>
                        </td>
                        <td>
                          <div class="session-info">
                            <span class="session-count">
                              <i class="fas fa-sign-in-alt me-1"></i>
                              <%= attendance.joinEvents.length %>
                            </span>
                          </div>
                        </td>
                        <td>
                          <div class="action-buttons">
                            <button class="btn btn-outline-primary btn-sm" onclick="viewStudentTimeline('<%= attendance.student._id %>', '<%= attendance.student.firstName %> <%= attendance.student.lastName %>')" title="View Timeline">
                              <i class="fas fa-timeline"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" onclick="viewStudentDetails('<%= attendance.student.studentEmail %>')" title="View Student Profile">
                              <i class="fas fa-user"></i>
                            </button>
                          </div>
                        </td>
                      </tr>
                      <% }); %>
                    </tbody>
                  </table>
                </div>

                <!-- Table Summary -->
                <div class="table-summary">
                  <div class="summary-stats">
                    <span class="summary-item">
                      <strong><%= zoomMeetingData.studentsAttended.length %></strong> total participants
                    </span>
                    <span class="summary-item">
                      <strong><%= zoomMeetingData.studentsAttended.filter(s => s.attendancePercentage >= 80).length %></strong> excellent attendance
                    </span>
                    <span class="summary-item">
                      <strong><%= zoomMeetingData.averageAttendancePercentage %>%</strong> average attendance
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <% } %>

        <!-- Student Progress Section -->
        <div class="student-progress-section">
          <div class="section-header">
            <div class="section-title">
              <h3>
                <i class="fas fa-users"></i>
                <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
                Student Rankings & Performance
                <% } else { %>
                Student Progress & Completion
                <% } %>
              </h3>
              <span class="student-count"><%= studentProgress.length %> students</span>
            </div>
            <div class="section-actions">
              <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" id="studentSearch" placeholder="Search by name, email, or code..." autocomplete="off">
              </div>
              <select id="statusFilter" class="filter-select">
                <option value="">All Status</option>
                <option value="completed">✓ Completed</option>
                <option value="in_progress">⏳ In Progress</option>
                <option value="not_started">○ Not Started</option>
                <option value="failed">✗ Failed</option>
              </select>
              <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
              <select id="scoreFilter" class="filter-select">
                <option value="">All Scores</option>
                <option value="90-100">🏆 90-100% (Excellent)</option>
                <option value="80-89">⭐ 80-89% (Very Good)</option>
                <option value="70-79">👍 70-79% (Good)</option>
                <option value="60-69">📈 60-69% (Pass)</option>
                <option value="0-59">📉 Below 60% (Fail)</option>
              </select>
              <% } %>
              <button class="btn btn-outline-primary btn-sm" onclick="exportStudentData()">
                <i class="fas fa-download"></i>
                <span class="btn-text">Export</span>
              </button>
            </div>
          </div>

          <div class="students-table-container">
            <table class="students-table" id="studentsTable">
              <thead>
                <tr>
                  <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
                  <th width="5%">Rank</th>
                  <% } %>
                  <th width="20%">
                    Student
                    <button class="sort-btn" onclick="sortStudents('name')">
                      <i class="fas fa-sort"></i>
                    </button>
                  </th>
                  <th width="10%">Student Code</th>
                  <th width="12%">Contact Info</th>
                  <th width="10%">
                    Progress
                    <button class="sort-btn" onclick="sortStudents('progress')">
                      <i class="fas fa-sort"></i>
                    </button>
                  </th>
                  <th width="10%">Status</th>
                  <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
                  <th width="8%">
                    Best Score
                    <button class="sort-btn" onclick="sortStudents('bestScore')">
                      <i class="fas fa-sort"></i>
                    </button>
                  </th>
                  <th width="8%">
                    Latest Grade
                    <button class="sort-btn" onclick="sortStudents('grade')">
                      <i class="fas fa-sort"></i>
                    </button>
                  </th>
                  <th width="7%">Result</th>
                  <th width="7%">Attempts</th>
                  <th width="7%">Points</th>
                  <% } %>
                  <th width="8%">Time Spent</th>
                  <th width="10%">Last Accessed</th>
                  <th width="10%">Actions</th>
                </tr>
              </thead>
              <tbody>
                <% if (studentProgress.length === 0) { %>
                <tr>
                  <td colspan="<%= contentItem.type === 'quiz' || contentItem.type === 'homework' ? '14' : '9' %>" class="empty-state">
                    <i class="fas fa-users-slash"></i>
                    <h3>No Students Found</h3>
                    <p>No students have accessed this content yet.</p>
                  </td>
                </tr>
                <% } else { %>
                <% studentProgress.forEach((student, index) => { %>
                <tr class="student-row" data-status="<%= student.status %>" data-rank="<%= index + 1 %>">
                  <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
                  <td>
                    <% if (index < 3 && student.status === 'completed') { %>
                    <div class="rank-badge rank-top">
                      <% if (index === 0) { %>
                      🥇
                      <% } else if (index === 1) { %>
                      🥈
                      <% } else if (index === 2) { %>
                      🥉
                      <% } %>
                    </div>
                    <% } else { %>
                    <div class="rank-badge">#<%= index + 1 %></div>
                    <% } %>
                  </td>
                  <% } %>
                  <td>
                    <div class="student-profile">
                      <div class="student-avatar">
                        <%= student.name.charAt(0).toUpperCase() %>
                      </div>
                      <div class="student-details">
                        <div class="student-name"><%= student.name %></div>
                        <div class="student-email"><%= student.email %></div>
                        <div class="student-code">ID: <%= student.studentCode %></div>
                      </div>
                    </div>
                  </td>
                  <td>
                    <span class="student-code"><%= student.studentCode %></span>
                  </td>
                  <td>
                    <div class="contact-info">
                      <div class="contact-item">
                        <i class="fas fa-phone"></i>
                        <span><%= student.studentPhone || 'N/A' %></span>
                      </div>
                      <div class="contact-item">
                        <i class="fas fa-user-friends"></i>
                        <span><%= student.parentPhone || 'N/A' %></span>
                      </div>
                    </div>
                  </td>
                  <td>
                    <div class="progress-container">
                      <div class="progress-percentage">
                        <span><%= student.progress %>%</span>
                      </div>
                      <div class="progress-bar">
                        <div class="progress-fill" style="width: <%= student.progress %>%" data-progress="<%= student.progress %>"></div>
                      </div>
                    </div>
                  </td>
                  <td>
                    <span class="status-badge status-<%= student.status %>">
                      <i class="fas fa-<%= getStatusIcon(student.status) %>"></i>
                      <%= student.status.charAt(0).toUpperCase() + student.status.slice(1).replace('_', ' ') %>
                    </span>
                  </td>
                  <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
                  <td>
                    <% if (student.bestScore !== null && student.bestScore !== undefined) { %>
                    <span class="score-badge">
                      <%= student.bestScore %>%
                    </span>
                    <% } else { %>
                    <span class="text-muted">-</span>
                    <% } %>
                  </td>
                  <td>
                    <% if (student.grade !== null && student.grade !== undefined) { %>
                    <span class="grade-badge">
                      <%= student.grade %>%
                    </span>
                    <% } else { %>
                    <span class="text-muted">-</span>
                    <% } %>
                  </td>
                  <td>
                    <% if (student.passed !== null) { %>
                    <span class="result-badge <%= student.passed ? 'pass' : 'fail' %>">
                      <i class="fas fa-<%= student.passed ? 'check-circle' : 'times-circle' %>"></i>
                      <%= student.passed ? 'Pass' : 'Fail' %>
                    </span>
                    <% } else { %>
                    <span class="text-muted">-</span>
                    <% } %>
                  </td>
                  <td>
                    <span class="attempts-badge">
                      <i class="fas fa-redo"></i>
                      <%= student.attempts %>
                    </span>
                  </td>
                  <td>
                    <span class="points-badge">
                      <i class="fas fa-star"></i>
                      <%= student.totalPoints || 0 %>
                    </span>
                  </td>
                  <% } %>
                  <td>
                    <span class="time-spent">
                      <i class="fas fa-clock"></i>
                      <%= student.timeSpent %>m
                    </span>
                  </td>
                  <td>
                    <span class="last-accessed">
                      <%= student.lastAccessed %>
                    </span>
                  </td>
                  <td>
                    <div class="action-buttons">
                      <button class="btn btn-sm btn-outline-primary" onclick="viewStudentDetails('<%= student.email %>')" title="View Student Details">
                        <i class="fas fa-eye"></i>
                      </button>
                      <button class="btn btn-sm btn-outline-success" onclick="contactStudent('<%= student.email %>')" title="Contact Student">
                        <i class="fas fa-envelope"></i>
                      </button>
                      <% if (contentItem.type === 'quiz' || contentItem.type === 'homework') { %>
                      <button class="btn btn-sm btn-outline-info" onclick="viewAttemptHistory('<%= student.id %>')" title="View Attempt History">
                        <i class="fas fa-history"></i>
                      </button>
                      <% } %>
                    </div>
                  </td>
                </tr>
                <% }); %>
                <% } %>
              </tbody>
            </table>

            <!-- No Results Message (hidden by default, shown when filters return no results) -->
            <div id="noResultsMessage" style="display: none;" class="empty-state">
              <i class="fas fa-search"></i>
              <h3>No Results Found</h3>
              <p>Try adjusting your search or filter criteria.</p>
            </div>
          </div>
        </div>

      </div>
    </div>

  </main>
</div>

<% 
// Helper functions
function getContentIcon(type) {
  const icons = {
    'video': 'play',
    'pdf': 'file-pdf',
    'homework': 'tasks',
    'quiz': 'question-circle',
    'assignment': 'clipboard-list',
    'reading': 'book',
    'link': 'external-link-alt'
  };
  return icons[type] || 'file';
}

function getStatusIcon(status) {
  const icons = {
    'completed': 'check-circle',
    'in_progress': 'clock',
    'not_started': 'circle',
    'failed': 'times-circle'
  };
  return icons[status] || 'circle';
}
%>

<%- include('./partials/admin-footer') %>

<script>
  // Student data
  let allStudentsData = <%- JSON.stringify(studentProgress) %>;
  let filteredStudentsData = [...allStudentsData];
  let currentSort = {
    column: null,
    direction: 'asc'
  };
  let contentType = '<%= contentItem.type %>';

  document.addEventListener('DOMContentLoaded', function() {
    setupSearch();
    setupStatusFilter();
    setupScoreFilter();
    setupSorting();
    animateProgressBars();
    initializeTableEnhancements();
  });

  // Initialize table enhancements
  function initializeTableEnhancements() {
    // Animate progress bars on load
    setTimeout(() => {
      document.querySelectorAll('.progress-fill').forEach(fill => {
        const progress = fill.getAttribute('data-progress');
        fill.style.width = progress + '%';
      });
    }, 100);

    // Update student count dynamically
    updateStudentCount();
  }

  // Update student count badge
  function updateStudentCount() {
    const count = filteredStudentsData.length;
    const countBadge = document.querySelector('.student-count');
    if (countBadge) {
      countBadge.textContent = count + ' student' + (count !== 1 ? 's' : '');
    }
  }

  // Animate progress bars
  function animateProgressBars() {
    const progressFills = document.querySelectorAll('.progress-fill');
    progressFills.forEach(fill => {
      const targetWidth = fill.style.width;
      fill.style.width = '0%';
      setTimeout(() => {
        fill.style.width = targetWidth;
      }, 100);
    });
  }

  // Search functionality
  function setupSearch() {
    const searchInput = document.getElementById('studentSearch');
    searchInput.addEventListener('input', function() {
      applyFilters();
    });
  }

  // Status filter functionality
  function setupStatusFilter() {
    const statusFilter = document.getElementById('statusFilter');
    statusFilter.addEventListener('change', function() {
      applyFilters();
    });
  }

  // Score filter functionality
  function setupScoreFilter() {
    const scoreFilter = document.getElementById('scoreFilter');
    if (scoreFilter) {
      scoreFilter.addEventListener('change', function() {
        applyFilters();
      });
    }
  }

  // Apply all filters
  function applyFilters() {
    const searchTerm = document.getElementById('studentSearch').value.toLowerCase();
    const selectedStatus = document.getElementById('statusFilter').value;
    const selectedScore = document.getElementById('scoreFilter') ? document.getElementById('scoreFilter').value : '';

    filteredStudentsData = allStudentsData.filter(student => {
      // Search filter
      const matchesSearch = !searchTerm ||
        student.name.toLowerCase().includes(searchTerm) ||
        student.email.toLowerCase().includes(searchTerm) ||
        student.studentCode.toLowerCase().includes(searchTerm);

      // Status filter
      const matchesStatus = !selectedStatus || student.status === selectedStatus;

      // Score filter
      let matchesScore = true;
      if (selectedScore && student.bestScore !== null && student.bestScore !== undefined) {
        const [min, max] = selectedScore.split('-').map(Number);
        matchesScore = student.bestScore >= min && student.bestScore <= max;
      }

      return matchesSearch && matchesStatus && matchesScore;
    });

    renderStudentsTable();
  }

  // Sorting functionality
  function setupSorting() {
    // Sort buttons are already set up with onclick handlers
  }

  function sortStudents(column) {
    if (currentSort.column === column) {
      currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
    } else {
      currentSort.column = column;
      currentSort.direction = 'asc';
    }

    filteredStudentsData.sort((a, b) => {
      let aVal = a[column];
      let bVal = b[column];

      if (column === 'name') {
        aVal = a.name.toLowerCase();
        bVal = b.name.toLowerCase();
      } else if (column === 'bestScore' || column === 'grade') {
        // Handle null/undefined values for scores
        if (aVal === null || aVal === undefined) aVal = -1;
        if (bVal === null || bVal === undefined) bVal = -1;
      }

      if (currentSort.direction === 'asc') {
        return aVal > bVal ? 1 : -1;
      } else {
        return aVal < bVal ? 1 : -1;
      }
    });

    renderStudentsTable();
    updateSortIndicators();
  }

  function updateSortIndicators() {
    // Remove all sort indicators
    document.querySelectorAll('.sort-btn i').forEach(icon => {
      icon.className = 'fas fa-sort';
    });

    // Add indicator to current sort column
    if (currentSort.column) {
      const sortBtn = document.querySelector(`[onclick="sortStudents('${currentSort.column}')"] i`);
      if (sortBtn) {
        sortBtn.className = `fas fa-sort-${currentSort.direction === 'asc' ? 'up' : 'down'}`;
      }
    }
  }

  function renderStudentsTable() {
    const tbody = document.querySelector('#studentsTable tbody');
    const noResultsMsg = document.getElementById('noResultsMessage');

    // Clear existing rows (except empty state if it exists)
    const rows = tbody.querySelectorAll('tr.student-row');
    rows.forEach(row => row.remove());

    if (filteredStudentsData.length === 0) {
      // Show no results message
      if (noResultsMsg) {
        noResultsMsg.style.display = 'block';
      }
      // Hide table if no initial data
      if (allStudentsData.length === 0) {
        tbody.querySelector('.empty-state')?.parentElement?.removeAttribute('style');
      }
    } else {
      // Hide no results message
      if (noResultsMsg) {
        noResultsMsg.style.display = 'none';
      }

      // Add filtered student rows
      filteredStudentsData.forEach((student, index) => {
        const row = createStudentRow(student, index);
        tbody.appendChild(row);
      });

      // Animate progress bars
      setTimeout(() => {
        animateProgressBars();
      }, 50);
    }

    // Update student count
    updateStudentCount();
  }

  function createStudentRow(student, index) {
    const row = document.createElement('tr');
    row.className = 'student-row';
    row.setAttribute('data-status', student.status);
    row.setAttribute('data-rank', index + 1);

    const isQuizOrHomework = contentType === 'quiz' || contentType === 'homework';

    let rankCell = '';
    if (isQuizOrHomework) {
      if (index < 3 && student.status === 'completed') {
        const rankEmojis = ['🥇', '🥈', '🥉'];
        rankCell = `
        <td>
          <div class="rank-badge rank-top">
            ${rankEmojis[index]}
          </div>
        </td>
      `;
      } else {
        rankCell = `
        <td>
          <div class="rank-badge">#${index + 1}</div>
        </td>
      `;
      }
    }

    let quizCells = '';
    if (isQuizOrHomework) {
      const bestScoreBadge = student.bestScore !== null && student.bestScore !== undefined ?
        `<span class="score-badge">${student.bestScore}%</span>` :
        '<span class="text-muted">-</span>';

      const gradeBadge = student.grade !== null && student.grade !== undefined ?
        `<span class="grade-badge">${student.grade}%</span>` :
        '<span class="text-muted">-</span>';

      const resultBadge = student.passed !== null ?
        `<span class="result-badge ${student.passed ? 'pass' : 'fail'}">
          <i class="fas fa-${student.passed ? 'check-circle' : 'times-circle'}"></i>
          ${student.passed ? 'Pass' : 'Fail'}
        </span>` :
        '<span class="text-muted">-</span>';

      quizCells = `
      <td>${bestScoreBadge}</td>
      <td>${gradeBadge}</td>
      <td>${resultBadge}</td>
      <td><span class="attempts-badge"><i class="fas fa-redo"></i> ${student.attempts}</span></td>
      <td><span class="points-badge"><i class="fas fa-star"></i> ${student.totalPoints || 0}</span></td>
    `;
    }

    const actionButtons = isQuizOrHomework ? `
    <div class="action-buttons">
      <button class="btn btn-sm btn-outline-primary" onclick="viewStudentDetails('${student.email}')" title="View Student Details">
        <i class="fas fa-eye"></i>
      </button>
      <button class="btn btn-sm btn-outline-success" onclick="contactStudent('${student.email}')" title="Contact Student">
        <i class="fas fa-envelope"></i>
      </button>
      <button class="btn btn-sm btn-outline-info" onclick="viewAttemptHistory('${student.id}')" title="View Attempt History">
        <i class="fas fa-history"></i>
      </button>
    </div>
  ` : `
    <div class="action-buttons">
      <button class="btn btn-sm btn-outline-primary" onclick="viewStudentDetails('${student.email}')" title="View Student Details">
        <i class="fas fa-eye"></i>
      </button>
      <button class="btn btn-sm btn-outline-success" onclick="contactStudent('${student.email}')" title="Contact Student">
        <i class="fas fa-envelope"></i>
      </button>
    </div>
  `;

    // Get initials for avatar
    const initials = student.name.split(' ').map(n => n.charAt(0).toUpperCase()).join('').substring(0, 2);

    row.innerHTML = `
    ${rankCell}
    <td>
      <div class="student-profile">
        <div class="student-avatar">
          ${initials}
        </div>
        <div class="student-details">
          <div class="student-name">${student.name}</div>
          <div class="student-email">${student.email}</div>
          <div class="student-code">ID: ${student.studentCode}</div>
        </div>
      </div>
    </td>
    <td>
      <span class="student-code">${student.studentCode}</span>
    </td>
    <td>
      <div class="contact-info">
        <div class="contact-item">
          <i class="fas fa-phone"></i>
          <span>${student.studentPhone || 'N/A'}</span>
        </div>
        <div class="contact-item">
          <i class="fas fa-user-friends"></i>
          <span>${student.parentPhone || 'N/A'}</span>
        </div>
      </div>
    </td>
    <td>
      <div class="progress-container">
        <div class="progress-percentage">
          <span>${student.progress}%</span>
        </div>
        <div class="progress-bar">
          <div class="progress-fill" style="width: 0%" data-progress="${student.progress}"></div>
        </div>
      </div>
    </td>
    <td>
      <span class="status-badge status-${student.status}">
        <i class="fas fa-${getStatusIcon(student.status)}"></i>
        ${student.status.charAt(0).toUpperCase() + student.status.slice(1).replace('_', ' ')}
      </span>
    </td>
    ${quizCells}
    <td>
      <span class="time-spent">
        <i class="fas fa-clock"></i>
        ${student.timeSpent}m
      </span>
    </td>
    <td>
      <span class="last-accessed">${student.lastAccessed}</span>
    </td>
    <td>${actionButtons}</td>
  `;

    return row;
  }

  function getStatusIcon(status) {
    const icons = {
      'completed': 'check-circle',
      'in_progress': 'clock',
      'not_started': 'circle',
      'failed': 'times-circle'
    };
    return icons[status] || 'circle';
  }

  // Action functions
  function viewStudentDetails(email) {
    // Redirect to student details page
    window.location.href = `/admin/students?search=${encodeURIComponent(email)}`;
  }

  function contactStudent(email) {
    // Open email client or show contact modal
    const contentTitle = '<%= contentItem.title %>';
    window.open(`mailto:${email}?subject=Regarding your progress in ${encodeURIComponent(contentTitle)}`);
  }

  function viewAttemptHistory(studentId) {
    // Show attempt history modal or redirect to detailed view
    alert(`View attempt history for student ID: ${studentId}`);
    // TODO: Implement attempt history modal
  }

  function editContent() {
    // Redirect to edit content page
    const courseCode = '<%= courseCode %>';
    const topicId = '<%= topic._id %>';
    const contentId = '<%= contentItem._id %>';
    window.location.href = `/admin/courses/${courseCode}/topics/${topicId}/content/${contentId}/edit`;
  }

  function previewContent() {
    // Open content in new tab
    const contentUrl = '<%= contentItem.content %>';
    window.open(contentUrl, '_blank');
  }

  function exportData() {
    // Export content analytics data
    const contentTitle = '<%= contentItem.title %>';
    const contentType = '<%= contentItem.type %>';
    const contentDifficulty = '<%= contentItem.difficulty %>';
    const analyticsData = <%- JSON.stringify(analytics) %>;

    const data = {
      content: {
        title: contentTitle,
        type: contentType,
        difficulty: contentDifficulty
      },
      analytics: analyticsData,
      students: filteredStudentsData
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: 'application/json'
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'content-analytics.json';
    a.click();
    URL.revokeObjectURL(url);
  }

  function exportStudentData() {
    const csv = generateCSV(filteredStudentsData);
    downloadCSV(csv, 'student-progress.csv');
  }

  function generateCSV(data) {
    const headers = ['Name', 'Email', 'Student Code', 'Parent Phone', 'Student Phone', 'Progress', 'Status', 'Time Spent', 'Last Accessed'];
    const isQuizOrHomework = contentType === 'quiz' || contentType === 'homework';

    if (isQuizOrHomework) {
      headers.push('Best Score', 'Latest Grade', 'Result', 'Attempts', 'Total Points');
    }

    const rows = data.map(student => {
      const baseRow = [
        student.name,
        student.email,
        student.studentCode,
        student.parentPhone,
        student.studentPhone,
        student.progress + '%',
        student.status,
        student.timeSpent + 'm',
        student.lastAccessed
      ];

      if (isQuizOrHomework) {
        baseRow.push(
          student.bestScore || '-',
          student.grade || '-',
          student.passed !== null ? (student.passed ? 'Pass' : 'Fail') : '-',
          student.attempts,
          student.totalPoints || 0
        );
      }

      return baseRow;
    });

    return [headers, ...rows].map(row => row.join(',')).join('\n');
  }

  function downloadCSV(content, filename) {
    const blob = new Blob([content], {
      type: 'text/csv'
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
  }

  // Zoom meeting timeline functionality
  <% if (contentItem.type === 'zoom' && zoomMeetingData) { %>
  let zoomMeetingData = <%- JSON.stringify(zoomMeetingData) %>;

  function showStudentTimeline(studentId, studentName) {
    const student = zoomMeetingData.studentsAttended.find(s => s.student._id === studentId);
    if (!student) {
      alert('Student data not found');
      return;
    }

    // Create and show timeline modal
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.innerHTML = `
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            <i class="fas fa-clock me-2"></i>Meeting Timeline: ${studentName}
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="timeline-stats mb-4">
            <div class="row">
              <div class="col-md-3">
                <div class="stat-card">
                  <div class="stat-number">${student.totalTimeSpent}m</div>
                  <div class="stat-label">Total Time</div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="stat-card">
                  <div class="stat-number">${student.attendancePercentage}%</div>
                  <div class="stat-label">Attendance</div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="stat-card">
                  <div class="stat-number">${student.joinEvents.length}</div>
                  <div class="stat-label">Sessions</div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="stat-card">
                  <div class="stat-number">${student.joinEvents.reduce((total, event) => total + (event.statusTimeline ? event.statusTimeline.length : 0), 0)}</div>
                  <div class="stat-label">Actions</div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="timeline-container">
            ${generateTimelineHTML(student)}
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // Remove modal from DOM when hidden
    modal.addEventListener('hidden.bs.modal', function() {
      document.body.removeChild(modal);
    });
  }

  // Calculate session duration from join/leave times
  function calculateSessionDuration(joinEvent) {
    // If duration is already calculated, use it
    if (joinEvent.duration && joinEvent.duration > 0) {
      return joinEvent.duration;
    }

    // If not, calculate from join and leave times
    if (joinEvent.joinTime && joinEvent.leaveTime) {
      const joinTime = new Date(joinEvent.joinTime);
      const leaveTime = new Date(joinEvent.leaveTime);
      const durationMs = leaveTime - joinTime;
      const durationMinutes = Math.max(0, Math.round(durationMs / (1000 * 60)));
      return durationMinutes;
    }

    return 0;
  }

  function generateTimelineHTML(student) {
    let timelineHTML = '';

    student.joinEvents.forEach((joinEvent, sessionIndex) => {
      timelineHTML += `
      <div class="timeline-session">
        <h6 class="session-header">
          <i class="fas fa-video me-2"></i>Session ${sessionIndex + 1}
          <span class="session-duration">${calculateSessionDuration(joinEvent)}m</span>
        </h6>
        
        <div class="timeline-events">
    `;

      if (joinEvent.statusTimeline && joinEvent.statusTimeline.length > 0) {
        joinEvent.statusTimeline.forEach(status => {
          const actionIcon = getActionIcon(status.action);
          const actionColor = getActionColor(status.action);
          const timestamp = new Date(status.timestamp).toLocaleTimeString();

          timelineHTML += `
          <div class="timeline-event ${actionColor}">
            <div class="event-icon">
              <i class="fas fa-${actionIcon}"></i>
            </div>
            <div class="event-content">
              <div class="event-action">${getActionText(status.action)}</div>
              <div class="event-time">${timestamp}</div>
              <div class="event-status">
                Camera: <span class="status-${status.cameraStatus}">${formatStatus(status.cameraStatus)}</span> | 
                Mic: <span class="status-${status.micStatus}">${formatStatus(status.micStatus)}</span>
              </div>
            </div>
          </div>
        `;
        });
      } else {
        timelineHTML += `
        <div class="timeline-event info">
          <div class="event-icon">
            <i class="fas fa-info-circle"></i>
          </div>
          <div class="event-content">
            <div class="event-action">Basic join/leave tracking</div>
            <div class="event-time">No detailed timeline available</div>
          </div>
        </div>
      `;
      }

      timelineHTML += `
        </div>
      </div>
    `;
    });

    return timelineHTML;
  }

  function getActionIcon(action) {
    const icons = {
      'join': 'sign-in-alt',
      'leave': 'sign-out-alt',
      'camera_on': 'video',
      'camera_off': 'video-slash',
      'mic_on': 'microphone',
      'mic_off': 'microphone-slash'
    };
    return icons[action] || 'circle';
  }

  function getActionColor(action) {
    const colors = {
      'join': 'success',
      'leave': 'danger',
      'camera_on': 'primary',
      'camera_off': 'warning',
      'mic_on': 'info',
      'mic_off': 'secondary'
    };
    return colors[action] || 'light';
  }

  function getActionText(action) {
    const texts = {
      'join': 'Joined Meeting',
      'leave': 'Left Meeting',
      'camera_on': 'Turned Camera On',
      'camera_off': 'Turned Camera Off',
      'mic_on': 'Turned Microphone On',
      'mic_off': 'Turned Microphone Off'
    };
    return texts[action] || action;
  }

  // Format status for display
  function formatStatus(status) {
    console.log('Formatting status:', status);
    const formatted = {
      'on': 'On',
      'off': 'Off',
      'unknown': 'Off' // Default unknown to Off for better UX
    };
    return formatted[status] || status;
  }

  // Zoom Analytics Functions
  function exportZoomAttendance() {
    const attendanceData = <%- JSON.stringify(zoomMeetingData ? zoomMeetingData.studentsAttended : []) %>;

    if (!attendanceData || attendanceData.length === 0) {
      alert('No attendance data available to export.');
      return;
    }

    const csvContent = generateAttendanceCSV(attendanceData);
    const blob = new Blob([csvContent], {
      type: 'text/csv;charset=utf-8;'
    });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);

    link.setAttribute('href', url);
    link.setAttribute('download', `zoom-attendance-${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  function generateAttendanceCSV(data) {
    const headers = [
      'Student Name',
      'Email',
      'Student ID',
      'First Join Time',
      'Last Leave Time',
      'Total Duration (minutes)',
      'Attendance Percentage',
      'Number of Sessions',
      'Currently in Meeting'
    ];

    const rows = data.map(attendance => {
      return [
        `${attendance.student.firstName} ${attendance.student.lastName}`,
        attendance.student.studentEmail,
        attendance.student.studentCode || 'N/A',
        attendance.firstJoinTime ? new Date(attendance.firstJoinTime).toLocaleString() : 'N/A',
        attendance.lastLeaveTime ? new Date(attendance.lastLeaveTime).toLocaleString() : 'Still in meeting',
        attendance.totalTimeSpent,
        attendance.attendancePercentage,
        attendance.joinEvents.length,
        attendance.isCurrentlyInMeeting ? 'Yes' : 'No'
      ];
    });

    const csvContent = [headers, ...rows]
      .map(row => row.map(field => `"${field}"`).join(','))
      .join('\n');

    return csvContent;
  }

  function viewStudentTimeline(studentId, studentName) {
    // This will open the existing timeline modal with the student's data
    if (typeof showStudentTimeline === 'function') {
      showStudentTimeline(studentId, studentName);
    } else {
      alert(`Timeline for ${studentName} - Feature will be available in the timeline modal.`);
    }
  }

  function viewStudentDetails(studentEmail) {
    // Redirect to student details page
    const baseUrl = window.location.origin;
    const studentDetailsUrl = `/admin/students?search=${encodeURIComponent(studentEmail)}`;
    window.open(studentDetailsUrl, '_blank');
  }

  // Initialize circular progress animations when page loads
  document.addEventListener('DOMContentLoaded', function() {
    initializeCircularProgress();
  });

  function initializeCircularProgress() {
    const progressElements = document.querySelectorAll('.circular-progress');

    progressElements.forEach(element => {
      const percentage = element.getAttribute('data-percentage');
      const circle = element.querySelector('circle:last-child');

      if (circle && percentage) {
        const radius = 20;
        const circumference = 2 * Math.PI * radius;
        const offset = circumference - (percentage / 100) * circumference;

        circle.style.strokeDasharray = `${circumference}`;
        circle.style.strokeDashoffset = `${offset}`;

        // Animate the progress
        setTimeout(() => {
          circle.style.transition = 'stroke-dashoffset 1s ease-in-out';
          circle.style.strokeDashoffset = `${offset}`;
        }, 100);
      }
    });
  }

  <% } %>
</script>

<!-- Zoom Meeting Timeline Styles -->
<style>
  .zoom-meeting-section {
    margin: 2rem 0;
  }

  .meeting-basic-info .info-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 1rem;
  }

  .info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #eee;
  }

  .info-item label {
    font-weight: 600;
    color: #555;
  }

  .meeting-id {
    font-family: monospace;
    background: #f8f9fa;
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-size: 0.9rem;
  }

  .status-badge {
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
  }

  .status-scheduled {
    background: #e3f2fd;
    color: #1976d2;
  }

  .status-active {
    background: #e8f5e8;
    color: #388e3c;
  }

  .status-ended {
    background: #fafafa;
    color: #616161;
  }

  .meeting-stats .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
  }

  .stat-item {
    text-align: center;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .stat-number {
    font-size: 1.5rem;
    font-weight: bold;
    color: #495057;
  }

  .stat-label {
    font-size: 0.85rem;
    color: #6c757d;
    margin-top: 0.5rem;
  }

  .attendance-distribution {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin-top: 1.5rem;
  }

  .distribution-chart {
    margin-top: 1rem;
  }

  .distribution-item {
    display: flex;
    align-items: center;
    margin-bottom: 0.8rem;
    position: relative;
  }

  .distribution-bar {
    height: 25px;
    border-radius: 4px;
    margin-right: 1rem;
    min-width: 2px;
    transition: width 0.3s ease;
  }

  .distribution-item.excellent .distribution-bar {
    background: #28a745;
  }

  .distribution-item.good .distribution-bar {
    background: #ffc107;
  }

  .distribution-item.fair .distribution-bar {
    background: #fd7e14;
  }

  .distribution-item.poor .distribution-bar {
    background: #dc3545;
  }

  .distribution-label {
    font-size: 0.9rem;
    font-weight: 500;
    white-space: nowrap;
  }

  .attendance-table-container {
    overflow-x: auto;
    margin-top: 1rem;
  }

  .attendance-table {
    font-size: 0.9rem;
  }

  .attendance-table th {
    background: #f8f9fa;
    border-top: none;
    font-weight: 600;
    color: #495057;
  }

  .student-info strong {
    color: #495057;
  }

  .duration-badge {
    background: #e3f2fd;
    color: #1976d2;
    padding: 0.3rem 0.6rem;
    border-radius: 4px;
    font-weight: 500;
    font-size: 0.85rem;
  }

  .session-count {
    background: #f8f9fa;
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-size: 0.85rem;
    color: #6c757d;
  }

  .attendance-percentage .progress {
    margin-bottom: 0;
  }

  /* Timeline Modal Styles */
  .timeline-stats .stat-card {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 1rem;
    text-align: center;
  }

  .timeline-stats .stat-number {
    font-size: 1.3rem;
    font-weight: bold;
    color: #495057;
  }

  .timeline-stats .stat-label {
    font-size: 0.8rem;
    color: #6c757d;
    margin-top: 0.3rem;
  }

  .timeline-container {
    max-height: 400px;
    overflow-y: auto;
  }

  .timeline-session {
    margin-bottom: 2rem;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    overflow: hidden;
  }

  .session-header {
    background: #f8f9fa;
    padding: 1rem;
    margin: 0;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .session-duration {
    font-size: 0.9rem;
    font-weight: normal;
    color: #6c757d;
    background: white;
    padding: 0.3rem 0.6rem;
    border-radius: 4px;
    border: 1px solid #dee2e6;
  }

  .timeline-events {
    padding: 1rem;
  }

  .timeline-event {
    display: flex;
    align-items: flex-start;
    margin-bottom: 1rem;
    padding: 0.8rem;
    border-radius: 6px;
    border-left: 4px solid transparent;
  }

  .timeline-event.success {
    background: #f8fff9;
    border-left-color: #28a745;
  }

  .timeline-event.danger {
    background: #fff5f5;
    border-left-color: #dc3545;
  }

  .timeline-event.primary {
    background: #f8f9ff;
    border-left-color: #007bff;
  }

  .timeline-event.warning {
    background: #fffbf0;
    border-left-color: #ffc107;
  }

  .timeline-event.info {
    background: #f0f9ff;
    border-left-color: #17a2b8;
  }

  .timeline-event.secondary {
    background: #f8f9fa;
    border-left-color: #6c757d;
  }

  .timeline-event.light {
    background: #fafafa;
    border-left-color: #e9ecef;
  }

  .event-icon {
    flex-shrink: 0;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    color: white;
    font-size: 0.9rem;
  }

  .timeline-event.success .event-icon {
    background: #28a745;
  }

  .timeline-event.danger .event-icon {
    background: #dc3545;
  }

  .timeline-event.primary .event-icon {
    background: #007bff;
  }

  .timeline-event.warning .event-icon {
    background: #ffc107;
  }

  .timeline-event.info .event-icon {
    background: #17a2b8;
  }

  .timeline-event.secondary .event-icon {
    background: #6c757d;
  }

  .timeline-event.light .event-icon {
    background: #adb5bd;
  }

  .event-content {
    flex-grow: 1;
  }

  .event-action {
    font-weight: 600;
    color: #495057;
    margin-bottom: 0.3rem;
  }

  .event-time {
    font-size: 0.85rem;
    color: #6c757d;
    margin-bottom: 0.3rem;
  }

  .event-status {
    font-size: 0.8rem;
    color: #6c757d;
  }

  .status-on {
    color: #28a745;
    font-weight: 500;
  }

  .status-off {
    color: #dc3545;
    font-weight: 500;
  }

  .status-unknown {
    color: #6c757d;
    font-style: italic;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .meeting-basic-info .info-grid {
      grid-template-columns: 1fr;
    }

    .meeting-stats .stats-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .distribution-item {
      flex-direction: column;
      align-items: flex-start;
    }

    .distribution-bar {
      width: 100% !important;
      margin-bottom: 0.5rem;
      margin-right: 0;
    }
  }

  /* ============================================
     PROFESSIONAL STUDENT PROGRESS TABLE STYLES
     ============================================ */

  /* Student Progress Section */
  .student-progress-section {
    background: var(--admin-card-light, #ffffff);
    border: 1px solid var(--admin-border-light, #e2e8f0);
    border-radius: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    overflow: hidden;
    margin-top: 30px;
  }

  .section-header {
    padding: 24px;
    border-bottom: 1px solid var(--admin-border-light, #e2e8f0);
    background: linear-gradient(135deg, rgba(184, 1, 1, 0.02) 0%, rgba(184, 1, 1, 0.01) 100%);
  }

  .section-title {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 16px;
  }

  .section-title h3 {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--admin-text-light, #1e293b);
    margin: 0;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .section-title h3 i {
    color: #b80101;
    font-size: 1.3rem;
  }

  .student-count {
    background: linear-gradient(135deg, #b80101 0%, #8b0000 100%);
    color: white;
    padding: 6px 16px;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 600;
    box-shadow: 0 2px 8px rgba(184, 1, 1, 0.3);
  }

  .section-actions {
    display: flex;
    gap: 12px;
    align-items: center;
    flex-wrap: wrap;
  }

  /* Search Box */
  .search-box {
    position: relative;
    flex: 1;
    min-width: 250px;
    max-width: 400px;
  }

  .search-box input {
    width: 100%;
    padding: 12px 16px 12px 45px;
    border: 2px solid var(--admin-border-light, #e2e8f0);
    border-radius: 10px;
    background: var(--admin-card-light, #ffffff);
    color: var(--admin-text-light, #1e293b);
    font-size: 0.95rem;
    transition: all 0.3s ease;
  }

  .search-box input:focus {
    outline: none;
    border-color: #b80101;
    box-shadow: 0 0 0 3px rgba(184, 1, 1, 0.1);
  }

  .search-box i {
    position: absolute;
    left: 16px;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
    font-size: 1rem;
  }

  /* Filter Select */
  .filter-select {
    padding: 12px 16px;
    border: 2px solid var(--admin-border-light, #e2e8f0);
    border-radius: 10px;
    background: var(--admin-card-light, #ffffff);
    color: var(--admin-text-light, #1e293b);
    font-size: 0.95rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 150px;
  }

  .filter-select:focus {
    outline: none;
    border-color: #b80101;
    box-shadow: 0 0 0 3px rgba(184, 1, 1, 0.1);
  }

  .filter-select:hover {
    border-color: #b80101;
  }

  /* Students Table Container */
  .students-table-container {
    overflow-x: auto;
    background: var(--admin-card-light, #ffffff);
  }

  /* Professional Table Styles */
  .students-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    font-size: 0.95rem;
  }

  .students-table thead {
    background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f5 100%);
    position: sticky;
    top: 0;
    z-index: 10;
  }

  .students-table th {
    padding: 18px 16px;
    text-align: left;
    font-weight: 700;
    text-transform: uppercase;
    font-size: 0.75rem;
    letter-spacing: 0.5px;
    border-bottom: 2px solid #dee2e6;
    white-space: nowrap;
  }

  .students-table th:first-child {
    padding-left: 24px;
    border-top-left-radius: 8px;
  }

  .students-table th:last-child {
    border-top-right-radius: 8px;
  }

  /* Sort Buttons in Headers */
  .sort-btn {
    background: none;
    border: none;
    color: #495057;
    cursor: pointer;
    padding: 0;
    margin-left: 6px;
    transition: all 0.3s ease;
  }

  .sort-btn:hover {
    color: #b80101;
  }

  .sort-btn i {
    font-size: 0.85rem;
  }

  /* Table Body */
  .students-table tbody tr {
    background: var(--admin-card-light, #ffffff);
    transition: all 0.3s ease;
    border-bottom: 1px solid #f1f3f5;
  }

  .students-table tbody tr:hover {
    background: linear-gradient(135deg, rgba(184, 1, 1, 0.02) 0%, rgba(184, 1, 1, 0.01) 100%);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    transform: translateY(-1px);
  }

  .students-table td {
    padding: 16px;
    vertical-align: middle;
    color: var(--admin-text-light, #1e293b);
  }

  .students-table td:first-child {
    padding-left: 24px;
  }

  /* Rank Badge */
  .rank-badge {
    width: 36px;
    height: 36px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 0.95rem;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    color: #495057;
  }

  .rank-badge.rank-top {
    background: linear-gradient(135deg, #ffd700 0%, #ffed4e 100%);
    color: #8b6914;
    box-shadow: 0 2px 8px rgba(255, 215, 0, 0.4);
  }

  /* Student Profile Cell */
  .student-profile {
    display: flex;
    align-items: center;
    gap: 14px;
    min-width: 220px;
  }

  .student-avatar {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    background: linear-gradient(135deg, #b80101 0%, #8b0000 100%);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.1rem;
    font-weight: 600;
    flex-shrink: 0;
    box-shadow: 0 2px 8px rgba(184, 1, 1, 0.3);
  }

  .student-details {
    flex: 1;
    min-width: 0;
  }

  .student-name {
    font-weight: 600;
    color: var(--admin-text-light, #1e293b);
    font-size: 0.95rem;
    margin-bottom: 4px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .student-email {
    font-size: 0.8rem;
    color: #6c757d;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .student-code {
    display: inline-block;
    background: #f8f9fa;
    padding: 3px 10px;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 600;
    color: #495057;
    font-family: 'Courier New', monospace;
    margin-top: 4px;
  }

  /* Contact Info Cell */
  .contact-info {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .contact-item {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 0.85rem;
    color: #6c757d;
  }

  .contact-item i {
    width: 16px;
    color: #b80101;
  }

  /* Progress Container */
  .progress-container {
    min-width: 120px;
  }

  .progress-percentage {
    font-size: 0.8rem;
    font-weight: 600;
    color: #495057;
    margin-bottom: 6px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .progress-bar {
    height: 8px;
    background: #e9ecef;
    border-radius: 10px;
    overflow: hidden;
    position: relative;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #b80101 0%, #d40000 100%);
    border-radius: 10px;
    transition: width 1s ease-in-out;
    box-shadow: 0 2px 4px rgba(184, 1, 1, 0.3);
  }

  /* Status Badge */
  .status-badge {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 8px 14px;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 600;
    white-space: nowrap;
  }

  .status-badge i {
    font-size: 0.9rem;
  }

  .status-completed {
    background: rgba(16, 185, 129, 0.15);
    color: #059669;
    border: 1px solid rgba(16, 185, 129, 0.3);
  }

  .status-in_progress {
    background: rgba(59, 130, 246, 0.15);
    color: #2563eb;
    border: 1px solid rgba(59, 130, 246, 0.3);
  }

  .status-not_started {
    background: rgba(107, 114, 128, 0.15);
    color: #4b5563;
    border: 1px solid rgba(107, 114, 128, 0.3);
  }

  .status-failed {
    background: rgba(239, 68, 68, 0.15);
    color: #dc2626;
    border: 1px solid rgba(239, 68, 68, 0.3);
  }

  /* Score & Grade Badges */
  .score-badge,
  .grade-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 8px 12px;
    border-radius: 8px;
    font-weight: 700;
    font-size: 0.9rem;
    min-width: 60px;
  }

  .score-badge {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
  }

  .grade-badge {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
  }

  /* Result Badge */
  .result-badge {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 8px 14px;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 600;
  }

  .result-badge.pass {
    background: rgba(16, 185, 129, 0.15);
    color: #059669;
    border: 1px solid rgba(16, 185, 129, 0.3);
  }

  .result-badge.fail {
    background: rgba(239, 68, 68, 0.15);
    color: #dc2626;
    border: 1px solid rgba(239, 68, 68, 0.3);
  }

  /* Attempts & Points Badges */
  .attempts-badge,
  .points-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 6px 12px;
    border-radius: 6px;
    font-weight: 600;
    font-size: 0.85rem;
  }

  .attempts-badge {
    background: #f8f9fa;
    color: #495057;
    border: 1px solid #dee2e6;
  }

  .points-badge {
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    color: white;
    box-shadow: 0 2px 8px rgba(245, 158, 11, 0.3);
  }

  /* Time Badges */
  .time-spent,
  .last-accessed {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    font-size: 0.85rem;
    color: #6c757d;
    padding: 6px 12px;
    background: #f8f9fa;
    border-radius: 6px;
  }

  .time-spent i,
  .last-accessed i {
    color: #b80101;
  }

  /* Action Buttons */
  .action-buttons {
    display: flex;
    gap: 8px;
    align-items: center;
    justify-content: flex-start;
  }

  .btn-sm {
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 0.85rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid;
    background: transparent;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 38px;
    height: 38px;
  }

  .btn-outline-primary {
    color: #b80101;
    border-color: #b80101;
  }

  .btn-outline-primary:hover {
    background: linear-gradient(135deg, #b80101 0%, #8b0000 100%);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(184, 1, 1, 0.3);
  }

  .btn-outline-success {
    color: #10b981;
    border-color: #10b981;
  }

  .btn-outline-success:hover {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
  }

  .btn-outline-info {
    color: #3b82f6;
    border-color: #3b82f6;
  }

  .btn-outline-info:hover {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 60px 20px;
    color: #6c757d;
  }

  .empty-state i {
    font-size: 4rem;
    color: #dee2e6;
    margin-bottom: 20px;
  }

  .empty-state h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #495057;
    margin-bottom: 10px;
  }

  .empty-state p {
    font-size: 1rem;
    color: #6c757d;
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .section-actions {
      flex-direction: column;
      align-items: stretch;
    }

    .search-box {
      max-width: 100%;
    }

    .filter-select {
      width: 100%;
    }
  }

  @media (max-width: 768px) {
    .student-progress-section {
      border-radius: 8px;
    }

    .section-header {
      padding: 16px;
    }

    .section-title {
      flex-direction: column;
      align-items: flex-start;
    }

    .students-table {
      font-size: 0.85rem;
    }

    .students-table th,
    .students-table td {
      padding: 12px 8px;
    }

    .student-profile {
      min-width: 180px;
    }

    .student-avatar {
      width: 36px;
      height: 36px;
      font-size: 0.9rem;
    }

    .action-buttons {
      flex-direction: column;
      gap: 6px;
    }

    .btn-sm {
      width: 100%;
    }

    .btn-text {
      display: none;
    }
  }

  /* Utility Classes */
  .text-muted {
    color: #6c757d !important;
    font-style: italic;
  }

  /* Loading Animation */
  @keyframes shimmer {
    0% {
      background-position: -1000px 0;
    }

    100% {
      background-position: 1000px 0;
    }
  }

  .loading {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 1000px 100%;
    animation: shimmer 2s infinite;
  }

  /* Smooth transitions */
  * {
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
  }

  button,
  .btn {
    transition: all 0.3s ease !important;
  }

  /* Print styles */
  @media print {

    .section-actions,
    .action-buttons,
    .sort-btn {
      display: none !important;
    }

    .student-progress-section {
      box-shadow: none;
      border: 1px solid #000;
    }

    .students-table {
      font-size: 10pt;
    }
  }
</style>