<%- include('partials/header', { title: 'On-Ground Courses' }) %>

<!-- Floating Math Elements -->
<div class="floating-math-elements-professor" id="floatingMath">
  <div class="math-element-professor" data-equation="∂">∂</div>
  <div class="math-element-professor" data-equation="∇">∇</div>
  <div class="math-element-professor" data-equation="∫">∫</div>
  <div class="math-element-professor" data-equation="∑">∑</div>
  <div class="math-element-professor" data-equation="∏">∏</div>
  <div class="math-element-professor" data-equation="∞">∞</div>
  <div class="math-element-professor" data-equation="∃">∃</div>
  <div class="math-element-professor" data-equation="∀">∀</div>
  <div class="math-element-professor" data-equation="ℝ">ℝ</div>
  <div class="math-element-professor" data-equation="ℂ">ℂ</div>
</div>


<!-- On-Ground Courses Section -->
<section class="online-courses-section" id="onground-courses" data-aos="fade-up" style="padding: 120px 0 80px 0; margin-top: 80px;">
  <div class="container">
    <div class="section-header-new text-center">
      <h2 class="section-title-new">Our <span class="highlight-red">On-Ground Courses</span></h2>
      <p class="section-subtitle-new">Experience in-person learning with our expert instructors</p>
    </div>

    <!-- Enhanced Search and Filter Section -->
    <div class="courses-filter-section-enhanced mb-5">
      <div class="filter-container">
        <form class="filter-form-enhanced" id="filterForm">
          <div class="row align-items-end g-3">
            <!-- Search Input -->
            <div class="col-12 col-md-4 col-lg-3">
              <div class="search-form-enhanced">
                <input type="text" name="search" class="form-control search-input-enhanced" placeholder="Search onground courses..." value="<%= currentFilters.search || '' %>">
              </div>
            </div>
            
            <!-- Test Type Filter -->
            <div class="col-12 col-md-4 col-lg-3">
              <div class="filter-group">
                <label class="filter-label">
                  <i class="fas fa-certificate"></i>
                  Test Type
                </label>
                <select name="testType" class="form-control filter-select-enhanced">
                  <option value="">All Test Types</option>
                  <option value="EST" <%= currentFilters.testType === 'EST' ? 'selected' : '' %>>EST</option>
                  <option value="SAT" <%= currentFilters.testType === 'SAT' ? 'selected' : '' %>>SAT</option>
                  <option value="ACT" <%= currentFilters.testType === 'ACT' ? 'selected' : '' %>>ACT</option>
                </select>
              </div>
            </div>
            
            <!-- Level Filter -->
            <div class="col-12 col-md-4 col-lg-3">
              <div class="filter-group">
                <label class="filter-label">
                  <i class="fas fa-book"></i>
                  Level
                </label>
                <select name="subject" class="form-control filter-select-enhanced">
                  <option value="">All Levels</option>
                  <option value="Basics" <%= currentFilters.subject === 'Basics' ? 'selected' : '' %>>Basics</option>
                  <option value="Advanced" <%= currentFilters.subject === 'Advanced' ? 'selected' : '' %>>Advanced</option>
                </select>
              </div>
            </div>
            
            <!-- Apply Button -->
            <div class="col-12 col-md-12 col-lg-3">
              <div class="filter-group">
                <button type="submit" class="btn btn-primary filter-apply-btn w-100">
                  <i class="fas fa-filter"></i>
                  <span class="apply-text">Apply Filters</span>
                </button>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Enhanced Results Count -->
    <div class="results-count-enhanced mb-4">
      <div class="results-info">
        <div class="results-stats">
          <span class="results-number"><%= bundles.length %></span>
          <span class="results-label">of <%= pagination.totalBundles %> bundles</span>
        </div>
        <div class="results-type">
          <i class="fas fa-chalkboard-teacher"></i>
          <span>On-Ground Courses</span>
        </div>
      </div>
    </div>

    <div class="courses-grid">
      <% if (bundles.length > 0) { %>
      <% bundles.forEach((bundle, index) => { %>
      <article class="course-card-enhanced" data-aos="fade-up" data-aos-delay="<%= (index + 1) * 100 %>">
        <div class="course-card-header">
          <div class="course-favorite-btn-enhanced" onclick="toggleWishlist('<%= bundle._id %>', 'bundle')" title="Add to Wishlist">
            <% if (user && user.isBundleInWishlist(bundle._id.toString())) { %>
            <i class="fas fa-heart" style="color: #ff6b6b;"></i>
            <% } else { %>
            <i class="far fa-heart"></i>
            <% } %>
          </div>
          <div class="course-badge-container">
            <% if (bundle.discountPrice) { %>
            <div class="course-offer-badge-enhanced discount">
              <i class="fas fa-percentage"></i>
              <span>Save <%= bundle.savingsPercentage %>%</span>
            </div>
            <% } else { %>
            <div class="course-offer-badge-enhanced onground">
              <i class="fas fa-chalkboard-teacher"></i>
              <span>On-Ground</span>
            </div>
            <% } %>
          </div>
        </div>

        <div class="course-card-media-enhanced">
          <img src="<%= bundle.thumbnail || '/images/adad.png' %>" alt="<%= bundle.title %>" loading="lazy">
          <div class="course-overlay-enhanced">
            <div class="course-quick-actions">
              <% if (user && user.hasPurchasedBundle(bundle._id.toString())) { %>
              <button class="quick-action-btn purchased" title="Already Purchased" disabled>
                <i class="fas fa-check-circle"></i>
              </button>
              <% } else { %>
              <button class="quick-action-btn" onclick="addBundleToCart('<%= bundle._id %>')" title="Add to Cart">
                <i class="fas fa-shopping-cart"></i>
              </button>
              <% } %>
              <a href="/bundle/<%= bundle._id %>" class="quick-action-btn" title="View Details">
                <i class="fas fa-eye"></i>
              </a>
            </div>
          </div>
        </div>

        <div class="course-card-body-enhanced">
          <div class="course-meta">

            <span class="course-subject"><%= bundle.subject %></span>
            <span class="course-type"><%= bundle.testType %></span>
          </div>

          <h3 class="course-card-title-enhanced"><%= bundle.title %></h3>
          <p class="course-card-description-enhanced"><%= bundle.shortDescription %></p>

          <div class="course-stats-enhanced">
            <div class="stat-item">
              <i class="fas fa-book"></i>
              <span><%= bundle.courses.length %> Courses</span>
            </div>
            <div class="stat-item">
              <i class="fas fa-clock"></i>
              <span><%= bundle.duration || 0 %> Hours</span>
            </div>
          </div>

          <div class="course-price-container-enhanced">
            <% if (bundle.discountPrice) { %>
            <div class="price-wrapper">
              <span class="course-price-original-enhanced">EGP<%= bundle.price %></span>
              <span class="course-price-current-enhanced">EGP<%= bundle.finalPrice.toFixed(2) %></span>
            </div>
            <div class="savings-info">
              <span class="savings-amount">Save EGP<%= bundle.savings.toFixed(2) %></span>
            </div>
            <% } else { %>
            <div class="price-wrapper">
              <span class="course-price-current-enhanced">EGP<%= bundle.price %></span>
            </div>
            <% } %>
          </div>

          <div class="course-actions-enhanced">
            <a href="/bundle/<%= bundle._id %>" class="btn-view-details-enhanced">
              <span>View Details</span>
              <i class="fas fa-arrow-right"></i>
            </a>
            <% if (user && user.hasPurchasedBundle(bundle._id.toString())) { %>
            <button class="btn-purchased-enhanced" disabled>
              <i class="fas fa-check-circle"></i>
              <span>Already Purchased</span>
            </button>
            <% } else { %>
            <button class="btn-add-to-cart-enhanced" onclick="addBundleToCart('<%= bundle._id %>')">
              <i class="fas fa-shopping-cart"></i>
              <span>Add to Cart</span>
            </button>
            <% } %>
          </div>
        </div>
      </article>
      <% }); %>
      <% } else { %>
      <div class="no-courses-found-enhanced">
        <div class="no-courses-content">
          <div class="no-courses-icon-enhanced">
            <div class="icon-background">
              <i class="fas fa-search"></i>
            </div>
          </div>
          <h3 class="no-courses-title">No On-Ground Courses Found</h3>
          <p class="no-courses-description">
            We couldn't find any onground courses matching your criteria.
            Try adjusting your search filters or browse our complete collection.
          </p>
          <div class="no-courses-actions">
            <a href="/courses/onground" class="btn-primary-enhanced">
              <i class="fas fa-chalkboard-teacher"></i>
              <span>Browse All On-Ground Courses</span>
            </a>
            <button class="btn-secondary-enhanced" onclick="clearFilters()">
              <i class="fas fa-refresh"></i>
              <span>Clear Filters</span>
            </button>
          </div>
        </div>
      </div>
      <% } %>
    </div>

    <!-- Show More/Less Button -->
    <div class="courses-show-more-container text-center mt-5">
      <button class="btn-show-more" id="showMoreOnGroundCourses">
        <span class="show-more-text">Show More Courses</span>
        <i class="fas fa-chevron-down show-more-icon"></i>
      </button>
    </div>
  </div>
</section>


<script>
  // AJAX Filter Form Submission
  document.addEventListener('DOMContentLoaded', function() {
    const filterForm = document.getElementById('filterForm');
    const searchBtn = document.querySelector('.search-btn-enhanced');
    const applyBtn = document.querySelector('.filter-apply-btn');
    const searchInput = document.querySelector('.search-input-enhanced');
    const testTypeSelect = document.querySelector('select[name="testType"]');
    const subjectSelect = document.querySelector('select[name="subject"]');
    const coursesGrid = document.querySelector('.courses-grid');
    const resultsCount = document.querySelector('.results-count-enhanced');

    function showLoadingState(button, isSearch = false) {
      const textSpan = button.querySelector(isSearch ? '.search-text' : '.apply-text');
      const icon = button.querySelector(isSearch ? '.search-icon-btn' : 'i');

      button.disabled = true;
      textSpan.textContent = 'Loading...';
      if (icon) {
        icon.classList.remove(isSearch ? 'fa-arrow-right' : 'fa-filter');
        icon.classList.add('fa-spinner', 'fa-spin');
      }
    }

    function hideLoadingState(button, isSearch = false) {
      const textSpan = button.querySelector(isSearch ? '.search-text' : '.apply-text');
      const icon = button.querySelector(isSearch ? '.search-icon-btn' : 'i');

      button.disabled = false;
      textSpan.textContent = isSearch ? 'Search' : 'Apply';
      if (icon) {
        icon.classList.remove('fa-spinner', 'fa-spin');
        icon.classList.add(isSearch ? 'fa-arrow-right' : 'fa-filter');
      }
    }

    function submitFilters() {
      const formData = new FormData(filterForm);
      const params = new URLSearchParams(formData);

      // Show loading state on courses grid
      coursesGrid.style.opacity = '0.6';
      coursesGrid.style.pointerEvents = 'none';

      // Show loading on both buttons
      showLoadingState(searchBtn, true);
      showLoadingState(applyBtn);

      fetch(`/courses/onground?${params.toString()}`, {
          method: 'GET',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.text())
        .then(html => {
          // Parse the response to extract just the courses grid and results count
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newCoursesGrid = doc.querySelector('.courses-grid');
          const newResultsCount = doc.querySelector('.results-count-enhanced');

          if (newCoursesGrid) {
            coursesGrid.innerHTML = newCoursesGrid.innerHTML;
          }
          if (newResultsCount) {
            resultsCount.innerHTML = newResultsCount.innerHTML;
          }

          // Update URL without page reload
          const url = new URL(window.location);
          url.search = params.toString();
          window.history.pushState({}, '', url);
        })
        .catch(error => {
          console.error('Error filtering courses:', error);
          showCartNotification('Error loading courses. Please try again.', 'error');
        })
        .finally(() => {
          // Hide loading states
          coursesGrid.style.opacity = '1';
          coursesGrid.style.pointerEvents = 'auto';
          hideLoadingState(searchBtn, true);
          hideLoadingState(applyBtn);
        });
    }

    // Form submission handlers
    filterForm.addEventListener('submit', function(e) {
      e.preventDefault();
      submitFilters();
    });

    // Search button click
    searchBtn.addEventListener('click', function(e) {
      e.preventDefault();
      submitFilters();
    });

    // Apply button click
    applyBtn.addEventListener('click', function(e) {
      e.preventDefault();
      submitFilters();
    });

    // Enter key in search input
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        submitFilters();
      }
    });
  });

  // On-Ground Courses Show More/Less Functionality
  document.addEventListener('DOMContentLoaded', function() {
    const showMoreBtn = document.getElementById('showMoreOnGroundCourses');
    const hiddenCards = document.querySelectorAll('.course-card-hidden');
    const showMoreText = showMoreBtn.querySelector('.show-more-text');
    const showMoreIcon = showMoreBtn.querySelector('.show-more-icon');

    let isExpanded = false;

    showMoreBtn.addEventListener('click', function() {
      isExpanded = !isExpanded;

      if (isExpanded) {
        // Show hidden cards
        hiddenCards.forEach((card, index) => {
          setTimeout(() => {
            card.classList.remove('course-card-hidden');
            card.classList.add('course-card-visible');
          }, index * 100);
        });

        showMoreText.textContent = 'Show Less Courses';
        showMoreIcon.style.transform = 'rotate(180deg)';

        // Scroll to show the new cards
        setTimeout(() => {
          showMoreBtn.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
          });
        }, 300);
      } else {
        // Hide cards
        hiddenCards.forEach((card, index) => {
          setTimeout(() => {
            card.classList.remove('course-card-visible');
            card.classList.add('course-card-hidden');
          }, index * 50);
        });

        showMoreText.textContent = 'Show More Courses';
        showMoreIcon.style.transform = 'rotate(0deg)';
      }
    });
  });

  // On-Ground Course Card Interactions
  document.addEventListener('DOMContentLoaded', function() {
    // Favorite button functionality for on-ground courses
    const onGroundFavoriteBtns = document.querySelectorAll('.course-favorite-btn');

    onGroundFavoriteBtns.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        const icon = this.querySelector('i');

        if (icon.classList.contains('far')) {
          icon.classList.remove('far');
          icon.classList.add('fas');
          this.style.color = '#ff6b6b';
        } else {
          icon.classList.remove('fas');
          icon.classList.add('far');
          this.style.color = '';
        }
      });
    });

    // Add to cart functionality for on-ground courses
    const onGroundAddToCartBtns = document.querySelectorAll('.btn-add-to-cart');

    onGroundAddToCartBtns.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        const originalText = this.querySelector('span').textContent;
        const icon = this.querySelector('i');

        // Get course details
        const courseCard = this.closest('.course-card');
        const courseTitle = courseCard.querySelector('.course-card-title').textContent;
        const coursePrice = courseCard.querySelector('.course-price-current').textContent;
        const courseImage = courseCard.querySelector('.course-card-media img').src;

        // Add to cart
        addToCart({
          title: courseTitle,
          price: parseFloat(coursePrice.replace('EGP', '')),
          image: courseImage,
          id: Date.now() + Math.random()
        });

        // Visual feedback
        this.style.background = 'var(--elkably-primary)';
        this.querySelector('span').textContent = 'Added!';
        icon.classList.remove('fa-shopping-cart');
        icon.classList.add('fa-check');

        setTimeout(() => {
          this.style.background = '';
          this.querySelector('span').textContent = originalText;
          icon.classList.remove('fa-check');
          icon.classList.add('fa-shopping-cart');
        }, 2000);
      });
    });
  });
</script>

<!-- Shopping Cart Sidebar -->
<div class="cart-sidebar" id="cartSidebar">
  <div class="cart-sidebar-overlay" id="cartSidebarOverlay"></div>
  <div class="cart-sidebar-content">
    <div class="cart-sidebar-header">
      <h3 class="cart-sidebar-title">
        <i class="fas fa-shopping-cart"></i>
        Shopping Cart
      </h3>
      <button class="cart-sidebar-close" id="cartSidebarClose">
        <i class="fas fa-times"></i>
      </button>
    </div>

    <div class="cart-sidebar-body">
      <div class="cart-items" id="cartItems">
        <div class="cart-empty">
          <div class="cart-empty-icon">
            <i class="fas fa-shopping-cart"></i>
          </div>
          <h4>Your cart is empty</h4>
          <p>Add some courses to get started!</p>
        </div>
      </div>
    </div>

    <div class="cart-sidebar-footer">
      <div class="cart-total" id="cartTotal">
        <div class="cart-total-row">
          <span>Subtotal:</span>
          <span class="cart-subtotal">EGP0.00</span>
        </div>
        <div class="cart-total-row">
          <span>Tax:</span>
          <span class="cart-tax">EGP0.00</span>
        </div>
        <div class="cart-total-row cart-total-final">
          <span>Total:</span>
          <span class="cart-total-amount">EGP0.00</span>
        </div>
      </div>

      <div class="cart-actions">
        <button class="btn-cart-checkout" id="cartCheckout" disabled>
          <i class="fas fa-credit-card"></i>
          Proceed to Checkout
        </button>
        <button class="btn-cart-continue" id="cartContinue">
          Continue Shopping
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Shopping Cart Functionality -->
<script>
  // Cart Management System
  let cart = [];
  let cartTotal = 0;

  // Initialize cart from server
  function initCart() {
    // Initialize cart data from server
    window.sessionCart = window.cartData || [];
    console.log('Initializing cart with data:', window.sessionCart);

    // Update global cart count and refresh cart data
    if (window.globalCart) {
      window.globalCart.setSessionCart(window.sessionCart);
      window.globalCart.refreshCartData();
    }
  }

  // Add item to cart
  function addToCart(item) {
    // Check if user is logged in
    <% if (!user) { %>
    showCartNotification('Please login to add items to cart', 'error');
    setTimeout(() => {
      window.location.href = '/auth/login';
    }, 3500); // Increased delay
    return;
    <% } %>

    // Add to cart via API (only send ID and type - server will get price from database)
    fetch('/purchase/cart/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          itemId: item.id,
          itemType: item.type || 'bundle'
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showCartNotification(data.message, 'success');

          // Update global cart count and refresh cart data
          if (window.globalCart) {
            window.globalCart.refreshCartData();
          }

          // Show cart sidebar
          showCartSidebar();
        } else {
          showCartNotification(data.message, 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showCartNotification('Error adding item to cart', 'error');
      });
  }

  // Remove item from cart
  function removeFromCart(itemId) {
    // Ensure sessionCart is initialized
    if (!window.sessionCart) {
      window.sessionCart = [];
      showCartNotification('Cart is empty', 'error');
      return;
    }

    // Find the item in the session cart to get its type
    const item = window.sessionCart.find(cartItem => cartItem.id === itemId);
    if (!item) {
      showCartNotification('Item not found in cart', 'error');
      return;
    }

    console.log('Removing item from cart:', item);

    fetch('/purchase/cart/remove', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          itemId: itemId,
          itemType: item.type
        })
      })
      .then(response => {
        console.log('Response status:', response.status);
        return response.json();
      })
      .then(data => {
        console.log('Remove cart response:', data);
        if (data.success) {
          // Update session cart data
          window.sessionCart = window.sessionCart.filter(cartItem => cartItem.id !== itemId);
          showCartNotification('Item removed from cart');
          // Update global cart count and refresh cart data
          if (window.globalCart) {
            window.globalCart.updateCartSidebar();
          }
        } else {
          showCartNotification(data.message || 'Failed to remove item from cart', 'error');
        }
      })
      .catch(error => {
        console.error('Error removing from cart:', error);
        showCartNotification('Error removing item from cart', 'error');
      });
  }

  // Update item quantity
  function updateQuantity(itemId, newQuantity) {
    const item = cart.find(item => item.id === itemId);
    if (item) {
      if (newQuantity <= 0) {
        removeFromCart(itemId);
      } else {
        item.quantity = newQuantity;
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartDisplay();
      }
    }
  }

  // Update cart display
  function updateCartDisplay() {
    updateCartCount();
    updateCartItems();
    updateCartTotal();
  }

  // Update cart count in header
  function updateCartCount() {
    const cartCount = document.getElementById('cartCount');
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = totalItems;

    // Add animation class
    cartCount.classList.add('cart-count-updated');
    setTimeout(() => cartCount.classList.remove('cart-count-updated'), 300);
  }

  // Update cart items in sidebar
  function updateCartItems() {
    const cartItems = document.getElementById('cartItems');

    if (cart.length === 0) {
      cartItems.innerHTML = `
      <div class="cart-empty">
        <div class="cart-empty-icon">
          <i class="fas fa-shopping-cart"></i>
        </div>
        <h4>Your cart is empty</h4>
        <p>Add some courses to get started!</p>
      </div>
    `;
      return;
    }

    cartItems.innerHTML = cart.map(item => `
    <div class="cart-item" data-id="${item.id}">
      <div class="cart-item-image">
        <img src="${item.image}" alt="${item.title}">
      </div>
      <div class="cart-item-details">
        <h5 class="cart-item-title">${item.title}</h5>
        <div class="cart-item-price">EGP${item.price.toFixed(2)}</div>
        <div class="cart-item-controls">
          <button class="cart-quantity-btn" onclick="updateQuantity(${item.id}, ${item.quantity - 1})">-</button>
          <span class="cart-quantity">${item.quantity}</span>
          <button class="cart-quantity-btn" onclick="updateQuantity(${item.id}, ${item.quantity + 1})">+</button>
        </div>
      </div>
      <div class="cart-item-actions">
        <button class="cart-remove-btn" onclick="removeFromCart(${item.id})" title="Remove item">
          <i class="fas fa-trash"></i>
        </button>
      </div>
    </div>
  `).join('');
  }

  // Update cart total
  function updateCartTotal() {
    const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const tax = 0; // No tax
    const total = subtotal + tax;

    document.querySelector('.cart-subtotal').textContent = `EGP${subtotal.toFixed(2)}`;
    document.querySelector('.cart-tax').textContent = `EGP${tax.toFixed(2)}`;
    document.querySelector('.cart-total-amount').textContent = `EGP${total.toFixed(2)}`;

    // Enable/disable checkout button
    const checkoutBtn = document.getElementById('cartCheckout');
    checkoutBtn.disabled = cart.length === 0;
  }

  // Show cart sidebar
  function showCartSidebar() {
    const cartSidebar = document.getElementById('cartSidebar');
    cartSidebar.classList.add('cart-sidebar-open');
    document.body.classList.add('cart-sidebar-active');
  }

  // Hide cart sidebar
  function hideCartSidebar() {
    const cartSidebar = document.getElementById('cartSidebar');
    cartSidebar.classList.remove('cart-sidebar-open');
    document.body.classList.remove('cart-sidebar-active');
  }

  // Proceed to checkout page
  function proceedToCheckout() {
    // Check if cart is empty
    if (!window.sessionCart || window.sessionCart.length === 0) {
      showCartNotification('Your cart is empty. Please add items before checkout.', 'error');
      return;
    }

    // Double-check with server cart data
    const cartCount = document.getElementById('cartCount');
    if (cartCount && parseInt(cartCount.textContent) === 0) {
      showCartNotification('Your cart is empty. Please add items before checkout.', 'error');
      return;
    }

    // Redirect to checkout page
    window.location.href = '/purchase/checkout';
  }

  // Show cart notification
  function showCartNotification(message, type = 'success') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `cart-notification cart-notification-${type}`;
    notification.innerHTML = `
    <div class="cart-notification-content">
      <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
      <span>${message}</span>
    </div>
  `;

    document.body.appendChild(notification);

    // Show notification
    setTimeout(() => notification.classList.add('show'), 100);

    // Hide notification
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // Cart sidebar event listeners
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize cart
    initCart();

    // Cart toggle button
    const cartToggle = document.getElementById('cartToggle');
    const cartSidebar = document.getElementById('cartSidebar');
    const cartSidebarClose = document.getElementById('cartSidebarClose');
    const cartSidebarOverlay = document.getElementById('cartSidebarOverlay');
    const cartContinue = document.getElementById('cartContinue');
    const cartCheckout = document.getElementById('cartCheckout');

    // Open cart sidebar
    cartToggle.addEventListener('click', showCartSidebar);

    // Close cart sidebar
    cartSidebarClose.addEventListener('click', hideCartSidebar);
    cartSidebarOverlay.addEventListener('click', hideCartSidebar);
    cartContinue.addEventListener('click', hideCartSidebar);

    // Checkout button
    cartCheckout.addEventListener('click', function() {
      proceedToCheckout();
    });

    // Close cart on escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && cartSidebar.classList.contains('cart-sidebar-open')) {
        hideCartSidebar();
      }
    });
  });

  // Add bundle to cart functionality
  function addBundleToCart(bundleId) {
    // Check if user is logged in
    <% if (!user) { %>
    showCartNotification('Please login to add items to cart', 'error');
    setTimeout(() => {
      window.location.href = '/auth/login';
    }, 3500); // Increased delay
    return;
    <% } %>

    // Find the bundle button for visual feedback
    const bundleCard = document.querySelector(`[onclick="addBundleToCart('${bundleId}')"]`).closest('.course-card-enhanced');
    const btn = bundleCard.querySelector('.btn-add-to-cart-enhanced');
    const originalText = btn.querySelector('span').textContent;
    const icon = btn.querySelector('i');

    // Show loading state
    btn.disabled = true;
    btn.querySelector('span').textContent = 'Adding...';
    icon.classList.remove('fa-shopping-cart');
    icon.classList.add('fa-spinner', 'fa-spin');

    // Add to cart via API (only send ID and type - server will get price from database)
    fetch('/purchase/cart/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          itemId: bundleId,
          itemType: 'bundle'
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Visual feedback
          btn.style.background = '#27ae60';
          btn.querySelector('span').textContent = 'Added!';
          icon.classList.remove('fa-spinner', 'fa-spin');
          icon.classList.add('fa-check');

          showCartNotification(data.message, 'success');

          // Update global cart count
          if (window.globalCart) {
            window.globalCart.refreshCartData();
          }

          setTimeout(() => {
            btn.disabled = false;
            btn.style.background = '';
            btn.querySelector('span').textContent = originalText;
            icon.classList.remove('fa-check');
            icon.classList.add('fa-shopping-cart');
          }, 2000);
        } else {
          btn.disabled = false;
          btn.querySelector('span').textContent = originalText;
          icon.classList.remove('fa-spinner', 'fa-spin');
          icon.classList.add('fa-shopping-cart');

          showCartNotification(data.message || 'Failed to add item to cart', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        btn.disabled = false;
        btn.querySelector('span').textContent = originalText;
        icon.classList.remove('fa-spinner', 'fa-spin');
        icon.classList.add('fa-shopping-cart');

        showCartNotification('Network error. Please try again.', 'error');
      });
  }

  // Show cart notification (consistent across all pages)
  function showCartNotification(message, type = 'success') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `cart-notification cart-notification-${type}`;

    // Choose icon based on type
    const iconClass = type === 'success' ? 'fas fa-check-circle' :
      type === 'error' ? 'fas fa-exclamation-circle' :
      'fas fa-info-circle';

    notification.innerHTML = `
    <div class="cart-notification-content">
      <i class="${iconClass}"></i>
      <span>${message}</span>
    </div>
  `;

    document.body.appendChild(notification);

    // Show notification
    setTimeout(() => notification.classList.add('show'), 100);

    // Hide notification
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => notification.remove(), 300);
    }, 4000); // Increased duration
  }

  // Alias for backward compatibility
  function showNotification(message, type = 'info') {
    showCartNotification(message, type);
  }

  // Clear filters function
  function clearFilters() {
    window.location.href = '/courses/onground';
  }

  // Toggle wishlist function
  function toggleWishlist(itemId, itemType) {
    // Check if user is logged in
    <% if (!user) { %>
    showCartNotification('Please login to manage your wishlist', 'error');
    setTimeout(() => {
      window.location.href = '/auth/login';
    }, 3500); // Increased delay
    return;
    <% } %>

    // Find the heart icon - use event target for more reliable selection
    const heartIcon = event.target.closest('.course-favorite-btn-enhanced').querySelector('i');
    const isCurrentlyInWishlist = heartIcon.classList.contains('fas');

    console.log('Toggling wishlist for:', itemId, itemType, 'Currently in wishlist:', isCurrentlyInWishlist);

    // Show loading state
    heartIcon.classList.add('fa-spinner', 'fa-spin');
    heartIcon.classList.remove('fas', 'far');

    // Toggle wishlist via API
    fetch('/purchase/wishlist/toggle', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          itemId: itemId,
          itemType: itemType
        })
      })
      .then(response => response.json())
      .then(data => {
        console.log('Wishlist toggle response:', data);

        if (data.success) {
          // Update heart icon based on new status
          heartIcon.classList.remove('fa-spinner', 'fa-spin');
          if (data.isInWishlist) {
            heartIcon.classList.add('fas');
            heartIcon.classList.remove('far');
            heartIcon.style.color = '#ff6b6b';
          } else {
            heartIcon.classList.add('far');
            heartIcon.classList.remove('fas');
            heartIcon.style.color = '';
          }

          showCartNotification(data.message, 'success');
        } else {
          // Revert to original state
          heartIcon.classList.remove('fa-spinner', 'fa-spin');
          if (isCurrentlyInWishlist) {
            heartIcon.classList.add('fas');
            heartIcon.classList.remove('far');
            heartIcon.style.color = '#ff6b6b';
          } else {
            heartIcon.classList.add('far');
            heartIcon.classList.remove('fas');
            heartIcon.style.color = '';
          }

          showCartNotification(data.message, 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        // Revert to original state
        heartIcon.classList.remove('fa-spinner', 'fa-spin');
        if (isCurrentlyInWishlist) {
          heartIcon.classList.add('fas');
          heartIcon.classList.remove('far');
          heartIcon.style.color = '#ff6b6b';
        } else {
          heartIcon.classList.add('far');
          heartIcon.classList.remove('fas');
          heartIcon.style.color = '';
        }

        showCartNotification('Error updating wishlist', 'error');
      });
  }
</script>

<!-- Import index-specific CSS -->
<link rel="stylesheet" href="/css/index.css">

<style>
  .btn-purchased-enhanced {
    background: #27ae60 !important;
    color: white !important;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: not-allowed;
    opacity: 0.8;
  }

  .quick-action-btn.purchased {
    background: #27ae60 !important;
    color: white !important;
    cursor: not-allowed;
    opacity: 0.8;
  }

  .notification {
    position: fixed;
    top: 2rem;
    right: 2rem;
    background: white;
    border-radius: 10px;
    padding: 1rem 1.5rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    z-index: 1000;
    transform: translateX(100%);
    opacity: 0;
    transition: all 0.3s ease;
  }

  .notification.show {
    transform: translateX(0);
    opacity: 1;
  }

  .notification-success {
    border-left: 4px solid #27ae60;
  }

  .notification-error {
    border-left: 4px solid #e74c3c;
  }

  .notification-content {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .notification-success .notification-content i {
    color: #27ae60;
  }

  .notification-error .notification-content i {
    color: #e74c3c;
  }

  /* Cart notification styles */
  .cart-notification {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    border-radius: 10px;
    padding: 1rem 1.5rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    z-index: 9999;
    opacity: 0;
    transition: all 0.3s ease;
  }

  .cart-notification.show {
    transform: translate(-50%, -50%);
    opacity: 1;
  }

  .cart-notification-success {
    border-left: 4px solid #27ae60;
  }

  .cart-notification-error {
    border-left: 4px solid #e74c3c;
  }

  .cart-notification-content {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .cart-notification-success .cart-notification-content i {
    color: #27ae60;
  }

  .cart-notification-error .cart-notification-content i {
    color: #e74c3c;
  }

  /* Filter Apply Button Styles */
  .filter-apply-btn {
    background: linear-gradient(135deg, #ff6b6b, #ee5a24);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    min-height: 44px;
  }

  .filter-apply-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
  }

  .filter-apply-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .filter-apply-btn i {
    font-size: 1rem;
  }

  /* Loading state for filter buttons */
  .search-btn-enhanced:disabled,
  .filter-apply-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  /* Enhanced filter group spacing */
  .filter-dropdowns-enhanced {
    display: flex;
    gap: 1rem;
    align-items: end;
  }

  .filter-group:last-child {
    margin-top: auto;
  }
</style>

<!-- Import index-specific JavaScript -->
<script src="/js/index.js"></script>
<script src="/js/enhanced-scroll-effects.js"></script>

<%- include('partials/footer') %>